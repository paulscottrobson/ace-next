              	; --------------------------------------
              	; zasm: assemble "rom.listing"
              	; date: 2021-10-22 09:28:30
              	; --------------------------------------


              	; Disassembly of the file "C:\ACE\JupiterAce.rom"
              	;
              	; CPU Type: Z80
              	;
              	; Created with dZ80 1.50
              	;
              	; on Monday, 21 of January 2002 at 07:11 PM
              	;
              	; last updated 02-NOV-2002
              	;
              	; Cross-assembles to an 8K ROM file.
              	;
              	; Note. A Low-level Assembly Listing only.
              	
              	#define DEFB    .BYTE
              	#define DEFW    .WORD
              	#define DEFM    .TEXT
              	#define EQU     .EQU
              	#define ORG     .ORG
              	
0000:         	        ORG     $0000
              	
              	; -------------------
              	; THE 'START' RESTART
              	; -------------------
              	
0000: F3      	L0000:  DI                              ; disable interrupts.
0001: 21003C  	        LD      HL,$3C00                ; start of 'User' RAM
0004: 3EFC    	        LD      A,$FC                   ; a test byte and 1K masking byte.
0006: 1820    	        JR      L0028                   ; forward to continue at Part 2.
              	
              	; -------------------
              	; THE 'PRINT' RESTART
              	; -------------------
              	
0008: D9      	L0008:  EXX                             ; preserve main registers.
0009: DDCB3E5E	        BIT     3,(IX+$3E)              ; test FLAGS for print destination.
000D: C3EE03  	        JP      L03EE                   ; forward to
              	
              	; ---------------------------
              	; THE 'STACK WORD DE' RESTART
              	; ---------------------------
              	
0010: 2A3B3C  	L0010:  LD      HL,($3C3B)              ; SPARE
0013: 73      	        LD      (HL),E
0014: 23      	        INC     HL
0015: C35F08  	        JP      L085F                   ;
              	
              	; -------------------------
              	; THE 'POP WORD DE' RESTART
              	; -------------------------
              	
              	
0018: 2A3B3C  	L0018:  LD      HL,($3C3B)              ; SPARE
001B: 2B      	        DEC     HL
001C: 56      	        LD      D,(HL)
001D: C35908  	        JP      L0859                   ;
              	
              	; -------------------
              	; THE 'ERROR' RESTART
              	; -------------------
              	
0020: E1      	L0020:  POP     HL
0021: 7E      	        LD      A,(HL)
0022: 323D3C  	        LD      ($3C3D),A               ; ERR_NO
0025: C3AD00  	        JP      L00AD                   ;
              	
              	; ------------------------------------
              	; THE 'INITIALIZATION ROUTINE' Part 2.
              	; ------------------------------------
              	
0028: 24      	L0028:  INC     H                       ; increase high byte
0029: 77      	        LD      (HL),A                  ; insert A value
002A: BE      	        CP      (HL)                    ; compare to expected
002B: 28FB    	        JR      Z,L0028                 ; loop back while RAM is populated.
              	
002D: A4      	        AND     H                       ; limit to nearest 1K segment.
002E: 67      	        LD      H,A                     ; place back in H.
002F: 22183C  	        LD      ($3C18),HL              ; set system variable RAMTOP.
0032: F9      	        LD      SP,HL                   ; initialize the stack pointer.
              	
              	; the Z80 instructions CALL, PUSH and POP can now be used.
              	
0033: 210D01  	        LD      HL,L010D                ; prepare to copy the system variables
              	                                        ; initial state from ROM.
0036: 1803    	        JR      L003B                   ; skip past the fixed-position restart.
              	
              	; -----------------------
              	; THE 'INTERRUPT' RESTART
              	; -----------------------
              	
0038: C33A01  	L0038:  JP      L013A                   ; jump to somewhere more convenient.
              	
              	;------------------------------------------------------------------------------
              	;
              	; MEMORY MAP
              	;
              	; $0000 +======================================================+
              	;       |                                                      |
              	;       |                   ROM 8K                             |
              	;       |                                     v $2300          |
              	; $2000 +======================================================+ - - - - - -
              	;       |       copy of $2400                 |0|<  cassette  >|
              	; $2400 +-------------------------------------+-+--------------+
              	;       |       VIDEO MEMORY 768 bytes        |0| PAD 254 bytes| 1K RAM
              	; $2800 +-------------------------------------+-+--------------+
              	;       |       copy of $2c00                 ^ $2700          |
              	; $2C00 +------------------------------------------------------+
              	;       |       CHARACTER SET - Write-Only                     | 1K RAM
              	; $3000 +------------------------------------------------------+
              	;       |       copy of $3c00                                  |
              	; $3400 +------------------------------------------------------+
              	;       |       copy of $3c00                                  |
              	; $3800 +------------------------------------------------------+
              	;       |       copy of $3c00                                  |
              	; $3C00 +-------+----------------------------------------------+
              	;       |SYSVARS| DICT {12} DATA STACK ->         <- RET STACK | 1K RAM
              	; $4000 +=======+==============================================+ - - - - - -
              	;       |                                                      |
              	;                       48K AVAILABLE FOR EXPANSION.
              	;       |                                                      |
              	; $FFFF +======================================================+
              	;
              	; The Ace had an 8K ROM and was sold with 3K of RAM each byte of which had
              	; at least two addresses and sometimes four addresses so the mapping of the
              	; 3K of RAM was as above.
              	; The 768 bytes of video memory is accessed by the ROM using addresses
              	; $2400 - $26FF. This gives priority to the video circuitry which also needs
              	; this information to build the TV picture. The byte at $2700 is set to zero
              	; so that it is easy for the ROM to detect when it is at the end of the screen.
              	; The 254 bytes remaining are the PAD - the workspace used by FORTH.
              	; This same area is used by the tape recorder routines to assemble the tape
              	; header information but since, for accurate tape timing, the FORTH ROM needs
              	; priority over the video circuitry, then the ROM uses addresses $2301 - $23FF.
              	;
              	; Similarly the Character Set is written to by the ROM (and User) at the 1K
              	; section starting at $2C00. The video circuitry accesses this using addresses
              	; $2800 - $2BFF to build the TV picture. It is not possible for the ROM or User
              	; to read back the information from either address so this precludes the saving
              	; of character sets and writing a driver for a device like the ZX Printer.
              	;
              	; The final 1K or RAM has four addresses although it is normal to use addresses
              	; $3C00 - $3FFF. The first sixty three bytes are the System Variables which
              	; hold information like the number BASE and CONTEXT, and even the plotting
              	; coordinates should the user wish to develop a word like DRAW to draw lines.
              	;
              	; Then comes the User Dictionary, the first word of which is "FORTH" which links
              	; to the Dictionary in ROM. Next a gap of 12 bytes to allow for Data Stack
              	; underflow and then the Data Stack itself which grows upwards.
              	; At the opposite end of free memory is the Return Stack (machine stack) which
              	; grows downwards.
              	
              	; ------------------------------------
              	; THE 'INITIALIZATION ROUTINE' Part 3.
              	; ------------------------------------
              	
003B: 11243C  	L003B:  LD      DE,$3C24                ; destination system variable L_HALF
003E: 012D00  	        LD      BC,$002D                ; number of bytes.
0041: EDB0    	        LDIR                            ; copy initial state from ROM to RAM.
              	
0043: DD21003C	        LD      IX,$3C00                ; set IX to index the system variables.
0047: FD21C804	        LD      IY,L04C8                ; set IY to the SLOW return address.
              	
004B: CD240A  	L004B:  CALL    L0A24                   ; routine CLS.
              	
004E: AF      	        XOR     A                       ; clear accumulator.
              	
004F: 320027  	        LD      ($2700),A               ; make location after screen zero.
              	
              	; There are 128 bit-mapped 8x8 characters.
              	; Define the 8 Battenberg graphics ($10 to $17) from low byte of address.
              	; This routine also sets the other characters $00 to $0F and $18 to $1F
              	; to copies of this range. The inverse form of character $17 is used as the
              	; normal cursor - character $97.
              	
0052: 21002C  	L0052:  LD      HL,$2C00                ; point to the start of the 1K write-
              	                                        ; only Character Set RAM.
              	
0055: 7D      	L0055:  LD      A,L                     ; set A to low byte of address
0056: E6BF    	        AND     $BF                     ; AND %10111111
0058: 0F      	        RRCA                            ; rotate
0059: 0F      	        RRCA                            ; three times
005A: 0F      	        RRCA                            ; to test bit 2
005B: 3002    	        JR      NC,L005F                ; forward if not set.
              	
005D: 0F      	        RRCA                            ; else rotate
005E: 0F      	        RRCA                            ; twice more.
              	
005F: 0F      	L005F:  RRCA                            ; set carry from bit (3) or (6)
              	
0060: 47      	        LD      B,A
              	
0061: 9F      	        SBC     A,A                     ; $00 or $FF
0062: CB18    	        RR      B
0064: 47      	        LD      B,A
0065: 9F      	        SBC     A,A
0066: A8      	        XOR     B
0067: E6F0    	        AND     $F0
0069: A8      	        XOR     B
006A: 77      	        LD      (HL),A                  ; insert the byte.
006B: 2C      	        INC     L                       ; increment low byte of address
006C: 20E7    	        JR      NZ,L0055                ; loop back until the first 256 bytes
              	                                        ; have been filled with 32 repeating
              	                                        ; characters.
              	
              	; Now copy the bit patterns at the end of this ROM to the last 768 bytes of
              	; the Character RAM, filling in some blank bytes omitted to save ROM space.
              	; This process starts at high memory and works downwards.
              	
006E: 11FF2F  	L006E:  LD      DE,$2FFF                ; top of destination.
0071: 21FB1F  	        LD      HL,L1FFB                ; end of copyright character.
0074: 010800  	        LD      BC,$0008                ; 8 characters
              	
0077: EDB8    	        LDDR                            ; copy the  Â©  character
              	
0079: EB      	        EX      DE,HL                   ; switch pointers.
              	
007A: 3E5F    	        LD      A,$5F                   ; set character counter to ninety five.
              	                                        ; i.e. %0101 1111
              	                                        ; bit 5 shows which 32-character sector
              	                                        ; we are in.
              	
              	; enter a loop for the remaining characters supplying zero bytes as required.
              	
007C: 0E07    	L007C:  LD      C,$07                   ; set byte counter to seven.
              	
007E: CB6F    	        BIT     5,A                     ; test bit 5 of the counter.
0080: 2803    	        JR      Z,L0085                 ; forward if not in middle section
              	                                        ; which includes "[A-Z]"
              	
0082: 70      	        LD      (HL),B                  ; else insert a zero byte.
0083: 2B      	        DEC     HL                      ; decrement the destination address.
0084: 0D      	        DEC     C                       ; and the byte counter.
              	
0085: EB      	L0085:  EX      DE,HL                   ; switch pointers.
              	
0086: EDB8    	        LDDR                            ; copy the 5 or 6 characters.
              	
0088: EB      	        EX      DE,HL                   ; switch pointers.
              	
0089: 70      	        LD      (HL),B                  ; always insert the blank top byte.
008A: 2B      	        DEC     HL                      ; decrement the address.
              	
008B: 3D      	        DEC     A                       ; decrement the character counter.
              	
008C: 20EE    	        JR      NZ,L007C                ; back for all 95 characters.
              	
008E: ED56    	        IM      1                       ; Select Interrupt Mode 1
              	
0090: 1809    	        JR      L009B                   ; and then jump into the code for the
              	                                        ; QUIT word.
              	
              	
              	; ---------------
              	; THE 'QUIT' WORD
              	; ---------------
              	; (  --  )
              	; Clears return stack, empties input buffer and returns control to the
              	; keyboard.
              	
0092: 515549  	L0092:  DEFM    "QUI"                   ; 'name field'
0095: D4      	        DEFB    'T' + $80
              	
0096: 0000    	L0096:  DEFW    $0000                   ; 'link field' - end of linked list.
              	
0098: 04      	L0098:  DEFB    $04                     ; 'name length field'
              	
0099: 9B00    	L0099:  DEFW    L009B                   ; 'code field'
              	                                        ; address of machine code for routine.
              	
              	; ---
              	
009B: ED7B183C	L009B:  LD      SP,($3C18)              ; set stack-pointer to RAMTOP.
              	
009F: FB      	        EI                              ; Enable Interrupts.
              	
00A0: C3F204  	        JP      L04F2                   ; jump forward to the main execution
              	                                        ; loop.
              	
              	; ----------------
              	; THE 'ABORT' WORD
              	; ----------------
              	; Clears the data and return stacks, deletes any incomplete definition
              	; left in the dictionary, prints 'ERROR' and the byte from address $3C3D
              	; if the byte is non-negative, empties the input buffer, and returns
              	; control to the keyboard.
              	
              	
00A3: 41424F52	L00A3:  DEFM    "ABOR"                  ; 'name field'
00A7: D4      	        DEFB    'T' + $80
              	
00A8: 9800    	        DEFW    L0098                   ; 'link field' to previous word QUIT.
              	
00AA: 05      	L00AA:  DEFB    $05                     ; 'name length field'
              	
00AB: AD00    	L00AB:  DEFW    L00AD                   ; 'code field'
              	
              	; ---
              	
              	; -> also continuation of the error restart.
              	
00AD: FDE5    	L00AD:  PUSH    IY                      ; preserve current IY value slow/fast.
              	
00AF: FD21B904	        LD      IY,L04B9                ; set IY to FAST
              	                                        ; now empty the data stack
00B3: 2A373C  	        LD      HL,($3C37)              ; STKBOT
00B6: 223B3C  	        LD      ($3C3B),HL              ; SPARE
00B9: 213E3C  	        LD      HL,$3C3E                ; address FLAGS
00BC: 7E      	        LD      A,(HL)                  ; fetch status from FLAGS.
00BD: E6B3    	        AND     $B3                     ; AND %10110011
              	                                        ; reset bit 2 - show definition complete
              	                                        ; reset bit 3 - output to screen.
              	                                        ; reset bit 6 - show in interpreter mode
00BF: CB56    	        BIT     2,(HL)                  ; was there an incomplete definition ?
00C1: 77      	        LD      (HL),A                  ; update FLAGS
00C2: 281A    	        JR      Z,L00DE                 ; forward if no incomplete word.
              	
00C4: CDB904  	L00C4:  CALL    L04B9                   ; do forth
              	
00C7: 9004    	        DEFW    L0490                   ; dict          address of sv DICT
00C9: B308    	        DEFW    L08B3                   ; @             value of sv DICT (d).
00CB: 4B10    	        DEFW    L104B                   ; stk_data      d.         length field
00CD: 05      	        DEFB    $05                     ; five          d, 5.
00CE: D20D    	        DEFW    L0DD2                   ; +             d+5.       code field
00D0: 6B08    	        DEFW    L086B                   ; dup           d+5, d+5.
00D2: 1016    	        DEFW    L1610                   ; prvcur        d+5.
00D4: B515    	        DEFW    L15B5                   ; namefield     n.
00D6: 1110    	        DEFW    L1011                   ; stackwrd      n.
00D8: 373C    	        DEFW    $3C37                   ; (stkbot)      n, stkbot.
00DA: C108    	        DEFW    L08C1                   ; !             .
00DC: 0E1A    	        DEFW    L1A0E                   ; end-forth.    .
              	
              	; at this stage the system variable STKBOT holds the address of the
              	; obsolete name field and the system variable CURRENT points to the
              	; address of the previous complete word - obtained from the old link field.
              	
00DE: DDCB3D7E	L00DE:  BIT     7,(IX+$3D)              ; test ERR_NO for normal value 255.
00E2: 201B    	        JR      NZ,L00FF                ; set-min then main-loop if OK.
              	
00E4: CD0818  	        CALL    L1808                   ; else pr-inline
              	
              	; ---
              	
00E7: 4552524F	L00E7:  DEFM    "ERRO"                  ; the message "ERROR" with the last
00EB: D2      	        DEFB    'R' + $80               ; character inverted.
              	
              	; ---
              	
00EC: CDB904  	L00EC:  CALL    L04B9                   ; forth
              	
00EF: 1110    	        DEFW    L1011                   ; stack next word
00F1: 3D3C    	        DEFW    $3C3D                   ; -> system variable ERR_NO
00F3: 9608    	        DEFW    L0896                   ; C@            - fetch content byte
00F5: B309    	        DEFW    L09B3                   ; .             - print it
00F7: 950A    	        DEFW    L0A95                   ; CR
00F9: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
00FB: DD363DFF	        LD      (IX+$3D),$FF            ; set ERR_NO to 'No Error'
              	
00FF: 2A373C  	L00FF:  LD      HL,($3C37)              ; fetch STKBOT
0102: 010C00  	        LD      BC,$000C                ; allow twelve bytes for stack underflow
0105: 09      	        ADD     HL,BC                   ; add the extra
0106: 223B3C  	        LD      ($3C3B),HL              ; set SPARE
0109: FDE1    	        POP     IY                      ; restore previous state of IY
              	
010B: 188E    	        JR      L009B                   ; rejoin main loop
              	
              	; -------------------------
              	; THE 'DEFAULT ENVIRONMENT'
              	; -------------------------
              	; This is the default environment that is copied from ROM to RAM as part of
              	; the initialization process. This also contains the FORTH word FORTH definition
              	
010D: E026    	L010D:  DEFW    $26E0                   ; L_HALF
              	
010F: 00      	        DEFB    $00                     ; KEYCOD
0110: 00      	        DEFB    $00                     ; KEYCNT copy the 32 bytes.
0111: 00      	        DEFB    $00                     ; STATIN
0112: 0000    	        DEFW    $0000                   ; EXWRCH
0114: 00      	        DEFB    $00                     ; FRAMES
0115: 00      	        DEFB    $00                     ; FRAMES
0116: 00      	        DEFB    $00                     ; FRAMES
0117: 00      	        DEFB    $00                     ; FRAMES
0118: 00      	        DEFB    $00                     ; XCOORD
0119: 00      	        DEFB    $00                     ; YCOORD
011A: 4C3C    	        DEFW    $3C4C                   ; CURRENT
011C: 4C3C    	        DEFW    $3C4C                   ; CONTEXT
011E: 4F3C    	        DEFW    $3C4F                   ; VOCLNK
0120: 513C    	        DEFW    $3C51                   ; STKBOT
0122: 453C    	        DEFW    $3C45                   ; DICT
0124: 5D3C    	        DEFW    $3C5D                   ; SPARE
0126: FF      	        DEFB    $FF                     ; ERR_NO
0127: 00      	        DEFB    $00                     ; FLAGS
0128: 0A      	        DEFB    $0A                     ; BASE
              	
              	; FORTH
              	
0129: 464F5254	        DEFM    "FORT"                  ; The 'name field'
012D: C8      	        DEFB    'H' + $80               ; FORTH
              	
              	
012E: 0000    	        DEFW    $0000                   ; length field - filled when next word
              	                                        ; is defined.
0130: FF1F    	        DEFW    L1FFF                   ; link field copied to $3C49.
0132: 05      	        DEFB    $05                     ; name length field
0133: B511    	        DEFW    L11B5                   ; code field
0135: 493C    	        DEFW    $3C49                   ; address of parameters
0137: 00      	        DEFB    $00                     ; VOCLNK                        [$3C4F]
0138: 00      	        DEFB    $00                     ; - link to next vocabulary.
0139: 00      	        DEFB    $00                     ; last byte to be copied.    to [$3C51]
              	
              	; -----------------------------------------------
              	; THE 'CONTINUATION OF THE Z80 INTERRUPT' ROUTINE
              	; -----------------------------------------------
              	; The destination of the jump at $0038.
              	; Begin by saving both accumulators and the 3 main registers.
              	
013A: F5      	L013A:  PUSH    AF                      ; preserve both accumulators
013B: 08      	        EX      AF,AF'                  ;
013C: F5      	        PUSH    AF                      ;
              	
013D: C5      	        PUSH    BC                      ; and main registers.
013E: D5      	        PUSH    DE                      ;
013F: E5      	        PUSH    HL                      ;
              	
              	; Now wait for 62 * 12 clock cycles. ( To avoid flicker perhaps? ).
              	
0140: 063E    	        LD      B,$3E                   ; delay counter.
              	
0142: 10FE    	L0142:  DJNZ    L0142                   ; self loop for delay
              	
              	; Increment the 4-byte frames counter for use as a system clock.
              	
0144: 212B3C  	        LD      HL,$3C2B                ; FRAMES1
              	
0147: 34      	L0147:  INC     (HL)                    ; increment timer.
0148: 23      	        INC     HL                      ; next significant byte of four.
0149: 28FC    	        JR      Z,L0147                 ; loop back if the value wrapped back
              	                                        ; to zero.
              	
              	; Note. as manual points out, there is no actual check on this and if
              	; you leave your Ace switched on for 2.75 years it will advance to the
              	; following system variables although it takes several millennia to advance
              	; through the screen coordinates.
              	
              	; Now read the keyboard and if no new key then exit after restoring the
              	; preserved registers.
              	
014B: CD1003  	        CALL    L0310                   ; routine KEYBOARD.
              	
014E: 21283C  	        LD      HL,$3C28                ; address system variable STATIN
              	
0151: CB46    	        BIT     0,(HL)                  ; new key?
0153: 2821    	        JR      Z,L0176                 ; forward if not to RESTORE/EXIT
              	
0155: A7      	        AND     A                       ; zero key code ?
0156: 281E    	        JR      Z,L0176                 ; forward if so to EXIT.
              	
0158: FE20    	        CP      $20                     ; compare to SPACE
015A: 3814    	        JR      C,L0170                 ; forward if less as an Editing Key.
              	
015C: CB4E    	        BIT     1,(HL)                  ; CAPS shift?
015E: C40708  	        CALL    NZ,L0807                ; routine TO_UPPER
              	
0161: CB56    	        BIT     2,(HL)                  ; GRAPHICS mode?
0163: 2802    	        JR      Z,L0167                 ; skip forward if not
              	
0165: E69F    	        AND     $9F                     ; convert to one of 8 mosaic characters
              	
0167: CB5E    	L0167:  BIT     3,(HL)                  ; INVERSE mode?
0169: 2802    	        JR      Z,L016D                 ; forward if not.
              	
016B: F680    	        OR      $80                     ; set bit 7 to make character inverse.
              	
016D: CD9601  	L016D:  CALL    L0196                   ; routine pr_buffer
              	
0170: CDE601  	L0170:  CALL    L01E6                   ; routine EDIT_KEY
0173: CD8202  	        CALL    L0282                   ; routine pr_cursor
              	
              	; Before exiting restore the preserved registers.
              	
0176: E1      	L0176:  POP     HL                      ;
0177: D1      	        POP     DE                      ;
0178: C1      	        POP     BC                      ;
0179: F1      	        POP     AF                      ;
017A: 08      	        EX      AF,AF'                  ;
017B: F1      	        POP     AF                      ;
              	
017C: FB      	        EI                              ; Enable Interrupts
              	
017D: C9      	        RET                             ; return.
              	
              	; -----------------------------------
              	; THE 'PRINT to LOWER SCREEN' ROUTINE
              	; -----------------------------------
              	
017E: FE0D    	L017E:  CP      $0D                     ; carriage return?
0180: 2014    	        JR      NZ,L0196                ; forward if not
              	
              	; a carriage return to input buffer i.e. lower screen memory.
              	
0182: 210027  	        LD      HL,$2700                ; set pointer to location after the
              	                                        ; input buffer.
              	
0185: 22223C  	        LD      ($3C22),HL              ; set ENDBUF - end of logical line
0188: 22203C  	        LD      ($3C20),HL              ; set the CURSOR
              	
018B: AF      	        XOR     A                       ; clear A
              	
018C: CD9801  	        CALL    L0198                   ; print character zero.
              	
018F: 21E026  	        LD      HL,$26E0                ; left hand position of bottom line.
0192: 221E3C  	        LD      ($3C1E),HL              ; set INSCRN to this position.
0195: C9      	        RET                             ; return.
              	
              	; ---------------------------------------
              	; THE 'PRINT CHARACTER TO BUFFER' ROUTINE
              	; ---------------------------------------
              	
0196: A7      	L0196:  AND     A                       ; check for zero character
0197: C8      	        RET     Z                       ; return if so.
              	
              	; => also called from previous routine only to print a zero skipping above test.
              	
0198: 08      	L0198:  EX      AF,AF'                  ; preserve the output character.
              	
0199: 2A223C  	        LD      HL,($3C22)              ; fetch ENDBUF end of logical line
019C: 7E      	        LD      A,(HL)                  ; fetch character from position
019D: A7      	        AND     A                       ; is it zero ?
019E: 2806    	        JR      Z,L01A6                 ; skip forward if so.
              	
              	; else lower screen scrolling is required.
              	
01A0: 1100D9  	        LD      DE,$D900                ; $0000 - $2700
01A3: 19      	        ADD     HL,DE                   ; test if position is within video RAM
01A4: 3028    	        JR      NC,L01CE                ; forward if < $26FF
              	
              	; now check that the limit of 22 lines in lower screen is not exceeded.
              	
01A6: ED5B243C	L01A6:  LD      DE,($3C24)              ; fetch start of buffer from L_HALF
01AA: 21A0DB  	        LD      HL,$DBA0                ; $0000 - $2460
01AD: 19      	        ADD     HL,DE                   ;
01AE: 3034    	        JR      NC,L01E4                ; forward to exit if buffer full.
              	
              	
01B0: 2A1C3C  	        LD      HL,($3C1C)              ; fetch position SCRPOS for upper screen
01B3: 012000  	        LD      BC,$0020                ; allow an extra 32 characters - 1 line.
01B6: 09      	        ADD     HL,BC                   ;
01B7: ED52    	        SBC     HL,DE                   ; subtract the start of input buffer
01B9: D5      	        PUSH    DE                      ; and save the L_HALF value
              	
01BA: D42104  	        CALL    NC,L0421                ; routine to scroll upper display.
              	
01BD: CDB002  	        CALL    L02B0                   ; find zerobyte loc in HL
              	
01C0: D1      	        POP     DE                      ; retrieve the L_HALF value
              	
01C1: CD2F04  	        CALL    L042F                   ; routine scroll and blank
              	
              	; The four system variables INSCRN, CURSOR, ENDBUF and L_HALF are each
              	; reduced by 32 bytes a screen line.
              	
01C4: 211E3C  	        LD      HL,$3C1E                ; address INSCRN the left-hand location
              	                                        ; of the current input line.
              	
01C7: 0604    	        LD      B,$04                   ; four system variables to update
              	
01C9: CD4304  	L01C9:  CALL    L0443                   ; routine SCR-PTRS
              	
01CC: 10FB    	        DJNZ    L01C9                   ; repeat for all four pointers.
              	
              	; ok to print
              	
01CE: CD0203  	L01CE:  CALL    L0302                   ; routine find characters to EOL.
              	
01D1: 54      	        LD      D,H                     ; HL is end of line
01D2: 5D      	        LD      E,L                     ; transfer to DE register.
01D3: 23      	        INC     HL                      ; increment
01D4: 22223C  	        LD      ($3C22),HL              ; update ENDBUF
01D7: 2B      	        DEC     HL                      ; decrement
01D8: 2B      	        DEC     HL                      ; so HL = DE -1
              	
01D9: 2802    	        JR      Z,L01DD                 ; skip if BC zero.
              	
01DB: EDB8    	        LDDR                            ; else move the characters.
              	
01DD: 08      	L01DD:  EX      AF,AF'                  ; restore the output character.
01DE: 12      	        LD      (DE),A                  ; insert at screen position.
              	                                        ; (a zero if CR lower)
01DF: 13      	        INC     DE                      ; next character position
01E0: ED53203C	        LD      ($3C20),DE              ; update CURSOR
              	
01E4: AF      	L01E4:  XOR     A                       ; ?
01E5: C9      	        RET                             ; return.
              	
              	; -------------------------
              	; THE 'EDIT KEY' SUBROUTINE
              	; -------------------------
              	
01E6: 21F001  	L01E6:  LD      HL,L01F0                ; address the EDIT KEYS table.
              	
01E9: 1600    	        LD      D,$00                   ; prepare to index by one byte.
01EB: 5F      	        LD      E,A                     ; character code to E.
01EC: 19      	        ADD     HL,DE                   ; index into the table.
              	
01ED: 5E      	        LD      E,(HL)                  ; pick up required offset to the
              	                                        ; handling routine.
              	
01EE: 19      	        ADD     HL,DE                   ; add to the current address.
01EF: E9      	        JP      (HL)                    ; exit via the routine.
              	
              	; ---------------------
              	; THE 'EDIT KEYS' TABLE
              	; ---------------------
              	
01F0: 20      	L01F0:  DEFB    $20             ; L0210         $00     - RET
01F1: 13      	L01F1:  DEFB    $13             ; L0204         $01     - LEFT
01F2: 0C      	L01F2:  DEFB    $0C             ; L01FE         $02     - CAPS
01F3: 1E      	L01F3:  DEFB    $1E             ; L0211         $03     - RIGHT
01F4: 0A      	L01F4:  DEFB    $0A             ; L01FE         $04     - GRAPH
01F5: 37      	L01F5:  DEFB    $37             ; L022C         $05     - DEL
01F6: 1A      	L01F6:  DEFB    $1A             ; L0210         $06     - RET
01F7: 50      	L01F7:  DEFB    $50             ; L0247         $07     - UP
01F8: 06      	L01F8:  DEFB    $06             ; L01FE         $08     - INV
01F9: 9C      	L01F9:  DEFB    $9C             ; L0295         $09     - DOWN
01FA: C9      	L01FA:  DEFB    $C9             ; L02C3         $0A     - DEL LINE
01FB: 15      	L01FB:  DEFB    $15             ; L0210         $0B     - RET
01FC: 14      	L01FC:  DEFB    $14             ; L0210         $0C     - RET
01FD: D3      	L01FD:  DEFB    $D3             ; L02D0         $0D     - KEY-ENTER
              	
              	; -------------------------------
              	; THE 'TOGGLE STATUS BIT' ROUTINE
              	; -------------------------------
              	; The keycodes have been cleverly mapped to individual bits of the STATIN
              	; system variable so this simple routine maintains all three status bits.
              	; KEY '2' - CAPS SHIFT, '4' - GRAPHICS, '8' - INVERSE VIDEO.
              	
01FE: 21283C  	L01FE:  LD      HL,$3C28                ; system variable STATIN
0201: AE      	        XOR     (HL)                    ; toggle the single relevant bit.
0202: 77      	        LD      (HL),A                  ; put back.
0203: C9      	        RET                             ; return.
              	
              	; ----------------------------
              	; THE 'CURSOR LEFT' SUBROUTINE
              	; ----------------------------
              	; this subroutine moves the cursor to the left unless the character at that
              	; position is zero.
              	
0204: 2A203C  	L0204:  LD      HL,($3C20)              ; fetch CURSOR.
0207: 2B      	        DEC     HL                      ; decrement value.
0208: 7E      	        LD      A,(HL)                  ; fetch character at new position.
0209: A7      	        AND     A                       ; test for zero. (cr)
020A: C8      	        RET     Z                       ; return if so.                  >>
              	
020B: 22203C  	        LD      ($3C20),HL              ; else update CURSOR
020E: 23      	        INC     HL                      ; step back
020F: 77      	        LD      (HL),A                  ; and put character that was at new
              	                                        ; cursor position where cursor is now.
              	
0210: C9      	L0210:  RET                             ; return.
              	
              	; Note. various unallocated keys in the EDIT KEYS table point to the
              	; above RET instruction.
              	
              	; -----------------------------
              	; THE 'CURSOR RIGHT' SUBROUTINE
              	; -----------------------------
              	
0211: 2A203C  	L0211:  LD      HL,($3C20)              ; fetch CURSOR position
0214: 23      	        INC     HL                      ; and increment it.
              	
0215: ED5B223C	        LD      DE,($3C22)              ; fetch ENDBUF - end of current line.
0219: A7      	        AND     A                       ; prepare to subtract.
021A: ED52    	        SBC     HL,DE                   ; test
021C: C8      	        RET     Z                       ; return if zero - CURSOR is at ENDBUF
              	
021D: 19      	        ADD     HL,DE                   ; else reform the pointers.
021E: 22203C  	        LD      ($3C20),HL              ; update CURSOR
0221: 7E      	        LD      A,(HL)                  ; fetch character at new position.
0222: 2B      	        DEC     HL                      ; decrement
0223: 77      	        LD      (HL),A                  ; and insert where cursor was.
0224: C9      	        RET                             ; ret.
              	
              	; ---------------------------
              	; THE 'DELETE CURSOR' ROUTINE
              	; ---------------------------
              	; Moves cursor position to right and then continues into DEL-CHAR
              	
0225: 2A203C  	L0225:  LD      HL,($3C20)              ; fetch CURSOR
0228: 23      	        INC     HL                      ; increment position.
0229: 22203C  	        LD      ($3C20),HL              ; update CURSOR
              	
              	
              	; ------------------------------
              	; THE 'DELETE CHARACTER' ROUTINE
              	; ------------------------------
              	
022C: CD0203  	L022C:  CALL    L0302                   ; routine finds characters to EOL.
              	
022F: 62      	        LD      H,D                     ; transfer CURSOR position DE to HL.
0230: 6B      	        LD      L,E                     ;
0231: 1B      	        DEC     DE                      ; decrement DE
0232: 1A      	        LD      A,(DE)                  ; fetch character to left of original
              	                                        ; cursor.
0233: A7      	        AND     A                       ; test for zero.
0234: C8      	        RET     Z                       ; return if so.                 >>
              	
0235: ED53203C	        LD      ($3C20),DE              ; else update CURSOR
0239: 78      	        LD      A,B                     ; check for count of characters
023A: B1      	        OR      C                       ; being zero
023B: 2802    	        JR      Z,L023F                 ; skip if so.
              	
023D: EDB0    	L023D:  LDIR                            ; else shift characters to left.
              	
023F: 2B      	L023F:  DEC     HL                      ; decrement HL so that points to end -
              	                                        ; last position on the logical line.
0240: 3620    	        LD      (HL),$20                ; insert a space.
0242: 22223C  	        LD      ($3C22),HL              ; set ENDBUF
0245: 0C      	        INC     C                       ; reset zero flag??
0246: C9      	        RET                             ; return.
              	
              	; -----------------------
              	; THE 'CURSOR UP' ROUTINE
              	; -----------------------
              	; When the cursor is moved up while editing a multi-line word definition,
              	; then the cursor is first moved to the left of the screen abutting the
              	; character zeros at the leftmost position.
              	; These zero characters appear as spaces but mark the beginning of each logical
              	; line. A logical line may, for instance if it contains a text item, extend over
              	; several physical screen lines.
              	
0247: CD0402  	L0247:  CALL    L0204                   ; routine CURSOR-LEFT
024A: 2808    	        JR      Z,L0254                 ; skip forward if not possible.
              	
              	; else move left by thirty two positions. This may achieve a vertical move if
              	; attempted when a word is first being entered. Alternatively if one of the
              	; calls to cursor left fails having encountered a zero, then all subsequent
              	; calls will fail. The routine will return with the cursor adjacent to the zero.
              	
024C: 061F    	        LD      B,$1F                   ; count 31 decimal
024E: CD0402  	L024E:  CALL    L0204                   ; move cursor left thirty one times.
0251: 10FB    	        DJNZ    L024E                   ; makes thirty two moves counting first
              	
0253: C9      	        RET                             ; return.
              	
              	; ---
              	
0254: 2A1E3C  	L0254:  LD      HL,($3C1E)              ; fetch INSCRN start of current line.
0257: ED5B243C	        LD      DE,($3C24)              ; fetch L_HALF start of buffer.
025B: A7      	        AND     A                       ; reset carry for
025C: ED52    	        SBC     HL,DE                   ; true subtraction.
025E: C8      	        RET     Z                       ; return if at beginning of input buffer
              	
025F: CD2502  	        CALL    L0225                   ; routine DEL-CURSOR
              	
0262: 2A1E3C  	        LD      HL,($3C1E)              ; fetch INSCRN leftmost location of
              	                                        ; current line.
0265: 11E0FF  	        LD      DE,$FFE0                ; make DE minus thirty two.
0268: AF      	        XOR     A                       ; clear accumulator to zero.
              	
0269: 19      	L0269:  ADD     HL,DE                   ; subtract 32
026A: BE      	        CP      (HL)                    ; compare contents to zero
              	                                        ; ( i.e. prev (cr) or buffer start?)
026B: 20FC    	        JR      NZ,L0269                ; loop back until HL holds zero.
              	
026D: 221E3C  	        LD      ($3C1E),HL              ; update INSCRN
              	
0270: CDF402  	        CALL    L02F4                   ; find endbuf
              	
0273: 22203C  	        LD      ($3C20),HL              ; set CURSOR
              	
              	; ----------
              	; PR_CURSOR
              	; ----------
              	
0276: 3EA0    	L0276:  LD      A,$A0                   ; inverse space - so solid square
              	
0278: CD7E01  	        CALL    L017E                   ; routine PR_LOWER
              	
027B: 2A203C  	        LD      HL,($3C20)              ; CURSOR
027E: 2B      	        DEC     HL
027F: 22203C  	        LD      ($3C20),HL              ; CURSOR
              	
              	; -> from interrupt
0282: 2A203C  	L0282:  LD      HL,($3C20)              ; CURSOR
              	
0285: 3A283C  	        LD      A,($3C28)               ; STATIN
0288: 1F      	        RRA                             ; ignore bit 0
0289: 3697    	        LD      (HL),$97                ; pixel cursor.
028B: 1F      	        RRA                             ; test bit 1 - CAPS
028C: 3002    	        JR      NC,L0290                ; forward if no CAPS SHIFT
              	
028E: 36C3    	        LD      (HL),$C3                ; inverse [C] cursor.
              	
0290: 1F      	L0290:  RRA                             ; test bit 2 - GRAPHICS.
0291: D0      	        RET     NC                      ; return if not
              	
0292: 36C7    	L0292:  LD      (HL),$C7                ; inverse [G] cursor.
0294: C9      	        RET                             ; return
              	
              	; -------------------------
              	; THE 'CURSOR DOWN' ROUTINE
              	; -------------------------
              	
              	
0295: CD1102  	L0295:  CALL    L0211                   ; routine CURSOR RIGHT
0298: 2808    	        JR      Z,L02A2                 ; forward if not possible.
              	
029A: 061F    	        LD      B,$1F                   ; set counter to thirty one.
              	
029C: CD1102  	L029C:  CALL    L0211                   ; routine CURSOR RIGHT
029F: 10FB    	        DJNZ    L029C                   ; thirty two moves altogether.
02A1: C9      	        RET                             ; return.
              	
              	; ---
              	
02A2: CDB002  	L02A2:  CALL    L02B0                   ; find zerobyte
02A5: E0      	        RET     PO                      ; return if    found
              	
02A6: E5      	        PUSH    HL                      ; save position
02A7: CD2502  	        CALL    L0225                   ; routine DEL-CURSOR
02AA: E1      	        POP     HL                      ; retrieve position.
02AB: CDED02  	        CALL    L02ED                   ; set logical line
02AE: 18C6    	        JR      L0276                   ; back to exit via pr_cursor.
              	
              	; ---
              	; find zerobyte
              	; ---
              	; -> called 5 times
              	
02B0: 210027  	L02B0:  LD      HL,$2700                ; this location is always zero.
              	                                        ; the byte following video RAM.
02B3: ED5B1E3C	        LD      DE,($3C1E)              ; INSCRN        e.g. $26E0
              	
02B7: A7      	        AND     A                       ; prepare for true subtraction
              	
02B8: ED52    	        SBC     HL,DE                   ; subtract to give number of chars
              	
02BA: 44      	        LD      B,H                     ; transfer count to
02BB: 4D      	        LD      C,L                     ; the BC register pair.
              	
02BC: EB      	        EX      DE,HL                   ; transfer INSCR value to HL.
              	
02BD: 23      	        INC     HL                      ; start next location
02BE: AF      	        XOR     A                       ; search for a zero character.
              	
02BF: EDB1    	        CPIR                            ; at most BC locations.
              	                                        ; sets P/O flag if BC!=0
              	
02C1: 2B      	        DEC     HL                      ; step back to last non-zero
02C2: C9      	        RET                             ; return.
              	
              	; -------------------------
              	; THE 'DELETE LINE' ROUTINE
              	; -------------------------
              	; CHR$ 10
              	
02C3: 2A223C  	L02C3:  LD      HL,($3C22)              ; ENDBUF
02C6: 2B      	        DEC     HL                      ;
02C7: 22203C  	        LD      ($3C20),HL              ; CURSOR
              	
02CA: CD2C02  	L02CA:  CALL    L022C                   ; KEY-DEL
02CD: 20FB    	        JR      NZ,L02CA                ; repeat
              	
02CF: C9      	        RET                             ; return.
              	
              	; --------------------------
              	; THE 'KEY-ENTER' SUBROUTINE
              	; --------------------------
              	
02D0: 21283C  	L02D0:  LD      HL,$3C28                ; STATIN
02D3: CBEE    	        SET     5,(HL)                  ; signal new key.
02D5: CB86    	        RES     0,(HL)                  ; reset new key flag
02D7: C9      	        RET                             ; return.
              	
              	
              	; ------------------------
              	; THE 'SET BUFFER' ROUTINE
              	; ------------------------
              	; called by LIST, QUERY
              	
02D8: 210027  	L02D8:  LD      HL,$2700                ; one past end of screen.
02DB: ED5B243C	        LD      DE,($3C24)              ; fetch start of buffer from L_HALF
              	
02DF: CDFA07  	        CALL    L07FA                   ; routine SPACE_FILL
              	
02E2: 21E026  	        LD      HL,$26E0                ; first location of bottom line.
02E5: 22243C  	        LD      ($3C24),HL              ; set L_HALF
              	
02E8: 3600    	        LD      (HL),$00                ; insert a ZERO.
              	
              	; -> called by retype
02EA: 2A243C  	L02EA:  LD      HL,($3C24)              ; fetch L_HALF
              	
              	; -> from cursor down
02ED: 221E3C  	L02ED:  LD      ($3C1E),HL              ; set INSCRN
02F0: 23      	        INC     HL                      ; step past the zero
02F1: 22203C  	        LD      ($3C20),HL              ; set CURSOR
              	
              	; => from cursor up.
02F4: CDB002  	L02F4:  CALL    L02B0                   ; find zerobyte
              	
02F7: 3E20    	        LD      A,$20                   ; prepare a space
              	
02F9: 2B      	L02F9:  DEC     HL                      ; move to the left.
02FA: BE      	        CP      (HL)                    ; compare to space.
02FB: 28FC    	        JR      Z,L02F9                 ; back while spaces exist.
              	
02FD: 23      	        INC     HL                      ; point to last space encountered.
02FE: 22223C  	        LD      ($3C22),HL              ; set ENDBUF - end of logical line.
0301: C9      	        RET                             ; return.
              	
              	; ----------------------------------
              	; THE 'COUNT TO END OF LINE' ROUTINE
              	; ----------------------------------
              	; Find the number of characters to the end of the logical line.
              	
0302: 2A223C  	L0302:  LD      HL,($3C22)              ; system variable ENDBUF
0305: ED5B203C	        LD      DE,($3C20)              ; system variable CURSOR
0309: A7      	        AND     A                       ; prepare to subtract.
030A: ED52    	        SBC     HL,DE                   ; subtract to give character places
030C: 44      	        LD      B,H                     ; transfer result
030D: 4D      	        LD      C,L                     ; to the BC register pair.
030E: 19      	        ADD     HL,DE                   ; reform the pointers.
              	
030F: C9      	        RET                             ; return with zero flag set if cursor
              	                                        ; at EOL.
              	
              	; ----------------------
              	; THE 'KEYBOARD' ROUTINE
              	; ----------------------
              	
0310: CD3603  	L0310:  CALL    L0336                   ; routine KEY_SCAN
              	
0313: 47      	        LD      B,A                     ; save key in B
              	
0314: 2A263C  	        LD      HL,($3C26)              ; load L with KEYCOD - last key pressed
              	                                        ; load H with KEYCNT - debounce counter
              	
0317: AD      	        XOR     L                       ; compare to previous key.
0318: 280B    	        JR      Z,L0325                 ; forward if a match.
              	
031A: AD      	        XOR     L                       ; reform original
031B: 2803    	        JR      Z,L0320                 ; forward if zero - no key.
              	
031D: AF      	        XOR     A                       ; else clear accumulator.
              	
031E: BD      	        CP      L                       ; compare with last.
031F: C0      	        RET     NZ                      ; return if not zero.
              	
0320: 68      	L0320:  LD      L,B                     ; set L to original keycode
0321: 2620    	        LD      H,$20                   ; set counter to thirty two.
0323: 180D    	        JR      L0332                   ; forward to store values and exit
              	                                        ; returning zero.
              	
              	; ---
              	
              	; Key is same as previously accepted key.
              	; It repeats after two interrupts
              	
0325: 25      	L0325:  DEC     H                       ; decrement the counter.
0326: 7C      	        LD      A,H                     ; fetch counter to A.
0327: FE1E    	        CP      $1E                     ; compare to thirty.
0329: 2806    	        JR      Z,L0331                 ; forward if so to return key in A.
              	
032B: AF      	        XOR     A                       ; clear accumulator.
032C: BC      	        CP      H                       ; is counter zero?
032D: 2003    	        JR      NZ,L0332                ; forward if not to keep counting.
              	
032F: 2604    	        LD      H,$04                   ; else set counter to four.
              	
0331: 7D      	L0331:  LD      A,L                     ; pick up previous key.
              	
0332: 22263C  	L0332:  LD      ($3C26),HL              ;  update KEYCOD/KEYCNT
              	
0335: C9      	        RET                             ; return.
              	
              	;----------------------------------------------------------------------------
              	;                          LOGICAL VIEW OF KEYBOARD
              	;
              	;         0     1     2     3     4 -Bits-  4     3     2     1     0
              	; PORT                                                                    PORT
              	;
              	; F7FE  [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ]  |  [ 6 ] [ 7 ] [ 8 ] [ 9 ] [ 0 ]   EFFE
              	;  ^                                   |                                   v
              	; FBFE  [ Q ] [ W ] [ E ] [ R ] [ T ]  |  [ Y ] [ U ] [ I ] [ O ] [ P ]   DFFE
              	;  ^                                   |                                   v
              	; FDFE  [ A ] [ S ] [ D ] [ F ] [ G ]  |  [ H ] [ J ] [ K ] [ L ] [ ENT ] BFFE
              	;  ^                                   |                                   v
              	; FEFE  [SHI] [SYM] [ Z ] [ X ] [ C ]  |  [ V ] [ B ] [ N ] [ M ] [ SPC ] 7FFE
              	;  ^            v                                                ^         v
              	; Start         +------------>--------------------->-------------+        End
              	;
              	;
              	;----------------------------------------------------------------------------
              	
              	
              	; ----------------------------------
              	; THE 'KEYBOARD SCANNING' SUBROUTINE
              	; ----------------------------------
              	; This routine is called by the KEYBOARD routine 50 times a second and
              	; by the ACE FORTH 'INKEY' WORD.
              	; The above diagram shows the logical view of the Keyboard and PORTS.
              	; The physical view is similar except that the symbol shift key is to the
              	; left of the space key.
              	
              	
0336: 01FEFE  	L0336:  LD      BC,$FEFE                ; port address - B is also an 8 counter
              	
0339: ED50    	        IN      D,(C)                   ; read from port to D.
              	                                        ; when a key is pressed, the
              	                                        ; corresponding bit is reset.
              	
033B: 5A      	        LD      E,D                     ; save in E
              	
033C: CB3A    	        SRL     D                       ; read the outer SHIFT key.
              	
033E: 9F      	        SBC     A,A                     ; $00 if SHIFT else $FF.
033F: E6D8    	        AND     $D8                     ; $00 if SHIFT else $D8.
              	
0341: CB3A    	        SRL     D                       ; read the symbol shift bit
0343: 3802    	        JR      C,L0347                 ; skip if not pressed.
              	
0345: 3E28    	        LD      A,$28                   ; load A with 40 decimal.
              	
0347: C657    	L0347:  ADD     A,$57                   ; gives $7F SYM, $57 SHIFT, or $2F
              	
              	; Since 8 will be subtracted from the initial key value there are three
              	; distinct ranges 0 - 39, 40 - 79, 80 - 119.
              	
0349: 6F      	        LD      L,A                     ; save key range value in L
034A: 7B      	        LD      A,E                     ; fetch the original port reading.
034B: F603    	        OR      $03                     ; cancel the two shift bits.
              	
034D: 1EFF    	        LD      E,$FF                   ; set a flag to detect multiple keys.
              	
              	; KEY_LINE the half-row loop.
              	
034F: 2F      	L034F:  CPL                             ; complement bits
              	
0350: E61F    	        AND     $1F                     ; mask off the rightmost five key bits.
0352: 57      	        LD      D,A                     ; save a copy in D.
0353: 280D    	        JR      Z,L0362                 ; forward if no keys pressed to do the
              	                                        ; next row.
              	
0355: 7D      	        LD      A,L                     ; else fetch the key value
0356: 1C      	        INC     E                       ; test E for $FF
0357: 2012    	        JR      NZ,L036B                ; forward if not now zero to quit
              	
0359: D608    	L0359:  SUB     $08                     ; subtract 8 from key value
              	
035B: CB3A    	        SRL     D                       ; test next bit affecting zero and carry
              	
035D: 30FA    	        JR      NC,L0359                ; loop back until the set bit is found.
              	
035F: 5F      	        LD      E,A                     ; transfer key value to E.
0360: 2009    	        JR      NZ,L036B                ; forward to abort if more than one key
              	                                        ; is pressed in the row.
              	
0362: 2D      	L0362:  DEC     L                       ; decrement the key value for next row.
              	
0363: CB00    	        RLC     B                       ; rotate the 8 counter and port address
              	
0365: 3006    	        JR      NC,L036D                ; skip forward when all 8 rows have
              	                                        ; been read.
              	
0367: ED78    	        IN      A,(C)                   ; else read the next half-row.
0369: 18E4    	        JR      L034F                   ; and back to KEY_LINE.
              	
              	; ---
              	; ABORTKEY
              	
036B: 1EFF    	L036B:  LD      E,$FF                   ; signal invalid key.
              	
              	; the normal exit checks if E holds a key and not $FF.
              	
036D: 7B      	L036D:  LD      A,E                     ; fetch possible key value.
036E: 3C      	        INC     A                       ; increment
036F: C8      	        RET     Z                       ; return if was $FF as original.
              	
0370: 217603  	        LD      HL,L0376                ; else address KEY TABLE
0373: 19      	        ADD     HL,DE                   ; index into table.
              	                                        ; (D is zero)
              	
0374: 7E      	        LD      A,(HL)                  ; pick up character.
              	
0375: C9      	        RET                             ; return with translated character.
              	
              	
              	
              	; ---------------
              	; THE 'KEY TABLE'
              	; ---------------
              	
              	; -----------------------
              	; THE '40 UNSHIFTED KEYS'
              	; -----------------------
              	
0376: 76      	L0376:  DEFB    $76                     ; V - v
0377: 68      	        DEFB    $68                     ; H - h
0378: 79      	        DEFB    $79                     ; Y - y
0379: 36      	        DEFB    $36                     ; 6 - 6
037A: 35      	        DEFB    $35                     ; 5 - 5
037B: 74      	        DEFB    $74                     ; T - t
037C: 67      	        DEFB    $67                     ; G - g
037D: 63      	        DEFB    $63                     ; C - c
037E: 62      	        DEFB    $62                     ; B - b
037F: 6A      	        DEFB    $6A                     ; J - j
0380: 75      	        DEFB    $75                     ; U - u
0381: 37      	        DEFB    $37                     ; 7 - 7
0382: 34      	        DEFB    $34                     ; 4 - 4
0383: 72      	        DEFB    $72                     ; R - r
0384: 66      	        DEFB    $66                     ; F - f
0385: 78      	        DEFB    $78                     ; X - x
0386: 6E      	        DEFB    $6E                     ; N - n
0387: 6B      	        DEFB    $6B                     ; K - k
0388: 69      	        DEFB    $69                     ; I - i
0389: 38      	        DEFB    $38                     ; 8 - 8
038A: 33      	        DEFB    $33                     ; 3 - 3
038B: 65      	        DEFB    $65                     ; E - e
038C: 64      	        DEFB    $64                     ; D - d
038D: 7A      	        DEFB    $7A                     ; Z - z
038E: 6D      	        DEFB    $6D                     ; M - m
038F: 6C      	        DEFB    $6C                     ; L - l
0390: 6F      	        DEFB    $6F                     ; O - o
0391: 39      	        DEFB    $39                     ; 9 - 9
0392: 32      	        DEFB    $32                     ; 2 - 2
0393: 77      	        DEFB    $77                     ; W - w
0394: 73      	        DEFB    $73                     ; S - s
0395: 00      	        DEFB    $00                     ; SYMBOL
0396: 20      	        DEFB    $20                     ; SPACE
0397: 0D      	        DEFB    $0D                     ; ENTER
0398: 70      	        DEFB    $70                     ; P - p
0399: 30      	        DEFB    $30                     ; 0 - 0
039A: 31      	        DEFB    $31                     ; 1 - 1
039B: 71      	        DEFB    $71                     ; Q - q
039C: 61      	        DEFB    $61                     ; A - a
039D: 00      	        DEFB    $00                     ; SHIFT
              	
              	; ---------------------
              	; THE '40 SHIFTED KEYS'
              	; ---------------------
              	
039E: 56      	        DEFB    $56                     ; V - V
039F: 48      	        DEFB    $48                     ; H - H
03A0: 59      	        DEFB    $59                     ; Y - Y
03A1: 07      	        DEFB    $07                     ; 6 - 7 KEY-UP
03A2: 01      	        DEFB    $01                     ; 5 - 1 KEY-LEFT
03A3: 54      	        DEFB    $54                     ;
03A4: 47      	        DEFB    $47
03A5: 43      	        DEFB    $43
03A6: 42      	        DEFB    $42
03A7: 4A      	        DEFB    $4A
03A8: 55      	        DEFB    $55
03A9: 09      	        DEFB    $09                     ; 7 - 9 KEY-DOWN
03AA: 08      	        DEFB    $08                     ; 4 - 8 INV-VIDEO
03AB: 52      	        DEFB    $52
03AC: 46      	        DEFB    $46
03AD: 58      	        DEFB    $58
03AE: 4E      	        DEFB    $4E
03AF: 4B      	        DEFB    $4B
03B0: 49      	        DEFB    $49
03B1: 03      	        DEFB    $03                     ; 8 - 3 KEY-RIGHT
03B2: 33      	        DEFB    $33                     ; 3 - 3
03B3: 45      	        DEFB    $45
03B4: 44      	        DEFB    $44
03B5: 5A      	        DEFB    $5A
03B6: 4D      	        DEFB    $4D
03B7: 4C      	        DEFB    $4C
03B8: 4F      	        DEFB    $4F
03B9: 04      	        DEFB    $04                     ; 9 - 4 GRAPH
03BA: 02      	        DEFB    $02                     ; 2 - 2 CAPS LOCK
03BB: 57      	        DEFB    $57                     ; W - W
03BC: 53      	        DEFB    $53                     ; S - S
03BD: 00      	        DEFB    $00                     ; SYMB
03BE: 20      	        DEFB    $20                     ; SPACE
03BF: 0D      	        DEFB    $0D                     ; ENTER
03C0: 50      	        DEFB    $50                     ; P - P
03C1: 05      	        DEFB    $05                     ; 0 - 5   DEL
03C2: 0A      	        DEFB    $0A                     ; 1 - 0A  DEL_LINE
03C3: 51      	        DEFB    $51                     ; Q - Q
03C4: 41      	        DEFB    $41                     ; A - A
03C5: 00      	        DEFB    $00                     ; SHIFT
              	
              	; --------------------------
              	; THE '40 SYMBOL SHIFT KEYS'
              	; --------------------------
              	
03C6: 2F      	        DEFB    $2F                     ; V - /
03C7: 5E      	        DEFB    $5E                     ; H - ^
03C8: 5B      	        DEFB    $5B                     ; Y - [
03C9: 26      	        DEFB    $26                     ; 6 - &
03CA: 25      	        DEFB    $25                     ; 5 - %
03CB: 3E      	        DEFB    $3E                     ; T - >
03CC: 7D      	        DEFB    $7D                     ;
03CD: 3F      	        DEFB    $3F
03CE: 2A      	        DEFB    $2A
03CF: 2D      	        DEFB    $2D
03D0: 5D      	        DEFB    $5D
03D1: 27      	        DEFB    $27
03D2: 24      	        DEFB    $24
03D3: 3C      	        DEFB    $3C
03D4: 7B      	        DEFB    $7B
03D5: 60      	        DEFB    $60
03D6: 2C      	        DEFB    $2C
03D7: 2B      	        DEFB    $2B
03D8: 7F      	        DEFB    $7F
03D9: 28      	        DEFB    $28
03DA: 23      	        DEFB    $23
03DB: 45      	        DEFB    $45
03DC: 5C      	        DEFB    $5C
03DD: 3A      	        DEFB    $3A
03DE: 2E      	        DEFB    $2E
03DF: 3D      	        DEFB    $3D
03E0: 3B      	        DEFB    $3B
03E1: 29      	        DEFB    $29
03E2: 40      	        DEFB    $40                     ; 2 - @
03E3: 57      	        DEFB    $57                     ; W - W
03E4: 7C      	        DEFB    $7C                     ; S
03E5: 00      	        DEFB    $00                     ; SYMB
03E6: 20      	        DEFB    $20                     ; SPACE
03E7: 0D      	        DEFB    $0D                     ; ENTER
03E8: 22      	        DEFB    $22                     ; P - "
03E9: 5F      	        DEFB    $5F                     ; 0 - _
03EA: 21      	        DEFB    $21                     ; 1 - !
03EB: 51      	        DEFB    $51                     ; Q - Q
03EC: 7E      	        DEFB    $7E                     ; A - ~
03ED: 00      	        DEFB    $00                     ; SHIFT
              	
              	; end of key tables
              	
              	
              	; ---------------------------
              	; THE 'PRINT ROUTINE' Part 2.
              	; ---------------------------
              	; If output is not directed into the input buffer then jump forward else
              	; call the routine to output to lower screen.
              	
03EE: 2805    	L03EE:  JR      Z,L03F5                 ; forward to main screen print.
              	
03F0: CD7E01  	        CALL    L017E                   ; PR_LOWER
              	
03F3: D9      	        EXX                             ; restore main set
03F4: C9      	        RET                             ; return.                >>
              	
              	; the print output is not directed to the input buffer but first check that
              	; the user has not set up a vector to their own routine to print characters
              	; for instance to a printer.
              	
03F5: 47      	L03F5:  LD      B,A                     ; save the character in the B register.
              	
03F6: 2A293C  	        LD      HL,($3C29)              ; fetch possible vector from EXWRCH
              	                                        ; (normally 0)
03F9: 7C      	        LD      A,H                     ; test for
03FA: B5      	        OR      L                       ; the value zero.
03FB: 78      	        LD      A,B                     ; fetch the character back to A.
              	
03FC: 2801    	        JR      Z,L03FF                 ; skip forward if no user-supplied
              	                                        ; routine.
              	
03FE: E9      	L03FE:  JP      (HL)                    ; else jump to user-supplied routine
              	                                        ; which should finish with a JP (IY)
              	
              	; ---
              	; PRINTING TO UPPER SCREEN
              	; ---
              	
03FF: 2A1C3C  	L03FF:  LD      HL,($3C1C)              ; SCRPOS
0402: ED5B243C	        LD      DE,($3C24)              ; L_HALF
              	
0406: EB      	        EX      DE,HL                   ; ??
              	
0407: 37      	        SCF                             ; inclusive byte.
0408: ED52    	        SBC     HL,DE                   ; subtract screen position+1 from
              	                                        ; the start of input buffer.
040A: EB      	        EX      DE,HL                   ; hl=scrpos
              	
040B: DC2104  	        CALL    C,L0421                 ; if no room then scroll upper display
              	
040E: FE0D    	        CP      $0D                     ; carriage return?
              	
0410: 2804    	        JR      Z,L0416                 ; skip forward if so.
              	
0412: 77      	        LD      (HL),A                  ; else insert the character.
              	
0413: 23      	        INC     HL                      ; point to next position.
0414: 1806    	        JR      L041C                   ; forward
              	
              	; ---
              	
              	; a carriage return
              	
0416: 23      	L0416:  INC     HL                      ; increment screen address.
0417: 7D      	        LD      A,L                     ; fetch low byte of address and mask.
0418: E61F    	        AND     $1F                     ; a zero result indicates a line skip.
041A: 20FA    	        JR      NZ,L0416                ; loop until a new line of 32 columns
              	                                        ; is started.
              	
              	; both paths converge.
              	
041C: 221C3C  	L041C:  LD      ($3C1C),HL              ; update SCRPOS
              	
041F: D9      	        EXX                             ; back to main set.
              	
0420: C9      	        RET                             ; return.
              	
              	; -------------------------------------
              	; The 'UPPER DISPLAY SCROLLING' ROUTINE
              	; -------------------------------------
              	
0421: F5      	L0421:  PUSH    AF                      ; save character
              	
0422: 211C3C  	        LD      HL,$3C1C                ; address the low order byte SCRPOS
              	
0425: CD4304  	        CALL    L0443                   ; routine cursor up
              	                                        ; i.e. SCRPOS = SCRPOS - 32
              	
0428: F1      	        POP     AF                      ; restore character
              	
              	; now calculate the number of characters to scroll in the upper display.
              	
0429: 2A243C  	        LD      HL,($3C24)              ; fetch L_HALF the start of input buffer
042C: 112024  	        LD      DE,$2420                ; second line in video display
              	
              	;
              	; => scroll lower display enters here
042F: A7      	L042F:  AND     A                       ; prepare for true subtraction.
0430: ED52    	        SBC     HL,DE                   ; find number of characters to scroll.
              	
0432: 44      	        LD      B,H                     ; result to BC
0433: 4D      	        LD      C,L
              	
0434: 21E0FF  	        LD      HL,$FFE0                ; set HL to -32d
0437: 19      	        ADD     HL,DE                   ; now HL = DE -32d
0438: EB      	        EX      DE,HL                   ; switch so DE = HL - 32
              	
0439: EDB0    	        LDIR                            ; scroll the lines up.
              	
043B: 0620    	        LD      B,$20                   ; blank a line of 32 characters
              	
043D: 2B      	L043D:  DEC     HL                      ; decrement screen address.
043E: 3620    	        LD      (HL),$20                ; insert a space character
0440: 10FB    	        DJNZ    L043D                   ; and loop for all 32 characters
              	
0442: C9      	        RET                             ; return.
              	
              	; --------------------------------
              	; THE 'SCREEN POINTERS' SUBROUTINE
              	; --------------------------------
              	;
              	
0443: 7E      	L0443:  LD      A,(HL)                  ; fetch low byte of screen address
0444: D620    	        SUB     $20                     ; subtract thirty two characters.
0446: 77      	        LD      (HL),A                  ; and put back.
              	
0447: 23      	        INC     HL                      ; address high-order byte.
0448: 3001    	        JR      NC,L044B                ; forward if low byte did not wrap
              	
044A: 35      	        DEC     (HL)                    ; else decrement the high byte as the
              	                                        ; position has moved across a third of
              	                                        ; the display.
              	
044B: 23      	L044B:  INC     HL                      ; address following System Variable
044C: C9      	        RET                             ; return.
              	
              	; -----------------------------------
              	; THE 'INDEX SYSTEM VARIABLE' ROUTINE
              	; -----------------------------------
              	; This routine is used by words CONTEXT, CURRENT, BASE etc. to index and then
              	; stack a system variable associated with a FORTH word. See shortly.
              	;
              	; It is a bit overblown considering the eventual position of the System
              	; Variables and ld d,$3c; rst 10h; jp (iy) could have been used instead of
              	; the long-winded addition below.
              	
044D: EB      	L044D:  EX      DE,HL                   ; HL addresses the offset byte.
044E: 5E      	        LD      E,(HL)                  ; fetch to E register
              	;
044F: 1600    	        LD      D,$00                   ; prepare to add.
0451: 21003C  	        LD      HL,$3C00                ; the address of start of SYSVARS
0454: 19      	        ADD     HL,DE                   ; add the 8-bit offset
0455: EB      	        EX      DE,HL                   ; location to DE.
0456: D7      	        RST     10H                     ; push word DE
              	
0457: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------
              	; THE 'HERE' WORD
              	; ---------------
              	; ( -- address)
              	; Leaves the address of one past the end of the dictionary.
              	
0459: 484552  	L0459:  DEFM    "HER"                   ; 'name field'
045C: C5      	        DEFB    'E' + $80
              	
045D: AA00    	        DEFW    L00AA                   ; 'link field'
              	
045F: 04      	L045F:  DEFB    $04                     ; 'name length field'
              	
0460: 6204    	L0460:  DEFW    L0462                   ; 'code field'
              	
              	; ---
              	
0462: ED5B373C	L0462:  LD      DE,($3C37)              ; system variable STKBOT.
0466: D7      	        RST     10H                     ; push word DE
              	
0467: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ------------------
              	; THE 'CONTEXT' WORD
              	; ------------------
              	; (  -- 15411 )
              	; A system variable pointing to the context vocabulary.
              	; $3C33 CONTEXT
              	
0469: 434F4E54	L0469:  DEFM    "CONTEX"                ; 'name field'
046D: 4558    	
046F: D4      	        DEFB    'T' + $80
              	
0470: 5F04    	        DEFW    L045F                   ; 'link field'
              	
0472: 07      	L0472:  DEFB    $07                     ; 'name length field'
              	
0473: 4D04    	L0473:  DEFW    L044D                   ; 'code field'
              	
              	; ---
              	
0475: 33      	L0475:  DEFB    $33                     ; low byte of system variable.
              	
              	; ------------------
              	; THE 'CURRENT' WORD
              	; ------------------
              	; (  -- 15409 )
              	; A system variable pointing to the current vocabulary.
              	; $3C31 CURRENT
              	
0476: 43555252	L0476:  DEFM    "CURREN"                ; 'name field'
047A: 454E    	
047C: D4      	        DEFB    'T' + $80
              	
047D: 7204    	        DEFW    L0472                   ; 'link field'
              	
047F: 07      	L047F:  DEFB    $07                     ; 'name length field'
              	
0480: 4D04    	L0480:  DEFW    L044D                   ; 'code field'
              	
              	; ---
              	
0482: 31      	L0482:  DEFB    $31                     ; a single parameter low-byte of $3C31.
              	
              	; ---------------
              	; THE 'BASE' WORD
              	; ---------------
              	; ( -- 15423)
              	; A one-byte variable containing the system number base.
              	; $3C3F BASE
              	
0483: 424153  	L0483:  DEFM    "BAS"                   ; 'name field'
0486: C5      	        DEFB    'E' + $80
              	
0487: 7F04    	        DEFW    L047F                   ; 'link field'
              	
0489: 04      	L0489:  DEFB    $04                     ; 'name length field'
              	
048A: 4D04    	L048A:  DEFW    L044D                   ; 'code field'
              	
              	; ---
              	
048C: 3F      	L048C:  DEFB    $3F                     ; low-byte of system variable BASE
              	
              	; ---
              	
              	; These two Internal Words are used to stack the value of FLAGS and DICT.
              	
              	; -------------------------
              	; The 'flags' Internal Word
              	; -------------------------
              	
048D: 4D04    	L048D:  DEFW    L044D                   ; headerless 'code field'
              	
              	; ---
              	
048F: 3E      	L048F:  DEFB    $3E                     ; low-order byte of FLAGS $3C3E
              	
              	; -------------------------
              	; The 'dict' Internal Word
              	; -------------------------
              	
0490: 4D04    	L0490:  DEFW    L044D                   ; headerless 'code field'
              	
              	; ---
              	
0492: 39      	L0492:  DEFB    $39                     ; low-order byte of DICT $3C39
              	
              	
              	; --------------
              	; THE 'PAD' WORD
              	; --------------
              	; (  -- 9985 )
              	; Stacks the address of the 254-byte workpad.
              	; On most FORTH systems the PAD floats about in memory but on the Ace it is
              	; fixed in location and size. Its definition is simply a constant.
              	
0493: 5041    	l0493   DEFM    "PA"                    ; 'name field'
0495: C4      	        DEFB    'D' + $80
              	
0496: 8904    	        DEFW    L0489                   ; 'link field'
              	
0498: 03      	L0498:  DEFB    $03                     ; 'name length field'
              	
0499: F50F    	L0499:  DEFW    L0FF5                   ; 'code field' - stack word
              	
              	; ---
              	
049B: 0127    	L049B:  DEFW    $2701                   ; parameter is 9985 decimal -
              	                                        ; work pad address
              	
              	; ------------
              	; THE ';' WORD
              	; ------------
              	; Terminates colon, DEFINER and COMPILER definitions.
              	
049D: BB      	L049D:  DEFB    ';' + $80               ; 'name field'
              	
049E: 9804    	        DEFW    L0498                   ; 'link field'
              	
04A0: 41      	L04A0:  DEFB    $41                     ; length 1 + $40 (immediate word)
              	
04A1: 0811    	L04A1:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
04A3: B604    	L04A3:  DEFW    L04B6                   ; exit
              	
04A5: D812    	L04A5:  DEFW    L12D8                   ; check-for
04A7: 0A      	        DEFB    $0A                     ; ten                   marker byte?
04A8: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
              	; code gels
              	
04AA: 213E3C  	L04AA:  LD      HL,$3C3E                ; address FLAGS
04AD: 7E      	        LD      A,(HL)                  ; fetch FLAGS value.
              	
04AE: E6BB    	        AND     $BB                     ; AND %10111011
              	                                        ; reset bit 2 - show definition complete
              	                                        ; reset bit 6 - show in interpreter mode
              	
04B0: 77      	        LD      (HL),A                  ; update FLAGS value.
              	
04B1: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ----
              	; Note. these backward links to the beginning of words will probably be less
              	; of a mystery when the syntax checking and listing modules are more fully
              	; explored. A value of $FFFF sometimes occurs.
              	
04B3: 00      	x04b3   DEFB    $00                     ;;
              	
04B4: E8      	x04b4   DEFB    $E8                     ;;
04B5: FF      	x04b5   DEFB    $FF                     ;; 04b5 + ffe8 = 049d  = ';'
              	
              	; ----------------------------------
              	; THE 'ADDRESS' INTERPRETER ROUTINES
              	; ----------------------------------
              	
              	; ------------------------
              	; The 'Exit' Internal Word
              	; ------------------------
              	; Drops the 'Next Word' pointer from the Return Stack thereby ending a
              	; subroutine and returning to next word in calling thread.
              	
04B6: B804    	L04B6:  DEFW    L04B8                   ; headerless 'code field'
              	
              	; ---
              	
04B8: E1      	L04B8:  POP     HL                      ; discard the next word pointer.
              	
              	; ------------------------------
              	; THE 'ADDRESS INTERPRETER' LOOP
              	; ------------------------------
              	; Sometimes known as the Sequencer.
              	;
              	; iy_fast
              	
04B9: E1      	L04B9:  POP     HL                      ; word pointer.
              	
              	; =====> from DOCOLON and BRANCH
              	
04BA: 5E      	L04BA:  LD      E,(HL)
04BB: 23      	        INC     HL
04BC: 56      	        LD      D,(HL)
04BD: 23      	        INC     HL
              	
04BE: E5      	        PUSH    HL                      ; word pointer.
              	
              	; ==>
              	;
04BF: EB      	L04BF:  EX      DE,HL
04C0: 5E      	        LD      E,(HL)
04C1: 23      	        INC     HL
04C2: 56      	        LD      D,(HL)
04C3: 23      	        INC     HL
04C4: EB      	        EX      DE,HL
              	
04C5: E9      	        JP      (HL)                    ; jump to machine code (4 clock cycles)
              	                                        ; which will terminate with a JP (IY)
              	                                        ; instruction (8 clock cycles).
              	
              	
              	
              	; --------------------------------
              	; The 'Memory Check' Internal Word
              	; --------------------------------
              	; This internal word which also checks the BREAK key is only used from the
              	; start of the LINE definition. However the machine code entry point is the
              	; normal value of the IY register and so this code is executed at the end of
              	; every word.
              	
04C6: C804    	L04C6:  DEFW    L04C8                   ; headerless 'code field'
              	
              	; iy_slow
              	
04C8: 010B00  	L04C8:  LD      BC,$000B                ; allow overhead of eleven bytes
04CB: ED5B3B3C	        LD      DE,($3C3B)              ; SPARE
04CF: 2A373C  	        LD      HL,($3C37)              ; STKBOT
04D2: 09      	        ADD     HL,BC                   ; add the overhead
04D3: ED52    	        SBC     HL,DE                   ; subtract the SPARE value
04D5: 3802    	        JR      C,L04D9                 ; forward if the original 12 byte gap
              	                                        ; remains.
              	
              	; else stack underflow has occurred.
              	
04D7: E7      	L04D7:  RST     20H                     ; Error 2
04D8: 02      	        DEFB    $02                     ; Data stack underflow.
              	
              	; ---
              	
04D9: 010000  	L04D9:  LD      BC,$0000                ; allow no overhead.
              	
04DC: CD8C0F  	        CALL    L0F8C                   ; check free memory
04DF: CDE404  	        CALL    L04E4                   ; check BREAK key.
04E2: 18D5    	        JR      L04B9                   ; back to iy_fast
              	
              	; ------------------------------------
              	; THE 'CHECK FOR BREAK KEY' SUBROUTINE
              	; ------------------------------------
              	; Check for the key combination SHIFT/SPACE.
              	
04E4: 3EFE    	L04E4:  LD      A,$FE                   ; read port $FEFE -
04E6: DBFE    	        IN      A,($FE)                 ; keys SPACE, SYMSHIFT, M, N, B.
              	
04E8: 1F      	        RRA                             ; test bit for outermost key
04E9: D8      	        RET     C                       ; return if not pressed.
              	
04EA: 3E7F    	        LD      A,$7F                   ; read port $7FFE -
04EC: DBFE    	        IN      A,($FE)                 ; keys SHIFT, Z, X, C, V.
              	
04EE: 1F      	        RRA                             ; test bit for outermost key
04EF: D8      	        RET     C                       ; return if not pressed.
              	
04F0: E7      	L04F0:  RST     20H                     ; Error 3.
04F1: 03      	        DEFB    $03                     ; BREAK pressed.
              	
              	; -------------------------
              	; THE 'MAIN EXECUTION' LOOP
              	; -------------------------
              	; The final part of the QUIT definition, as in all FORTH implementations,
              	; just loops through two FORTH words.
              	
              	; The first call - to the Address Interpreter - does not return.
              	; The return address is the next word QUERY which the interpreter pops off
              	; the Return Stack and then before executing puts the address of the next word
              	; on Return Stack. The default action of the Address Interpreter is to execute
              	; words in turn until some word, such as branch, alters this default behaviour.
              	
04F2: CDB904  	L04F2:  CALL    L04B9                   ; forth.
              	
04F5: 8C05    	L04F5:  DEFW    L058C                   ; QUERY         - input buffer
04F7: 0605    	        DEFW    L0506                   ; LINE          - interpret buffer
04F9: 3605    	        DEFW    L0536                   ; prOK          - print OK
04FB: 7612    	        DEFW    L1276                   ; branch        - relative jump
              	
04FD: F7FF    	L04FD:  DEFW    $FFF7                   ; back to L04F5
              	
              	; ---
              	; the first high-level interpreted word.
              	; ---
              	
              	; ---------------
              	; THE 'LINE' WORD
              	; ---------------
              	; Interprets input buffer as a normal FORTH line.
              	
04FF: 4C494E  	L04FF:  DEFM    "LIN"                   ; 'name field'
0502: C5      	        DEFB    'E' + $80
              	
0503: A004    	        DEFW    L04A0                   ; 'link field'
              	
0505: 04      	L0505:  DEFB    $04                     ; 'name length field'
              	
0506: C30E    	L0506:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0508: C604    	L0508:  DEFW    L04C6                   ; check mem each time through loop
              	                                        ; as dictionary could be expanding.
              	
050A: 3D06    	        DEFW    L063D                   ; FIND          - search the dictionary
050C: EE08    	        DEFW    L08EE                   ; ?DUP          - duplicate if found
050E: 8312    	        DEFW    L1283                   ; ?branch       - forward if not a
0510: 0700    	L0510:  DEFW    $0007                   ; to L0518      - word.
              	
0512: 4F05    	        DEFW    L054F                   ; test and stack??
0514: 7612    	        DEFW    L1276                   ; branch
0516: F1FF    	L0516:  DEFW    $FFF1                   ; back to L0508
              	
0518: A906    	L0518:  DEFW    L06A9                   ; NUMBER
051A: EE08    	        DEFW    L08EE                   ; ?DUP
051C: 8312    	        DEFW    L1283                   ; ?branch       - forward if not a
051E: 0700    	L051E:  DEFW    $0007                   ; to L0526      - number.
              	
0520: 6405    	        DEFW    L0564                   ; pop de with test
0522: 7612    	        DEFW    L1276                   ; branch
0524: E3FF    	L0524:  DEFW    $FFE3                   ; loop back to L0508
              	
0526: 1B06    	L0526:  DEFW    L061B                   ; stack-length
0528: 1A0C    	        DEFW    L0C1A                   ; 0=
052A: 8312    	        DEFW    L1283                   ; ?branch       - forward with anything
052C: 0300    	L052C:  DEFW    $0003                   ; to L0530      - else
              	
052E: B604    	L052E:  DEFW    L04B6                   ; EXIT                          >>>
              	
              	; ---
              	
0530: 7805    	L0530:  DEFW    L0578                   ; RETYPE        - [?] at relevant place
0532: 7612    	        DEFW    L1276                   ; branch        - once corrected back
0534: D3FF    	L0534:  DEFW    $FFD3                   ; to L0508      - to the loop.
              	
              	; ----------------------------
              	; The 'Print OK' Internal Word
              	; ----------------------------
              	; prints the OK message after successful execution.
              	
0536: 3805    	L0536:  DEFW    L0538                   ; headerless 'code field'
              	
0538: 3A3E3C  	L0538:  LD      A,($3C3E)               ; fetch system variable FLAGS
              	
053B: CB77    	        BIT     6,A                     ; test for 'COMPILER' mode.
053D: 200E    	        JR      NZ,L054D                ; forward if so.
              	
053F: CB67    	        BIT     4,A                     ; test for 'INVIS' mode.
0541: 200A    	        JR      NZ,L054D                ; forward if so.
              	
0543: CD0818  	        CALL    L1808                   ; else print the inline string.
              	
              	; ---
              	
0546: 204F4B  	        DEFM    " OK"                   ; the OK message between two spaces.
0549: A0      	        DEFB    ' ' + $80               ; last one inverted.
              	
              	; ---
              	
054A: 3E0D    	L054A:  LD      A,$0D                   ; prepare a carriage return.
054C: CF      	        RST     08H                     ; and PRINT also.
              	
054D: FDE9    	L054D:  JP      (IY)                    ; to 'next'.
              	
              	; ------------------------------
              	; The 'XXXXXXXXXX' Internal Word
              	; ------------------------------
              	; to handle a Word from LINE
              	
054F: 5105    	L054F:  DEFW    L0551                   ; headerless 'code field'
              	
              	; ---
              	
0551: DF      	L0551:  RST     18H                     ; pop address from Data Stack to DE
              	
0552: 1B      	        DEC     DE                      ; point to the 'name length field'
              	
0553: 1A      	        LD      A,(DE)                  ; fetch contents of the address.
              	
0554: 2F      	        CPL                             ; complement.
              	
0555: DDA63E  	        AND     (IX+$3E)                ; FLAGS
              	
0558: E640    	        AND     $40                     ; isolate BIT 6 of FLAGS, set if in
              	                                        ; compiler mode.
              	
055A: 13      	        INC     DE                      ; increment address to 'code field'
              	
055B: 2804    	        JR      Z,L0561                 ; forward if not in compiling mode
              	
055D: D7      	        RST     10H                     ; push word DE          - add to dict
055E: 114E0F  	        LD      DE,L0F4E                ; ','                   - enclose
              	
0561: C3BF04  	L0561:  JP      L04BF                   ; next word.
              	
              	; -----------------------
              	; The '???' Internal Word
              	; -----------------------
              	; after handling a number from LINE
              	
0564: 6605    	L0564:  DEFW    L0566                   ; headerless 'code field'
              	
              	; ---
              	
0566: DF      	L0566:  RST     18H                     ; pop word DE
              	
0567: DDCB3E76	        BIT     6,(IX+$3E)              ; test FLAGS - compiler mode ?
              	
056B: 20F4    	        JR      NZ,L0561                ; loop back while in compiler mode.
              	
056D: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -----------------
              	; THE 'RETYPE' WORD
              	; -----------------
              	; Allows user to edit the input line. Turns cursor to [?].
              	
056F: 52455459	L056F:  DEFM    "RETYP"                 ; 'name field'
0573: 50      	
0574: C5      	        DEFB    'E' + $80
              	
0575: 8B05    	        DEFW    L058B                   ; 'link field'
              	
0577: 06      	L0577:  DEFB    $06                     ; 'name length field'
              	
0578: 7A05    	L0578:  DEFW    L057A                   ; 'code field'
              	
              	; ---
              	
057A: CDEA02  	L057A:  CALL    L02EA                   ; routine sets logical line.
              	
057D: CD7602  	        CALL    L0276                   ; routine pr_cursor
              	
0580: 36BF    	        LD      (HL),$BF                ; the inverse [?] character
              	
0582: 1810    	        JR      L0594                   ; forward to join the QUERY routine.
              	
              	; ----------------
              	; THE 'QUERY' WORD
              	; ----------------
              	; Clears input buffer, then accepts characters until ENTER pressed.
              	; Buffer can be edited as usual and is limited to 22 lines.
              	
0584: 51554552	L0584:  DEFM    "QUER"                  ; 'name field'
0588: D9      	        DEFB    'Y' + $80
              	
0589: 0505    	        DEFW    L0505                   ; 'link field'
              	
058B: 05      	L058B:  DEFB    $05                     ; 'name length field'
              	
058C: 8E05    	L058C:  DEFW    L058E                   ; 'code field'
              	
              	; ---
              	
058E: CDD802  	L058E:  CALL    L02D8                   ; routine SETBUF
              	
0591: CD7602  	        CALL    L0276                   ; routine pr_cursor
              	
              	; ->
0594: 21283C  	L0594:  LD      HL,$3C28                ; fetch STATIN
0597: CBC6    	        SET     0,(HL)                  ;
0599: CBAE    	        RES     5,(HL)                  ; (bit 5 set by interrupt when the user
              	                                        ; presses the ENTER key)
              	
059B: CB6E    	L059B:  BIT     5,(HL)                  ; wait for interrupt to set the bit.
059D: 28FC    	        JR      Z,L059B                 ; loop until.
              	
059F: CD2502  	        CALL    L0225                   ; routine DEL-CURSOR
05A2: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------
              	; THE 'WORD' WORD
              	; ---------------
              	; WORD text
              	; ( delimiter -- address )
              	; Takes text out of the input buffer up as far as a delimiter, and copies it
              	; to pad, starting at the second byte there. Puts the length (not including
              	; the delimiter) in the first byte of the pad, and stacks the address of the
              	; first byte of the pad.
              	; At most 253 characters are taken from the input buffer. If there are more
              	; left before the delimiter, then the first byte of the pad shows 254.
              	; Initial delimiters are ignored.
              	
05A4: 574F52  	L05A4:  DEFM    "WOR"                   ; 'name field'
05A7: C4      	        DEFB    'D' + $80
              	
05A8: 7705    	        DEFW    L0577                   ; 'link field'
              	
05AA: 04      	L05AA:  DEFB    $04                     ; 'name length field'
              	
05AB: AD05    	L05AB:  DEFW    L05AD                   ; 'code field'
              	
              	; ---
              	
05AD: DF      	L05AD:  RST     18H                     ; pop word DE
05AE: 21FE27  	        LD      HL,$27FE                ; set HL to penultimate byte of 'pad'.
05B1: 06FD    	        LD      B,$FD                   ; the count is 253.
              	
05B3: 3620    	L05B3:  LD      (HL),$20                ; insert a space in pad.
05B5: 2B      	        DEC     HL                      ; decrement the address.
05B6: 10FB    	        DJNZ    L05B3                   ; repeat for the 253 locations.
              	
05B8: D5      	        PUSH    DE                      ; save the delimiter.
05B9: EB      	        EX      DE,HL                   ; save in HL also, DE is start of pad.
              	
05BA: D7      	        RST     10H                     ; stack data word DE
05BB: D1      	        POP     DE                      ; retrieve the delimiter.
              	
05BC: CDE105  	        CALL    L05E1                   ;
              	
05BF: 04      	        INC     B
05C0: 05      	        DEC     B
05C1: 2803    	        JR      Z,L05C6                 ;
              	
05C3: 01FF00  	        LD      BC,$00FF
              	
05C6: 210127  	L05C6:  LD      HL,$2701
05C9: 71      	        LD      (HL),C
05CA: 23      	        INC     HL
05CB: 3EFC    	        LD      A,$FC
05CD: B9      	        CP      C
05CE: 3001    	        JR      NC,L05D1                ;
              	
05D0: 4F      	        LD      C,A
              	
05D1: 0C      	L05D1:  INC     C
05D2: D5      	        PUSH    DE
05D3: C5      	        PUSH    BC
05D4: EB      	        EX      DE,HL
05D5: EDB0    	        LDIR
05D7: C1      	        POP     BC
05D8: D1      	        POP     DE
05D9: 0D      	        DEC     C
05DA: CDDA07  	        CALL    L07DA                   ;
05DD: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; --------------------------------
              	; THE 'GET BUFFER TEXT' SUBROUTINE
              	; --------------------------------
              	; Called from FIND, NUMBER and XXXXX. Word may have leading spaces and is
              	; terminated by a space or newline (zero).
              	; It is also used to find the end of a comment delimited by ')'.
              	;
              	; =>
05DF: 1E20    	L05DF:  LD      E,$20                   ; set a space as the skip character.
              	
              	; =>called with E holding delimiter.
              	;
05E1: 2A243C  	L05E1:  LD      HL,($3C24)              ; fetch L_HALF - start of screen buffer.
05E4: 221E3C  	        LD      ($3C1E),HL              ; make INSCRN start of logical line the
              	                                        ; same.
              	
05E7: 010000  	        LD      BC,$0000                ; initialize letter count to zero.
              	
              	; -> loop
05EA: 23      	L05EA:  INC     HL                      ; increment screen address.
05EB: 7E      	        LD      A,(HL)                  ; fetch character to A.
05EC: BB      	        CP      E                       ; compare to character in E.
05ED: 28FB    	        JR      Z,L05EA                 ; loop while character matches.
              	
05EF: A7      	        AND     A                       ; test for zero (at $2700?)
05F0: 280E    	        JR      Z,L0600                 ; forward if so.
              	
              	; a word has been found on the screen line.
              	
05F2: E5      	        PUSH    HL                      ; save pointer to start of word.
              	
05F3: 03      	L05F3:  INC     BC                      ; increment the letter count.
05F4: 23      	        INC     HL                      ; increment the screen pointer.
              	
05F5: 7E      	        LD      A,(HL)                  ; fetch new character
05F6: A7      	        AND     A                       ; test for zero.
05F7: 2803    	        JR      Z,L05FC                 ; skip forward as at end of word.
              	
05F9: BB      	        CP      E                       ; compare to the skip character.
05FA: 20F7    	        JR      NZ,L05F3                ; loop back if still within a word.
              	
05FC: D1      	L05FC:  POP     DE                      ; retrieve pointer to start of word.
              	
05FD: AF      	        XOR     A                       ;; clear A
05FE: B8      	        CP      B                       ;; compare to B zero
              	
05FF: C9      	        RET                             ; return. with carry reset for success.
              	
              	; ---
              	
0600: D5      	L0600:  PUSH    DE                      ; save delimiter
              	
0601: CDB002  	        CALL    L02B0                   ; routine find zerobyte
0604: E21406  	        JP      PO,L0614                ; jump if found to exit failure
              	
0607: ED5B243C	        LD      DE,($3C24)              ; else set DE from L_HALF
060B: CDFA07  	        CALL    L07FA                   ; routine SPACE_FILL (DE-HL)
060E: 22243C  	        LD      ($3C24),HL              ; set L_HALF to next line
              	
0611: D1      	        POP     DE                      ; restore delimiter
              	
0612: 18CD    	        JR      L05E1                   ; loop back using new line.
              	
              	; ---
              	
              	; branch here if a word not found.
              	
0614: EB      	L0614:  EX      DE,HL                   ; DE addresses cursor.
0615: C1      	        POP     BC                      ; discard saved delimiter
0616: 010000  	        LD      BC,$0000                ; set BC, to zero
0619: 37      	        SCF                             ; signal not found
061A: C9      	        RET                             ; return.
              	
              	; --------------------------------
              	; The 'stack length' Internal Word
              	; --------------------------------
              	; used once only from LINE to check for any extraneous text that is not a Word
              	; or a Number.
              	
061B: 1D06    	L061B:  DEFW    L061D                   ; headerless 'code field'
              	
              	; ---
              	
061D: CDDF05  	L061D:  CALL    L05DF                   ; get buffer
              	
0620: 50      	        LD      D,B                     ; transfer length of word
0621: 59      	        LD      E,C                     ; from BC to DE
0622: D7      	        RST     10H                     ; push word DE
0623: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	
              	; ----------------
              	; THE 'VLIST' WORD
              	; ----------------
              	; List dictionary to screen, including words in ROM.
              	; (no pause after 18 lines)
              	
0625: 564C4953	L0625:  DEFM    "VLIS"                  ; 'name field'
0629: D4      	        DEFB    'T' + $80
              	
062A: AA05    	        DEFW    L05AA                   ; 'link field'
              	
062C: 05      	L062C:  DEFB    $05                     ; 'name length field'
              	
062D: 2F06    	L062D:  DEFW    L062F                   ; 'code field'
              	
              	; ---
              	
062F: 3E0D    	L062F:  LD      A,$0D                   ; prepare a newline
              	
0631: CF      	        RST     08H                     ; print it.
              	
0632: 0E00    	        LD      C,$00                   ; set a flag for 'do all names'.
              	
0634: 180E    	        JR      L0644                   ; forward to FIND.
              	
              	
              	; ---------------
              	; THE 'FIND' WORD
              	; ---------------
              	; ( -- compilation address )
              	; Leaves compilation address of first word in input buffer, if defined in
              	; context vocabulary; else 0.
              	
0636: 46494E  	L0636:  DEFM    "FIN"                   ; 'name field'
0639: C4      	        DEFB    'D' + $80
              	
063A: 2C06    	        DEFW    L062C                   ; 'link field'
              	
063C: 04      	L063C:  DEFB    $04                     ; 'name length field'
              	
063D: 3F06    	L063D:  DEFW    L063F                   ; 'code field'
              	
              	; ---
              	
063F: CDDF05  	L063F:  CALL    L05DF                   ; get buffer word, gets length in C.
              	
0642: 3846    	        JR      C,L068A                 ; back if null to stack word zero
              	
              	; ->
              	
0644: 2A333C  	L0644:  LD      HL,($3C33)              ; fetch value of system variable CONTEXT
0647: 7E      	        LD      A,(HL)                  ; extract low byte of address.
0648: 23      	        INC     HL                      ; increment pointer.
0649: 66      	        LD      H,(HL)                  ; extract high byte of address.
064A: 6F      	        LD      L,A                     ; address now in HL.
              	
              	; The address points to the 'name length field' of the most recent word in the
              	; Dictionary.
              	
              	
064B: 7E      	L064B:  LD      A,(HL)                  ; fetch addressed byte.
064C: E63F    	        AND     $3F                     ; discount bit 6, the immediate word
              	                                        ; indicator, to give length 1-31
              	
064E: 282F    	        JR      Z,L067F                 ; a 'zero' length indicates this is a
              	                                        ; link like the example at the end of
              	                                        ; this ROM.
              	
0650: A9      	        XOR     C                       ; match against C.
0651: 2804    	        JR      Z,L0657                 ; skip forward if lengths match.
              	
0653: 79      	        LD      A,C                     ; test flag C
0654: A7      	        AND     A                       ; for value zero.
0655: 2028    	        JR      NZ,L067F                ; forward if C not zero.
              	
              	; else a name that matches the search length or all names are required - VLIST.
              	
              	
0657: D5      	L0657:  PUSH    DE                      ; preserve DE
0658: E5      	        PUSH    HL                      ; preserve 'name length field' pointer.
              	
0659: CDE815  	        CALL    L15E8                   ; routine WORDSTART finds start of name.
              	                                        ; A is returned as zero.
              	
065C: B1      	        OR      C                       ; test C for zero
065D: 2817    	        JR      Z,L0676                 ; branch forward to print if in VLIST.
              	
              	; else the search is for a specific word and a word with same length, at least,
              	; has been found.
              	
065F: 41      	        LD      B,C                     ; copy the length to counter B.
              	
0660: 1A      	L0660:  LD      A,(DE)                  ; fetch first letter of match word.
              	
0661: CD0708  	        CALL    L0807                   ; routine UPPERCASE
              	
0664: 13      	        INC     DE                      ; update pointer (in lower screen)
0665: AE      	        XOR     (HL)                    ; match against letter (in dictionary).
0666: E67F    	        AND     $7F                     ; disregard any inverted bit.
0668: 23      	        INC     HL                      ; increment dictionary pointer.
              	
0669: 2012    	        JR      NZ,L067D                ; exit loop to try next link if no match
              	
066B: 10F3    	        DJNZ    L0660                   ; else loop back for all letters.
              	
              	; Oh Frabjous day - a match.
              	
066D: D1      	        POP     DE                      ; pop 'name length field' pointer.
066E: 13      	        INC     DE                      ; increment to point to compilation
              	                                        ; address.
066F: D7      	        RST     10H                     ; stack date word DE.
              	
              	; the remaining task is to clean up the input buffer in the lower screen.
              	
0670: D1      	        POP     DE                      ; pop the DE - screen pointer.
              	
0671: CDDA07  	        CALL    L07DA                   ; clean up - backfill with spaces.
              	
0674: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -----------------------
              	; THE 'PRINT NAME' BRANCH
              	; -----------------------
              	; This branch is taken from the above loop when all found words are to be
              	; printed by VLIST. It takes its time as if the user has expanded the
              	; dictionary then the list will scroll off the top of the screen. By waiting
              	; for an interrupt each time, it ensures that a standard listing takes about
              	; three seconds and there is ample opportunity to press BREAK to stop at a
              	; certain point.
              	
0676: CDFB17  	L0676:  CALL    L17FB                   ; routine print string and space
              	
0679: 76      	        HALT                            ; wait for an interrupt.
              	
067A: CDE404  	        CALL    L04E4                   ; routine checks BREAK key.
              	
067D: E1      	L067D:  POP     HL                      ; restore 'name length field' pointer
067E: D1      	        POP     DE                      ; restore DE
              	
067F: 2B      	L067F:  DEC     HL                      ; point to high byte of 'link field'
0680: 7E      	        LD      A,(HL)                  ; hold it in A.
0681: 2B      	        DEC     HL                      ; point to low byte of 'link field'
0682: 6E      	        LD      L,(HL)                  ; transfer address of the new
0683: 67      	        LD      H,A                     ; 'name length field' to HL pointer.
              	
0684: B5      	        OR      L                       ; test if address is zero - for the
              	                                        ; last entry in the linked list.
              	
0685: 20C4    	        JR      NZ,L064B                ; loop back while this is not the
              	                                        ; last entry in the vocabulary.
              	
0687: C3      	L0687:  DEFB    $C3                     ; A JP instruction i.e. JP L068A
              	
              	; Note. The intention is to jump past the headerless code word for the internal
              	; word stk_zero. Since the word that would follow the first byte of the jump
              	; instruction would be identical to the word it is jumping over then the word
              	; can be omitted. Only saves one byte but this is back in 1983.
              	
              	; ----------------------------
              	; The 'stk-zero' Internal Word
              	; ----------------------------
              	; (  -- 0 )
              	
0688: 8A06    	L0688:  DEFW    L068A                   ; headerless 'code field'
              	
              	; ---
              	
068A: 110000  	L068A:  LD      DE,$0000                ; load DE with the value zero.
068D: D7      	        RST     10H                     ; stack Data Word DE
              	
068E: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ------------------
              	; THE 'EXECUTE' WORD
              	; ------------------
              	; ( compilation address --  )
              	; Executes the word with the given compilation address.
              	
0690: 45584543	L0690:  DEFM    "EXECUT"                ; 'name field'
0694: 5554    	
0696: C5      	        DEFB    'E' + $80
              	
0697: 3C06    	        DEFW    L063C                   ; 'link field'
              	
0699: 07      	L0699:  DEFB    $07                     ; 'name length field'
              	
069A: 9C06    	L069A:  DEFW    L069C                   ; 'code field'
              	
              	; ---
              	
069C: DF      	L069C:  RST     18H
              	
069D: C3BF04  	        JP      L04BF                   ;
              	
              	; -----------------
              	; THE 'NUMBER' WORD
              	; -----------------
              	; Takes a number from the start of the input buffer. Leaves the number and
              	; a non-zero address on the stack. (The address is the compilation address
              	; of a literal compiler, so that if you then say EXECUTE, the literal compiler
              	; compiles the number into the dictionary as a literal - for an integer it
              	; is 4102, for a floating point number it is 4181).
              	; If no valid number then leaves just 0 on the stack.
              	
06A0: 4E554D42	L06A0:  DEFM    "NUMBE"                 ; 'name field'
06A4: 45      	
06A5: D2      	        DEFB    'R' + $80
              	
06A6: 9906    	        DEFW    L0699                   ; 'link field'
              	
06A8: 06      	L06A8:  DEFB    $06                     ; 'name length field'
              	
06A9: AB06    	L06A9:  DEFW    L06AB                   ; 'code field'
              	
              	; ---
              	
06AB: CDDF05  	L06AB:  CALL    L05DF                   ; get buffer
              	
06AE: 38DA    	        JR      C,L068A                 ; if empty stack word zero.
              	
06B0: C5      	        PUSH    BC
06B1: D5      	        PUSH    DE
              	
06B2: CD4C07  	        CALL    L074C                   ;
              	
06B5: 2005    	        JR      NZ,L06BC                ;
              	
06B7: 110610  	        LD      DE,$1006                ; addr literal?
06BA: 1858    	        JR      L0714                   ;
              	
              	; ---
              	
06BC: DF      	L06BC:  RST     18H                     ; pop word DE
06BD: 110000  	        LD      DE,$0000
06C0: D7      	        RST     10H                     ; push word DE
06C1: 110045  	        LD      DE,$4500
06C4: C1      	        POP     BC
06C5: C5      	        PUSH    BC
06C6: 0A      	        LD      A,(BC)
06C7: FE2D    	        CP      $2D                     ; is it '-' ?
06C9: 2003    	        JR      NZ,L06CE                ;
              	
06CB: 16C5    	        LD      D,$C5
06CD: 03      	        INC     BC
06CE: D7      	L06CE:  RST     10H                     ; push word DE
06CF: 50      	        LD      D,B
06D0: 59      	        LD      E,C
06D1: 2B      	        DEC     HL
06D2: 2B      	        DEC     HL
              	
06D3: CD2307  	L06D3:  CALL    L0723                   ; routine GET_DECIMAL
              	
06D6: 23      	        INC     HL
06D7: 34      	        INC     (HL)
06D8: 2B      	        DEC     HL
06D9: 30F8    	        JR      NC,L06D3                ;
              	
06DB: FEFE    	        CP      $FE
06DD: 203D    	        JR      NZ,L071C                ;
              	
06DF: CD2307  	L06DF:  CALL    L0723                   ; routine GET_DECIMAL
              	
06E2: 30FB    	        JR      NC,L06DF                ;
              	
06E4: C630    	        ADD     A,$30                   ; add '0' converting to letter.
06E6: CD7B07  	        CALL    L077B                   ;
06E9: 2004    	        JR      NZ,L06EF                ;
              	
06EB: 1E00    	        LD      E,$00
06ED: 180E    	        JR      L06FD                   ;
              	
06EF: E6DF    	L06EF:  AND     $DF                     ;
              	
06F1: FE45    	        CP      $45                     ; is it 'E' - extended format?
06F3: 2027    	        JR      NZ,L071C                ;
              	
06F5: E5      	        PUSH    HL
              	
06F6: CD4C07  	        CALL    L074C                   ;
              	
06F9: DF      	        RST     18H                     ; pop word DE
06FA: E1      	        POP     HL
06FB: 201F    	        JR      NZ,L071C                ;
              	
06FD: CD4007  	L06FD:  CALL    L0740                   ;
0700: 280F    	        JR      Z,L0711                 ;
              	
0702: 23      	        INC     HL
0703: 7E      	        LD      A,(HL)
0704: E67F    	        AND     $7F
0706: 83      	        ADD     A,E
              	
0707: FA1C07  	        JP      M,L071C                 ; forward +->
              	
070A: 2810    	        JR      Z,L071C                 ; forward +->
              	
070C: AE      	        XOR     (HL)
070D: E67F    	        AND     $7F
070F: AE      	        XOR     (HL)
0710: 77      	        LD      (HL),A
0711: 115510  	L0711:  LD      DE,L1055                ; stk_fp
0714: D7      	L0714:  RST     10H                     ; push word DE
0715: D1      	        POP     DE
0716: C1      	        POP     BC
0717: CDDA07  	        CALL    L07DA                   ;
071A: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
              	; +->
071C: E1      	L071C:  POP     HL
071D: E1      	        POP     HL
071E: DF      	        RST     18H                     ; pop word DE
071F: DF      	        RST     18H                     ; pop word DE
0720: C38A06  	        JP      L068A                   ;
              	
              	; ----------------------------
              	; THE 'GET DECIMAL' SUBROUTINE
              	; ----------------------------
              	; Fetch character and return with carry set if after conversion is not in
              	; range 0 to 9.
              	
0723: 1A      	L0723:  LD      A,(DE)
0724: 13      	        INC     DE
0725: D630    	        SUB     $30                     ; subtract '0'
0727: D8      	        RET     C                       ; return if was less than '0'
              	
0728: FE0A    	        CP      $0A                     ; compare to ten.
072A: 3F      	        CCF                             ; complement
072B: D8      	        RET     C                       ; return - with carry set if over 9.
              	
              	; ---------
              	; normalize?
              	; ---------
              	; => from below only.
072C: 4F      	L072C:  LD      C,A
072D: 7E      	        LD      A,(HL)
072E: E6F0    	        AND     $F0
0730: C0      	        RET     NZ
              	
0731: 79      	        LD      A,C
              	
              	; => (int/print_fp)
0732: 2B      	L0732:  DEC     HL
0733: 2B      	        DEC     HL
0734: 0E03    	        LD      C,$03
              	
0736: ED6F    	L0736:  RLD                             ;  A = xxxx3210  <--   7654<-3210 (HL)
              	
0738: 23      	        INC     HL                      ;
0739: 0D      	        DEC     C
073A: 20FA    	        JR      NZ,L0736                ;
              	
073C: 35      	        DEC     (HL)                    ; decrement exponent
073D: 2B      	        DEC     HL                      ; point to start of BCD nibbles
073E: BF      	        CP      A
073F: C9      	        RET
              	
              	; ---
              	
              	; from ufloat to normalize 6-nibble mantissa
              	
0740: 0606    	L0740:  LD      B,$06                   ; six nibbles
              	
0742: AF      	L0742:  XOR     A
              	
0743: CD2C07  	        CALL    L072C                   ;
              	
0746: C0      	        RET     NZ
              	
0747: 10F9    	        DJNZ    L0742                   ;
              	
0749: 23      	        INC     HL
074A: 70      	        LD      (HL),B
              	
074B: C9      	        RET
              	
              	; ---------------------------
              	; THE 'GET NUMBER' SUBROUTINE
              	; ---------------------------
              	; can be called twice by the above code for the word 'NUMBER'.
              	; Once to get the first number encountered and sometimes, if in extended
              	; format, the exponent as well.
              	
074C: D7      	L074C:  RST     10H                     ; push word DE
              	
074D: CDB904  	        CALL    L04B9                   ; forth
              	
0750: 6B08    	L0750:  DEFW    L086B                   ; dup
0752: 9608    	        DEFW    L0896                   ; C@
0754: 4B10    	        DEFW    L104B                   ; stk-data
0756: 2D      	        DEFB    $2D                     ;  chr '-'
0757: 4A0C    	        DEFW    L0C4A                   ; =
0759: 6B08    	        DEFW    L086B                   ; dup
075B: A90D    	        DEFW    L0DA9                   ; negate
075D: D208    	        DEFW    L08D2                   ; >R
075F: D20D    	        DEFW    L0DD2                   ; +
0761: 1F0E    	        DEFW    L0E1F                   ; 1-
0763: 8806    	        DEFW    L0688                   ; stk-zero
0765: 8806    	        DEFW    L0688                   ; stk-zero
0767: FF08    	        DEFW    L08FF                   ; rot
0769: 8A07    	L0769:  DEFW    L078A                   ; convert
076B: FF08    	        DEFW    L08FF                   ; rot
076D: DF08    	        DEFW    L08DF                   ; R>
076F: 940D    	        DEFW    L0D94                   ; pos
0771: FF08    	        DEFW    L08FF                   ; rot
0773: 7908    	        DEFW    L0879                   ; drop
0775: 8508    	        DEFW    L0885                   ; swap
0777: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
0779: DF      	L0779:  RST     18H                     ; pop word DE
077A: 1A      	        LD      A,(DE)
              	
077B: FE20    	L077B:  CP      $20
077D: C8      	        RET     Z
              	
077E: A7      	        AND     A
077F: C9      	        RET
              	
              	; ------------------
              	; THE 'CONVERT' WORD
              	; ------------------
              	; (  ud1, addr1 -- ud2, addr2  )
              	; Accumulates digits from text into an unsigned double length
              	; number ud1: for each digit, the double length accumulator is
              	; multiplied by the system number base and the digit (converted
              	; from ASCII) is added on. The text starts at addr1 + 1. addr2 is
              	; the address of the first unconvertible character, ud2 is the
              	; final value of the accumulator.
              	
0780: 434F4E56	L0780:  DEFM    "CONVER"                ; 'name field'
0784: 4552    	
0786: D4      	        DEFB    'T' + $80
              	
0787: A806    	        DEFW    L06A8                   ; 'link field'
              	
0789: 07      	L0789:  DEFB    $07                     ; 'name length field'
              	
078A: C30E    	L078A:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
078C: 090E    	L078C:  DEFW    L0E09                   ; 1+
078E: 6B08    	L078E:  DEFW    L086B                   ; dup
0790: D208    	L0790:  DEFW    L08D2                   ; >R
0792: 9608    	L0792:  DEFW    L0896                   ; C@
0794: B807    	L0794:  DEFW    L07B8                   ; stk_digit
0796: 8312    	L0796:  DEFW    L1283                   ; ?branch
0798: 1B00    	L0798:  DEFW    $001B                   ; to 0799 + 1B = $07B4
              	
079A: 8508    	L079A:  DEFW    L0885                   ; swap
079C: 8A04    	L079C:  DEFW    L048A                   ; get base
079E: 9608    	L079E:  DEFW    L0896                   ; C@
07A0: A80C    	L07A0:  DEFW    L0CA8                   ; u*
07A2: 7908    	L07A2:  DEFW    L0879                   ; drop
07A4: FF08    	L07A4:  DEFW    L08FF                   ; rot
07A6: 8A04    	L07A6:  DEFW    L048A                   ; get base
07A8: 9608    	L07A8:  DEFW    L0896                   ; C@
07AA: A80C    	L07AA:  DEFW    L0CA8                   ; U*
07AC: EE0D    	L07AC:  DEFW    L0DEE                   ; D+
07AE: DF08    	L07AE:  DEFW    L08DF                   ; R>
07B0: 7612    	L07B0:  DEFW    L1276                   ; branch
07B2: D9FF    	L07B2:  DEFW    $FFD9                   ; loop back to L078C
              	
07B4: DF08    	L07B4:  DEFW    L08DF                   ; R>
07B6: B604    	L07B6:  DEFW    L04B6                   ; exit
              	
              	; -----------------------------
              	; The 'stk_digit' Internal Word
              	; -----------------------------
              	
07B8: BA07    	L07B8:  DEFW    L07BA                   ; headerless 'code field'
              	
              	; ---
              	
07BA: DF      	L07BA:  RST     18H                     ; pop word DE
              	
07BB: 7B      	        LD      A,E                     ; character to A
              	
07BC: CD0708  	        CALL    L0807                   ; to_upper
              	
07BF: C6D0    	        ADD     A,$D0                   ; add to give carry with '0' and more.
              	
07C1: 3014    	        JR      NC,L07D7                ; if less than '0' push byte 0 false.
              	
07C3: FE0A    	        CP      $0A                     ; compare to ten.
07C5: 3806    	        JR      C,L07CD                 ; forward to stack bytes 0 - 9.
              	
07C7: C6EF    	        ADD     A,$EF                   ;
07C9: 300C    	        JR      NC,L07D7                ; push word false 0.
              	
07CB: C60A    	        ADD     A,$0A
              	
07CD: DDBE3F  	L07CD:  CP      (IX+$3F)                ; compare to BASE
07D0: 3005    	        JR      NC,L07D7                ; push word false 0.
              	
              	; else digit is within range of number base
              	
07D2: 1600    	        LD      D,$00
07D4: 5F      	        LD      E,A
07D5: D7      	        RST     10H                     ; push word DE
07D6: 37      	        SCF                             ; set carry to signal true
              	
07D7: C3210C  	L07D7:  JP      L0C21                   ; push word 1 or 0
              	
              	; ---
              	;       ??
              	; ---
              	
07DA: 62      	L07DA:  LD      H,D
07DB: 6B      	        LD      L,E
07DC: 03      	        INC     BC
07DD: 09      	        ADD     HL,BC
07DE: E5      	        PUSH    HL
07DF: DDCB3E66	        BIT     4,(IX+$3E)              ; FLAGS
07E3: CC7F09  	        CALL    Z,L097F                 ; pr_string
              	
07E6: CDB002  	        CALL    L02B0                   ; curs?
              	
07E9: D1      	        POP     DE
07EA: A7      	        AND     A
07EB: ED52    	        SBC     HL,DE
07ED: 44      	        LD      B,H
07EE: 4D      	        LD      C,L
07EF: 2A1E3C  	        LD      HL,($3C1E)              ; INSCRN
07F2: 23      	        INC     HL
07F3: EB      	        EX      DE,HL
07F4: 3805    	        JR      C,L07FB                 ;
              	
07F6: 2802    	        JR      Z,L07FA                 ; forward to SPACE_FILL.
              	
07F8: EDB0    	        LDIR
              	
              	; ------------------------
              	; The 'SPACE FILL' routine
              	; ------------------------
              	; -> from cls
              	
07FA: A7      	L07FA:  AND     A                       ; prepare to subtract two screen
              	                                        ; pointers.
              	
07FB: ED52    	L07FB:  SBC     HL,DE                   ; number of bytes in HL.
07FD: EB      	        EX      DE,HL                   ; now in DE, HL = start of area.
              	
07FE: 7A      	L07FE:  LD      A,D                     ; check if the
07FF: B3      	        OR      E                       ; counter is zero.
0800: C8      	        RET     Z                       ; return if so.                 >>
              	
0801: 3620    	        LD      (HL),$20                ; insert a space character.
0803: 23      	        INC     HL                      ; next address.
0804: 1B      	        DEC     DE                      ; decrement byte counter.
0805: 18F7    	        JR      L07FE                   ; loop back to exit on zero.
              	
              	; --------------------------
              	; THE 'UPPERCASE' SUBROUTINE
              	; --------------------------
              	; converts characters to uppercase.
              	
0807: E67F    	L0807:  AND     $7F                     ; ignore inverse bit 7
0809: FE61    	        CP      $61                     ; compare to 'a'
080B: D8      	        RET     C                       ; return if lower
              	
080C: FE7B    	        CP      $7B                     ; compare to 'z' + 1
080E: D0      	        RET     NC                      ; return if higher than 'z'
              	
080F: E65F    	        AND     $5F                     ; make uppercase
0811: C9      	        RET                             ; return.
              	
              	; --------------
              	; THE 'VIS' WORD
              	; --------------
              	; Allows copy-up mechanism and 'OK'.
              	
0812: 5649    	L0812:  DEFM    "VI"                    ; 'name field'
0814: D3      	        DEFB    'S' + $80
              	
0815: 8907    	        DEFW    L0789                   ; 'link field'
              	
0817: 03      	L0817:  DEFB    $03                     ; 'name length field'
              	
0818: 1A08    	L0818:  DEFW    L081A                   ; 'code field'
              	
              	; ---
              	
081A: DDCB3EA6	L081A:  RES     4,(IX+$3E)              ; update FLAGS signal visible mode.
081E: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ----------------
              	; THE 'INVIS' WORD
              	; ----------------
              	; Suppresses copy-up mechanism and 'OK'.
              	
0820: 494E5649	L0820:  DEFM    "INVI"                  ; 'name field'
0824: D3      	        DEFB    'S' + $80
              	
0825: 1708    	        DEFW    L0817                   ; 'link field'
              	
0827: 05      	L0827:  DEFB    $05                     ; 'name length field'
              	
0828: 2A08    	L0828:  DEFW    L082A                   ; 'code field'
              	
              	; ---
              	
082A: DDCB3EE6	L082A:  SET     4,(IX+$3E)              ; update FLAGS signal invisible mode.
              	
082E: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	
              	; ---------------
              	; THE 'FAST' WORD
              	; ---------------
              	; Fast mode - runs without error checks.
              	; Debugged programs run 25% faster.
              	
0830: 464153  	L0830:  DEFM    "FAS"                   ; 'name field'
0833: D4      	        DEFB    'T' + $80
              	
0834: 2708    	        DEFW    L0827                   ; 'link field'
              	
0836: 04      	L0836:  DEFB    $04                     ; 'name length field'
              	
0837: 3908    	L0837:  DEFW    L0839                   ; 'code field'
              	
              	; ---
              	
0839: FD21B904	L0839:  LD      IY,L04B9                ; miss memory checks on return
              	
083D: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------
              	; THE 'SLOW' WORD
              	; ---------------
              	; ( -- )
              	; Slow mode with error checking.
              	; Make IY point to a return routine that performs housekeeping.
              	
              	
083F: 534C4F  	L083F:  DEFM    "SLO"                   ; 'name field'
0842: D7      	        DEFB    'W' + $80
              	
0843: 3608    	        DEFW    L0836                   ; 'link field'
              	
0845: 04      	L0845:  DEFB    $04                     ; 'name length field'
              	
              	
0846: 4808    	L0846:  DEFW    L0848                   ; 'code field'
              	
              	; ---
              	
0848: FD21C804	L0848:  LD      IY,L04C8                ; set vector to memory checks each pass
              	
084C: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------------------------
              	; THE 'DATA STACK TO BC' SUBROUTINE
              	; ---------------------------------
              	; Called on twenty occasions to fetch a word from the Data Stack into the
              	; BC register pair. Very similar to RST 18H which does the same thing with the
              	; DE register pair as the destination on 73 occasions.
              	; In fact, as two Z80 restarts are unused, then 40 bytes of ROM code could have
              	; been saved by making this a restart also.
              	
084E: 2A3B3C  	L084E:  LD      HL,($3C3B)              ; fetch SPARE - start of Spare Memory.
0851: 2B      	        DEC     HL                      ; decrement to point to last stack item
0852: 46      	        LD      B,(HL)                  ; load high byte to B.
0853: 2B      	        DEC     HL                      ; address low byte of word.
0854: 4E      	        LD      C,(HL)                  ; and load to C.
0855: 223B3C  	        LD      ($3C3B),HL              ; update the system variable SPARE to
              	                                        ; a location two bytes less than it was.
0858: C9      	        RET                             ; return.
              	
              	; -----------------------------------------
              	; THE 'CONTINUATION OF THE RST 18H' RESTART
              	; -----------------------------------------
              	; complete the operation of popping a word to DE from the data stack.
              	
0859: 2B      	L0859:  DEC     HL                      ;
085A: 5E      	        LD      E,(HL)                  ;
085B: 223B3C  	        LD      ($3C3B),HL              ; update SPARE
085E: C9      	        RET                             ; return.
              	
              	; -----------------------------------------
              	; THE 'CONTINUATION OF THE RST 10H' RESTART
              	; -----------------------------------------
              	; complete the operation of pushing a word in DE to the data stack.
              	
085F: 72      	L085F:  LD      (HL),D                  ;
0860: 23      	        INC     HL                      ;
0861: 223B3C  	        LD      ($3C3B),HL              ; update SPARE
0864: C9      	        RET                             ; return.
              	
              	; --------------
              	; THE 'DUP' WORD
              	; --------------
              	; ( n -- n, n )
              	; Duplicates the top of the stack.
              	
0865: 4455    	L0865:  DEFM    "DU"                    ; 'name field'
0867: D0      	        DEFB    'P' + $80
              	
0868: 4508    	        DEFW    L0845                   ; 'link field'
              	
086A: 03      	L086A:  DEFB    $03                     ; 'name length field'
              	
086B: 6D08    	L086B:  DEFW    L086D                   ; 'code field'
              	
              	; ---
              	
086D: DF      	L086D:  RST     18H                     ; unstack Data Word DE
086E: D7      	        RST     10H                     ; stack Data Word DE
086F: D7      	        RST     10H                     ; stack Data Word DE
              	
0870: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------
              	; THE 'DROP' WORD
              	; ---------------
              	; ( n -- )
              	; Throws away the top of the stack.
              	
0872: 44524F  	L0872:  DEFM    "DRO"                   ; 'name field'
0875: D0      	        DEFB    'P' + $80
              	
0876: 6A08    	        DEFW    L086A                   ; 'link field'
              	
0878: 04      	L0878:  DEFB    $04                     ; 'name length field'
              	
0879: 7B08    	L0879:  DEFW    L087B                   ; 'code field'
              	
              	; ---
              	
087B: DF      	L087B:  RST     18H                     ; unstack Data Word DE
087C: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------
              	; THE 'SWAP' WORD
              	; ---------------
              	; (n1, n2 -- n2, n1)
              	
087E: 535741  	L087E:  DEFM    "SWA"                   ; 'name field'
0881: D0      	        DEFB    'P' + $80
              	
0882: 7808    	        DEFW    L0878                   ; 'link field'
              	
0884: 04      	L0884:  DEFB    $04                     ; 'name length field'
              	
0885: 8708    	L0885:  DEFW    L0887                   ; 'code field'
              	
              	; ---
              	
0887: DF      	L0887:  RST     18H                     ; pop word DE
0888: CD4E08  	        CALL    L084E                   ; stk_to_bc
088B: D7      	        RST     10H                     ; push word DE
088C: 50      	        LD      D,B                     ;
088D: 59      	        LD      E,C                     ;
088E: D7      	        RST     10H                     ; push word DE
              	
088F: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------
              	; THE 'C@' WORD
              	; -------------
              	; (address -- byte)
              	; Fetches the contents of a given address.
              	
0891: 43      	L0891:  DEFB    'C'                     ; 'name field'
0892: C0      	        DEFB    '@' + $80
              	
0893: 8408    	        DEFW    L0884                   ; 'link field'
              	
0895: 02      	L0895:  DEFB    $02                     ; 'name length field'
              	
0896: 9808    	L0896:  DEFW    L0898                   ; 'code field'
              	
              	; ---
              	
0898: DF      	L0898:  RST     18H                     ; pop word DE
0899: 1A      	        LD      A,(DE)
089A: 5F      	        LD      E,A
089B: 1600    	        LD      D,$00
              	
089D: D7      	        RST     10H                     ; push word DE
              	
089E: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------
              	; THE 'C!' WORD
              	; -------------
              	; (n, address -- )
              	; Stores the less significant byte on n at a given address.
              	
08A0: 43      	L08A0:  DEFB    'C'                     ; 'name field'
08A1: A1      	        DEFB    '!' + $80
              	
08A2: 9508    	        DEFW    L0895                   ; 'link field'
              	
08A4: 02      	L08A4:  DEFB    $02                     ; 'name length field'
              	
08A5: A708    	L08A5:  DEFW    L08A7                   ; 'code field'
              	
              	; ---
              	
08A7: DF      	L08A7:  RST     18H                     ; pop word DE
08A8: CD4E08  	        CALL    L084E                   ; stk_to_bc
08AB: 79      	        LD      A,C
08AC: 12      	        LD      (DE),A
              	
08AD: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ------------
              	; THE '@' WORD
              	; ------------
              	; (address -- n)
              	; Leaves on stack the single length integer at the given address.
              	
08AF: C0      	L08AF:  DEFB    '@' + $80               ; 'name field'
              	
08B0: A408    	        DEFW    L08A4                   ; 'link field'
              	
08B2: 01      	L08B2:  DEFB    $01                     ; 'name length field'
              	
08B3: B508    	L08B3:  DEFW    L08B5                   ; 'code field'
              	
              	; ---
              	
08B5: DF      	L08B5:  RST     18H                     ; pop word DE
              	
08B6: EB      	        EX      DE,HL
08B7: 5E      	        LD      E,(HL)
08B8: 23      	        INC     HL
08B9: 56      	        LD      D,(HL)
              	
08BA: D7      	        RST     10H                     ; push word DE
              	
08BB: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ------------
              	; THE '!' WORD
              	; ------------
              	; (n,address --)
              	; Stores the single-length integer n at the given address in memory.
              	
08BD: A1      	L08BD:  DEFB    '!' + $80               ; 'name field'
              	
08BE: B208    	        DEFW    L08B2                   ; 'link field'
              	
08C0: 01      	L08C0:  DEFB    $01                     ; 'name length field'
              	
08C1: C308    	L08C1:  DEFW    L08C3                   ; 'code field'
              	
              	; ---
              	
08C3: DF      	L08C3:  RST     18H                     ; pop word DE
08C4: CD4E08  	        CALL    L084E                   ; stk_to_bc
08C7: EB      	        EX      DE,HL
08C8: 71      	        LD      (HL),C
08C9: 23      	        INC     HL
08CA: 70      	        LD      (HL),B
              	
08CB: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------
              	; THE '>R' WORD
              	; -------------
              	; (n -- )
              	; Transfers top entry on data stack to return stack.
              	; It can be copied back using 'I'.
              	
08CD: 3E      	L08CD:  DEFB    '>'                     ; 'name field'
08CE: D2      	        DEFB    'R' + $80
              	
08CF: C008    	        DEFW    L08C0                   ; 'link field'
              	
08D1: 02      	L08D1:  DEFB    $02                     ; 'name length field'
              	
08D2: D408    	L08D2:  DEFW    L08D4                   ; 'code field'
              	
              	; ---
              	
08D4: DF      	L08D4:  RST     18H
08D5: C1      	        POP     BC
08D6: D5      	        PUSH    DE
08D7: C5      	        PUSH    BC
08D8: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------
              	; THE 'R>' WORD
              	; -------------
              	; ( -- entry from return stack)
              	; Transfers top entry on return stack to data stack.
              	
08DA: 52      	L08DA:  DEFB    'R'                     ; 'name field'
08DB: BE      	        DEFB    '>' + $80
              	
08DC: D108    	        DEFW    L08D1                   ; 'link field'
              	
08DE: 02      	L08DE:  DEFB    $02                     ; 'name length field'
              	
08DF: E108    	L08DF:  DEFW    L08E1                   ; 'code field'
              	
              	; ---
              	
08E1: C1      	L08E1:  POP     BC
08E2: D1      	        POP     DE
08E3: C5      	        PUSH    BC
08E4: D7      	        RST     10H                     ; push word DE
08E5: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------
              	; THE '?DUP' WORD
              	; ---------------
              	; (n -- n, n)    if n!=0.
              	; (n -- n)       if n=0.
              	
08E7: 3F4455  	L08E7:  DEFM    "?DU"                   ; 'name field'
08EA: D0      	        DEFB    'P' + $80
              	
08EB: DE08    	        DEFW    L08DE                   ; 'link field'
              	
08ED: 04      	L08ED:  DEFB    $04                     ; 'name length field'
              	
08EE: F008    	L08EE:  DEFW    L08F0                   ; 'code field'
              	
              	; ---
              	
              	
08F0: DF      	L08F0:  RST     18H                     ; fetch word DE
08F1: D7      	        RST     10H                     ; push it back
08F2: 7A      	        LD      A,D                     ; test if fetched
08F3: B3      	        OR      E                       ; word is zero
08F4: C41000  	        CALL    NZ,L0010                ; push word DE if non-zero
08F7: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; --------------
              	; THE 'ROT' WORD
              	; --------------
              	; (n1, n2, n3 -- n2, n3, n1)
              	
08F9: 524F    	L08F9:  DEFM    "RO"                    ; 'name field'
08FB: D4      	        DEFB    'T' + $80
              	
08FC: ED08    	        DEFW    L08ED                   ; 'link field'
              	
08FE: 03      	L08FE:  DEFB    $03                     ; 'name length field'
              	
08FF: C30E    	L08FF:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0901: D208    	L0901:  DEFW    L08D2                   ; >R
0903: 8508    	L0903:  DEFW    L0885                   ; swap
0905: DF08    	L0905:  DEFW    L08DF                   ; R>
0907: 8508    	L0907:  DEFW    L0885                   ; swap
0909: B604    	L0909:  DEFW    L04B6                   ; exit
              	
              	; ---------------
              	; THE 'OVER' WORD
              	; ---------------
              	; (n1, n2 -- n1, n2, n1)
              	
090B: 4F5645  	L090B:  DEFM    "OVE"                   ; 'name field'
090E: D2      	        DEFB    'R' + $80
              	
090F: FE08    	        DEFW    L08FE                   ; 'link field'
              	
0911: 04      	L0911:  DEFB    $04                     ; 'name length field'
              	
0912: C30E    	L0912:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0914: D208    	L0914:  DEFW    L08D2                   ; >R
0916: 6B08    	L0916:  DEFW    L086B                   ; dup
0918: DF08    	L0918:  DEFW    L08DF                   ; R>
091A: 8508    	L091A:  DEFW    L0885                   ; swap
091C: B604    	L091C:  DEFW    L04B6                   ; exit
              	
              	; ---------------
              	; THE 'PICK' WORD
              	; ---------------
              	; (n1 -- n2)
              	; Copies the n1-th stack entry (after dropping n1 itself) to the top.
              	; Error 7 if n1 <= 0.
              	
091E: 504943  	L091E:  DEFM    "PIC"                   ; 'name field'
0921: CB      	        DEFB    'K' + $80
              	
0922: 1109    	        DEFW    L0911                   ; 'link field'
              	
0924: 04      	L0924:  DEFB    $04                     ; 'name length field'
              	
0925: 2709    	        DEFW    L0927                   ; 'code field'
              	
              	; ---
              	
0927: CD4D09  	L0927:  CALL    L094D                   ;
092A: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------
              	; THE 'ROLL' WORD
              	; ---------------
              	; (n -- )
              	; Extracts the nth stack value to the top of the stack, after dropping n
              	; itself, and moves the remaining values down to fill the vacated position.
              	; Error 7 if n <= 0.
              	
092C: 524F4C  	L092C:  DEFM    "ROL"                   ; 'name field'
092F: CC      	        DEFB    'L' + $80
              	
0930: 2409    	        DEFW    L0924                   ; 'link field'
              	
0932: 04      	L0932:  DEFB    $04                     ; 'name length field'
              	
0933: 3509    	L0933:  DEFW    L0935                   ; 'code field'
              	
              	; ---
              	
0935: CD4D09  	L0935:  CALL    L094D                   ;
0938: EB      	        EX      DE,HL
0939: 2A373C  	        LD      HL,($3C37)              ; STKBOT
093C: ED52    	        SBC     HL,DE
093E: D2D704  	        JP      NC,L04D7                ; jump back to Error 2
              	
0941: 62      	        LD      H,D
0942: 6B      	        LD      L,E
0943: 23      	        INC     HL
0944: 23      	        INC     HL
0945: EDB0    	        LDIR
0947: ED533B3C	        LD      ($3C3B),DE              ; SPARE
094B: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
094D: CD4E08  	L094D:  CALL    L084E                   ; stk_to_bc
0950: 0B      	        DEC     BC
0951: CB21    	        SLA     C
0953: CB10    	        RL      B
0955: 03      	        INC     BC
0956: 03      	        INC     BC
0957: 3002    	        JR      NC,L095B                ; skip the error routine
              	
0959: E7      	        RST     20H                     ; Error 7
095A: 07      	        DEFB    $07                     ; PICK or ROLL used with operand 0
              	                                        ; or negative
              	
              	; ---
              	
095B: 2A3B3C  	L095B:  LD      HL,($3C3B)              ; SPARE
095E: ED42    	        SBC     HL,BC
0960: E5      	        PUSH    HL
0961: 5E      	        LD      E,(HL)
0962: 23      	        INC     HL
0963: 56      	        LD      D,(HL)
0964: D7      	        RST     10H                     ; push word DE
0965: E1      	        POP     HL
0966: C9      	        RET
              	
              	; ---------------
              	; THE 'TYPE' WORD
              	; ---------------
              	; (address, n -- )
              	; EMITs n characters from memory starting at the address.
              	
              	
0967: 545950  	L0967:  DEFM    "TYP"                   ; 'name field'
096A: C5      	        DEFB    'E' + $80
              	
096B: 3209    	        DEFW    L0932                   ; 'link field'
              	
096D: 04      	L096D:  DEFB    $04                     ; 'name length field'
              	
096E: 7009    	L096E:  DEFW    L0970                   ; 'code field'
              	
              	; ---
              	
0970: CD4E08  	L0970:  CALL    L084E                   ; stk_to_bc
0973: DF      	        RST     18H                     ; pop word DE
0974: CD7F09  	        CALL    L097F                   ; routine pr_string (below)
              	
0977: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; --------------------------
              	; THE 'PRINT STRING' ROUTINE
              	; --------------------------
              	; The first entry point prints strings embedded in the Dictionary with the
              	; DE pointing to the preceding length word.
              	;
              	; The second entry point prints a string with length in BC and start in DE.
              	; It is called by TYPE above and to print comment fields.
              	
              	; ->
              	
0979: 1A      	L0979:  LD      A,(DE)
097A: 4F      	        LD      C,A
097B: 13      	        INC     DE
097C: 1A      	        LD      A,(DE)
097D: 47      	        LD      B,A
097E: 13      	        INC     DE
              	
              	; -->
097F: 78      	L097F:  LD      A,B
0980: B1      	        OR      C
0981: C8      	        RET     Z
              	
0982: 1A      	        LD      A,(DE)
0983: 13      	        INC     DE
0984: 0B      	        DEC     BC
0985: CF      	        RST     08H                     ; print_ch
              	
0986: 18F7    	        JR      L097F                   ;
              	
              	; -------------
              	; THE '<#' WORD
              	; -------------
              	; (  --  )
              	; Initiates formatted output.
              	
0988: 3C      	L0988:  DEFB    '<'                     ; 'name field'
0989: A3      	        DEFB    '#' + $80
              	
098A: 6D09    	        DEFW    L096D                   ; 'link field'
              	
098C: 02      	L098C:  DEFB    $02                     ; 'name length field'
              	
098D: 8F09    	L098D:  DEFW    L098F                   ; 'code field'
              	
              	; ---
              	
098F: 21FF27  	L098F:  LD      HL,$27FF                ; end of pad
0992: 221A3C  	        LD      ($3C1A),HL              ; update system variable HLD
0995: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------
              	; THE '#>' WORD
              	; -------------
              	; (ud -- address, n)
              	; Finishes formatted output, leaving the address and length (n) of the
              	; resultant string.
              	
0997: 23      	L0997:  DEFB    '#'                     ; 'name field'
0998: BE      	        DEFB    '>' + $80
              	
0999: 8C09    	        DEFW    L098C                   ; 'link field'
              	
099B: 02      	L099B:  DEFB    $02                     ; 'name length field'
              	
099C: 9E09    	L099C:  DEFW    L099E                   ; 'code field'
              	
              	; ---
              	
099E: DF      	L099E:  RST     18H                     ; pop word DE
099F: DF      	        RST     18H                     ; pop word DE
09A0: ED5B1A3C	        LD      DE,($3C1A)              ; HLD
09A4: D7      	        RST     10H                     ; push word DE (address)
09A5: 21FF27  	        LD      HL,$27FF                ; end of pad.
09A8: A7      	        AND     A                       ; prepare to subtract.
09A9: ED52    	        SBC     HL,DE                   ; find length of string.
09AB: EB      	        EX      DE,HL                   ; transfer to DE
09AC: D7      	        RST     10H                     ; push word DE (n)
              	
09AD: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ------------
              	; THE '.' WORD
              	; ------------
              	;
              	
09AF: AE      	L09AF:  DEFB    '.' + $80               ; 'name field'
              	
09B0: 490A    	        DEFW    L0A49                   ; 'link field'
              	
09B2: 01      	L09B2:  DEFB    $01                     ; 'name length field'
              	
09B3: C30E    	L09B3:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
09B5: 8D09    	L09B5:  DEFW    L098D                   ; <#
09B7: 6B08    	        DEFW    L086B                   ; dup
09B9: 0D0C    	        DEFW    L0C0D                   ; abs
09BB: 8806    	        DEFW    L0688                   ; stk-zero
09BD: E109    	        DEFW    L09E1                   ; #s
09BF: FF08    	        DEFW    L08FF                   ; rot
09C1: 4A0A    	        DEFW    L0A4A                   ; sign
              	
09C3: 9C09    	L09C3:  DEFW    L099C                   ; #>
09C5: 6E09    	        DEFW    L096E                   ; type
09C7: 730A    	        DEFW    L0A73                   ; space
09C9: B604    	        DEFW    L04B6                   ; exit
              	
              	; -------------
              	; THE 'U.' WORD
              	; -------------
              	; (un -- )
              	; Prints the unsigned single length integer 'un' to the television screen,
              	; followed by a space.
              	
09CB: 55      	L09CB:  DEFB    'U'                     ; 'name field'
09CC: AE      	        DEFB    '.' + $80
              	
09CD: B209    	        DEFW    L09B2                   ; 'link field'
              	
09CF: 02      	L09CF:  DEFB    $02                     ; 'name length field'
              	
09D0: C30E    	L09D0:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
09D2: 8806    	L09D2:  DEFW    L0688                   ; stk-zero
09D4: 8D09    	L09D4:  DEFW    L098D                   ; <#
09D6: E109    	L09D6:  DEFW    L09E1                   ; #S
09D8: 7612    	L09D8:  DEFW    L1276                   ; branch
09DA: E8FF    	L09DA:  DEFW    $FFE8                   ; -> 09C3
              	
              	
              	; -------------
              	; THE '#S' WORD
              	; -------------
              	; (ud -- 0,0)
              	; Applies # repeatedly (at least once) until the double length number left
              	; on the stack is 0.
              	
09DC: 23      	L09DC:  DEFB    '#'                     ; 'name field'
09DD: D3      	        DEFB    'S' + $80
              	
09DE: CF09    	        DEFW    L09CF                   ; 'link field'
              	
09E0: 02      	L09E0:  DEFB    $02                     ; 'name length field'
              	
09E1: C30E    	L09E1:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
09E3: F709    	L09E3:  DEFW    L09F7                   ; #
09E5: 1209    	        DEFW    L0912                   ; over
09E7: 1209    	        DEFW    L0912                   ; over
09E9: 360E    	        DEFW    L0E36                   ; or
09EB: 1A0C    	        DEFW    L0C1A                   ; 0=
09ED: 8D12    	        DEFW    L128D                   ; ?branch
              	
09EF: F3FF    	L09EF:  DEFW    $FFF3                   ; back to L09E3
              	
09F1: B604    	        DEFW    L04B6                   ; exit
              	
              	; ------------
              	; THE '#' WORD
              	; ------------
              	; (ud1 -- ud2)
              	; used in formatted output. Generates one digit from the unsigned double
              	; length integer ud1 and holds it in the pad. The unsigned double length
              	; integer ud2 is the quotient when ud1 is divided by the number base.
              	
09F3: A3      	L09F3:  DEFB    '#' + $80               ; 'name field'
              	
09F4: E009    	        DEFW    L09E0                   ; 'link field'
              	
09F6: 01      	L09F6:  DEFB    $01                     ; 'name length field'
              	
09F7: C30E    	L09F7:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
09F9: 8A04    	L09F9:  DEFW    L048A                   ; get base
09FB: 9608    	L09FB:  DEFW    L0896                   ; C@
09FD: C40C    	L09FD:  DEFW    L0CC4                   ; div?
09FF: FF08    	L09FF:  DEFW    L08FF                   ; rot
0A01: 070A    	L0A01:  DEFW    L0A07                   ; stk-char
0A03: 5C0A    	L0A03:  DEFW    L0A5C                   ; hold
0A05: B604    	L0A05:  DEFW    L04B6                   ; exit
              	
              	; ----------------------------
              	; The 'stk-char' Internal Word
              	; ----------------------------
              	; used from above thread.
              	
0A07: 090A    	L0A07:  DEFW    L0A09                   ; headerless 'code field'
              	
              	; ---
              	
0A09: DF      	L0A09:  RST     18H                     ; data stack to DE
0A0A: 7B      	        LD      A,E                     ; character to A
0A0B: C630    	        ADD     A,$30                   ; convert digit to ASCII
0A0D: FE3A    	        CP      $3A                     ; compare to '9'
0A0F: 3802    	        JR      C,L0A13                 ; forward if digit
0A11: C607    	        ADD     A,$07                   ; else add for hex
              	
0A13: 5F      	L0A13:  LD      E,A                     ; back to E
0A14: D7      	        RST     10H                     ; push ASCII on data stack.
0A15: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; --------------
              	; THE 'CLS' WORD
              	; --------------
              	; ( -- )
              	; Clears the screen and sets the print position to the top left of
              	; the screen.
              	
0A17: 434C    	L0A17:  DEFM    "CL"                    ; 'name field'
0A19: D3      	        DEFB    'S' + $80
              	
0A1A: F609    	        DEFW    L09F6                   ; 'link field'
              	
0A1C: 03      	L0A1C:  DEFB    $03                     ; 'name length field'
              	
0A1D: 1F0A    	        DEFW    L0A1F                   ; 'code field'
              	
              	; ---
              	
0A1F: CD240A  	L0A1F:  CALL    L0A24                   ; routine CLS below.
              	
0A22: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	
              	; --------------------
              	; THE 'CLS' SUBROUTINE
              	; --------------------
              	; Called from the 'CLS' word definition above and also from the initialization
              	; routine.
              	
0A24: 11FF26  	L0A24:  LD      DE,$26FF                ; point destination to end of video
              	                                        ; memory.
0A27: 2A243C  	        LD      HL,($3C24)              ; set HL to first byte of input buffer
              	                                        ; from system variable L_HALF.
              	                                        ; (at initialization $26E0).
              	
0A2A: 012000  	        LD      BC,$0020                ; set count to thirty two.
              	
0A2D: 09      	        ADD     HL,BC                   ; add to the low address.
0A2E: 2B      	        DEC     HL                      ; step back and
0A2F: EDB8    	        LDDR                            ; copy the 32 bytes.
              	
              	; while BC is zero, set the plotting coordinates.
              	
0A31: ED432F3C	        LD      ($3C2F),BC              ; set XCOORD and YCOORD to zero.
              	
              	; set the screen position to the start of video memory.
              	
0A35: 210024  	        LD      HL,$2400                ; start of the 768 bytes of video RAM.
0A38: 221C3C  	        LD      ($3C1C),HL              ; set system variable SCRPOS.
              	
0A3B: 13      	        INC     DE                      ; the byte before logical line.
0A3C: EB      	        EX      DE,HL                   ; transfer to HL.
0A3D: 22243C  	        LD      ($3C24),HL              ; set L_HALF.
0A40: C3FA07  	        JP      L07FA                   ; jump back to fill the locations
              	                                        ; from DE to HL -1 with spaces.
              	
              	; ---------------
              	; THE 'SIGN' WORD
              	; ---------------
              	; (n -- )
              	; In formatted output, holds a minus sign in the pad if n is negative.
              	
              	
0A43: 534947  	L0A43:  DEFM    "SIG"                   ; 'name field'
0A46: CE      	        DEFB    'N' + $80
              	
0A47: 9B09    	        DEFW    L099B                   ; 'link field'
              	
0A49: 04      	L0A49:  DEFB    $04                     ; 'name length field'
              	
0A4A: 4C0A    	L0A4A:  DEFW    L0A4C                   ; 'code field'
              	
              	; ---
              	
0A4C: DF      	L0A4C:  RST     18H                     ; pop word DE
0A4D: CB12    	        RL      D                       ; test sign bit
0A4F: 1E2D    	        LD      E,$2D                   ; prepare a '-'
0A51: 380C    	        JR      C,L0A5F                 ; forward if minus
0A53: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------
              	; THE 'HOLD' WORD
              	; ---------------
              	; (character -- )
              	; Used in formatted output to hold the character in the pad.
              	
0A55: 484F4C  	L0A55:  DEFM    "HOL"                   ; 'name field'
0A58: C4      	        DEFB    'D' + $80
              	
0A59: 1C0A    	L0A59:  DEFW    L0A1C                   ; 'link field'
              	
0A5B: 04      	L0A5B:  DEFB    $04                     ; 'name length field'
              	
0A5C: 5E0A    	L0A5C:  DEFW    L0A5E                   ; 'code field'
              	
              	; ---
              	
0A5E: DF      	L0A5E:  RST     18H                     ; data stack to DE
              	
0A5F: 2A1A3C  	L0A5F:  LD      HL,($3C1A)              ; HLD
0A62: 2D      	        DEC     L
0A63: 2804    	        JR      Z,L0A69                 ; forward when full
              	
0A65: 221A3C  	        LD      ($3C1A),HL              ; update HLD
0A68: 73      	        LD      (HL),E                  ; and place character in buffer
              	
0A69: FDE9    	L0A69:  JP      (IY)                    ; to 'next'.
              	
              	; ----------------
              	; THE 'SPACE' WORD
              	; ----------------
              	; (  --  )
              	; EMITs a space.
              	
0A6B: 53504143	L0A6B:  DEFM    "SPAC"                  ; 'name field'
0A6F: C5      	        DEFB    'E' + $80
              	
0A70: 5B0A    	        DEFW    L0A5B                   ; 'link field'
              	
0A72: 05      	L0A72:  DEFB    $05                     ; 'name length field'
              	
0A73: 750A    	L0A73:  DEFW    L0A75                   ; 'code field'
              	
              	; ---
              	
0A75: 3E20    	L0A75:  LD      A,$20                   ; load accumulator with the ASCII
              	                                        ; code for space.
0A77: CF      	        RST     08H                     ; print_ch
              	
0A78: FDE9    	L0A78:  JP      (IY)                    ; to 'next'.
              	
              	; -----------------
              	; THE 'SPACES' WORD
              	; -----------------
              	; (n -- )
              	; EMITs n spaces if n >= 1.
              	
0A7A: 53504143	L0A7A:  DEFM    "SPACE"                 ; 'name field'
0A7E: 45      	
0A7F: D3      	        DEFB    'S' + $80
              	
0A80: 720A    	        DEFW    L0A72                   ; 'link field'
              	
0A82: 06      	L0A82:  DEFB    $06                     ; 'name length field'
              	
0A83: 850A    	        DEFW    L0A85                   ; 'code field'
              	
              	; ---
              	
0A85: DF      	L0A85:  RST     18H                     ; fetch stack data to DE
              	
0A86: 1B      	L0A86:  DEC     DE                      ; decrement the counter.
0A87: CB7A    	        BIT     7,D                     ; test for a negative value
0A89: 20ED    	        JR      NZ,L0A78                ; back to a jp iy  when done    >>
              	
0A8B: 3E20    	        LD      A,$20                   ; prepare a space
0A8D: CF      	        RST     08H                     ; print it
0A8E: 18F6    	        JR      L0A86                   ; loop back for more.
              	
              	; -------------
              	; THE 'CR' WORD
              	; -------------
              	; Outputs a carriage return character to the television.
              	
0A90: 43      	L0A90:  DEFB    'C'                     ; 'name field'
0A91: D2      	        DEFB    'R' + $80
              	
0A92: 820A    	        DEFW    L0A82                   ; 'link field'
              	
0A94: 02      	L0A94:  DEFB    $02                     ; 'name length field'
              	
0A95: 970A    	L0A95:  DEFW    L0A97                   ; 'code field'
              	
              	; ---
              	
0A97: 3E0D    	L0A97:  LD      A,$0D                   ; prepare a CR
0A99: CF      	        RST     08H                     ; print it.
              	
0A9A: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------
              	; THE 'EMIT' WORD
              	; ---------------
              	; (character -- )
              	; writes the character to the television screen.
              	
0A9C: 454D49  	L0A9C:  DEFM    "EMI"                   ; 'name field'
0A9F: D4      	        DEFB    'T' + $80
              	
0AA0: 940A    	        DEFW    L0A94                   ; 'link field'
              	
0AA2: 04      	L0AA2:  DEFB    $04                     ; 'name length field'
              	
0AA3: A50A    	L0AA3:  DEFW    L0AA5                   ; 'code field'
              	
              	; ---
              	
0AA5: DF      	L0AA5:  RST     18H                     ; pop de off data stack
0AA6: 7B      	        LD      A,E                     ; character to A
0AA7: CF      	        RST     08H                     ; print it.
              	
0AA8: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	
              	; -------------
              	; THE 'F.' WORD
              	; -------------
              	; (f -- )
              	; print a floating point number.
              	; If 1.0E-4 <= f < 1.0E9, then f is printed without an exponent and with a
              	; decimal point in the appropriate place. If f is outside this range, then
              	; it is printed in standard form f'En where 0 <= f' < 10 and -64 <= n <= 62.
              	; Input may be either form, but only six significant digits are accepted -
              	; further digits are ignored.
              	; Floating point numbers are stored as 3 bytes of binary coded decimal
              	; mantissa and 1 byte for sign and decimal exponents.
              	;
              	; e.g. the number 123.456 on Data Stack would be two words, four bytes.
              	;
              	;       ^       43              01000011   bits 5 - 0 are exponent
              	;       |       12      BCD     ||
              	;       |       34      BCD     |sign of exponent 1=positive (bit 6)
              	;       |       56      BCD     sign of number 0=positive (bit 7)
              	;
              	; Zero 0. is a special case floating point number with all four bytes set
              	; to zero.
              	
              	
0AAA: 46      	L0AAA:  DEFB    'F'                     ; 'name field'
0AAB: AE      	        DEFB    '.' + $80
              	
0AAC: A20A    	        DEFW    $0AA2                   ; 'link field'
              	
0AAE: 02      	L0AAE:  DEFB    $02                     ; 'name length field'
              	
0AAF: B10A    	L0AAF:  DEFW    $0AB1                   ; 'code field'
              	
              	; ---
              	
0AB1: 2A3B3C  	L0AB1:  LD      HL,($3C3B)              ; set pointer from system variable SPARE
0AB4: 2B      	        DEC     HL                      ; now points to last byte of data stack.
0AB5: CB7E    	        BIT     7,(HL)                  ; test sign of number.
0AB7: CBBE    	        RES     7,(HL)                  ; reset the sign bit.
0AB9: 2803    	        JR      Z,L0ABE                 ; forward if initially positive.
              	
0ABB: 3E2D    	        LD      A,$2D                   ; prepare  the '-' character.
0ABD: CF      	        RST     08H                     ; print the minus sign.
              	
              	; The E register is initialized to zero to denote not E-FORMAT
              	
0ABE: 1E00    	L0ABE:  LD      E,$00                   ; signal not scientific notation.
              	
0AC0: 7E      	        LD      A,(HL)                  ; fetch exponent byte
0AC1: 3D      	        DEC     A                       ; adjust to make zero $FF
              	
0AC2: FE49    	        CP      $49                     ; compare to +9   e.g.  123456000.
0AC4: 3004    	        JR      NC,L0ACA                ; skip forward if out of range.
              	
0AC6: FE3C    	        CP      $3C                     ; compare to -4   e.g  .000123456
0AC8: 3004    	        JR      NC,L0ACE                ; skip forward if in range.
              	
              	; else E format printing will be used with decimal point after first digit.
              	
0ACA: 3641    	L0ACA:  LD      (HL),$41                ; make Data Stack exponent +1
0ACC: 3C      	        INC     A                       ; restore true exponent byte
0ACD: 5F      	        LD      E,A                     ; transfer to E.
              	
              	; the branch was here when within range for normal printing.
              	
0ACE: 3E40    	L0ACE:  LD      A,$40                   ; test value is plus zero.
0AD0: 96      	        SUB     (HL)                    ; subtract signed exponent.
0AD1: 3809    	        JR      C,L0ADC                 ; forward if positive
              	
              	; exponent is negative so decimal point comes first. e.g. .001
              	
0AD3: 47      	        LD      B,A                     ; result of subtraction to B.
0AD4: 04      	        INC     B                       ; B is now one less than count of
              	                                        ; leading zeros.
              	
0AD5: 3E2E    	        LD      A,$2E                   ; prepare '.'
              	
0AD7: CF      	L0AD7:  RST     08H                     ; print decimal point or zero.
              	
0AD8: 3E30    	        LD      A,$30                   ; prepare a zero - '0'
              	
0ADA: 10FB    	        DJNZ    L0AD7                   ; loop back to print leading zeros
              	                                        ; unless the counter was 1.
              	
              	; the branch was here with positive exponent (and zero)
              	; now enter a loop to print each of the leading BCD digits
              	; the loop will end when the exponent is <= +0 and all 6 nibbles contain zero.
              	
0ADC: 3E40    	L0ADC:  LD      A,$40                   ; set accumulator to plus 0
0ADE: BE      	        CP      (HL)                    ; compare to exponent on data stack.
0ADF: 9F      	        SBC     A,A                     ; $FF if more leading digits else $00.
0AE0: 2B      	        DEC     HL                      ; address first two nibbles.
0AE1: B6      	        OR      (HL)                    ; combine.
0AE2: 2B      	        DEC     HL                      ; address next two nibbles.
0AE3: B6      	        OR      (HL)                    ; combine.
0AE4: 2B      	        DEC     HL                      ; address last two nibbles.
0AE5: B6      	        OR      (HL)                    ; combine.
              	
0AE6: 23      	        INC     HL                      ; adjust the pointer to
0AE7: 23      	        INC     HL                      ; the start of the mantissa.
              	
0AE8: 2812    	        JR      Z,L0AFC                 ; forward if all digits have been
              	                                        ; printed.
              	
              	; else print each binary coded decimal in turn.
              	
0AEA: AF      	        XOR     A                       ; prepare to feed a zero nibble in.
              	
0AEB: CD3207  	        CALL    L0732                   ; routine shift_fp extracts the most
              	                                        ; significant nibble from the 3 bytes
              	                                        ; also decrementing the exponent.
              	
0AEE: C630    	        ADD     A,$30                   ; convert to ASCII
0AF0: CF      	        RST     08H                     ; print digit
              	
0AF1: 23      	        INC     HL                      ; point to reduced exponent.
0AF2: 7E      	        LD      A,(HL)                  ; fetch to accumulator and
0AF3: FE40    	        CP      $40                     ; compare to zero.
              	
0AF5: 20E5    	        JR      NZ,L0ADC                ; loop back while more digits.
              	
              	; else this is the place to print the mid or trailing decimal point.
              	
0AF7: 3E2E    	        LD      A,$2E                   ; prepare '.'
0AF9: CF      	        RST     08H                     ; print it.
              	
0AFA: 18E0    	        JR      L0ADC                   ; loop back for end test and any digits
              	                                        ; following the decimal point.
              	
              	; ---
              	
              	; the branch was to here when all digits of the mantissa have been printed.
              	
0AFC: 7B      	L0AFC:  LD      A,E                     ; fetch the exponent format flag - from
              	                                        ; the E register appropriately.
0AFD: A7      	        AND     A                       ; test for zero - normal format.
0AFE: 2005    	        JR      NZ,L0B05                ; forward to E_FORMAT if not.
              	
0B00: 3E20    	        LD      A,$20                   ; else prepare a space
0B02: CF      	        RST     08H                     ; print it
              	
0B03: 180B    	        JR      L0B10                   ; forward to delete the two words from
              	                                        ; the data stack and exit.
              	
              	; ---
              	
              	; this branch deals with scientific notation. The accumulator holds the
              	; original exponent. $01-$3C (negative) $49-$7F (positive).
              	
0B05: D641    	L0B05:  SUB     $41                     ; convert to signed 8-bit.
0B07: 6F      	        LD      L,A                     ; low order byte to L.
0B08: 9F      	        SBC     A,A                     ; $FF negative or $00 positive
0B09: 67      	        LD      H,A                     ; set the high order byte.
              	
0B0A: 3E45    	        LD      A,$45                   ; prepare a 'E'
0B0C: CF      	        RST     08H                     ; print it
              	
0B0D: CD0E18  	        CALL    L180E                   ; routine pr_int_hl prints the signed
              	                                        ; integer followed by a space.
              	
              	; finally delete the floating point number from the Data Stack.
              	
              	
0B10: DF      	L0B10:  RST     18H                     ; unstack word DE
0B11: DF      	        RST     18H                     ; unstack word DE
              	
0B12: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------
              	; THE 'AT' WORD
              	; -------------
              	; (line, column -- )
              	; Sets print position to line and column numbers on the stack.
              	; There are 23 lines (0 to 22) and 32 columns (0 to 31). The
              	; column number is taken modulo 32, and ERROR 9 if trying to print
              	; in the input buffer at the bottom.
              	
0B14: 41      	L0B14:  DEFB    'A'                     ; 'name field'
0B15: D4      	        DEFB    'T' + $80
              	
0B16: AE0A    	        DEFW    L0AAE                   ; 'link field'
              	
0B18: 02      	L0B18:  DEFB    $02                     ; 'name length field'
              	
0B19: 1B0B    	        DEFW    L0B1B                   ; 'code field'
              	
              	; ---
              	
0B1B: DF      	L0B1B:  RST     18H                     ; pop word DE
              	
0B1C: CD4E08  	        CALL    L084E                   ; stk_to_bc
              	
0B1F: 79      	        LD      A,C
              	
0B20: CD280B  	        CALL    L0B28                   ;
              	
0B23: 221C3C  	        LD      ($3C1C),HL              ; update system variable SCRPOS
              	
0B26: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
              	; plotsub
              	
0B28: C620    	L0B28:  ADD     A,$20
0B2A: 6F      	        LD      L,A
0B2B: 2601    	        LD      H,$01
0B2D: 29      	        ADD     HL,HL
0B2E: 29      	        ADD     HL,HL
0B2F: 29      	        ADD     HL,HL
0B30: 29      	        ADD     HL,HL
0B31: 29      	        ADD     HL,HL
0B32: 1600    	        LD      D,$00
0B34: 7B      	        LD      A,E
0B35: E61F    	        AND     $1F
0B37: 5F      	        LD      E,A
0B38: 19      	        ADD     HL,DE
0B39: ED5B243C	        LD      DE,($3C24)              ; fetch start of lower half from L_HALF
0B3D: ED52    	        SBC     HL,DE
0B3F: 19      	        ADD     HL,DE
0B40: D8      	        RET     C
              	
              	;
              	
0B41: E7      	        RST     20H                     ; Error 9
0B42: 09      	        DEFB    $09                     ; Erroneous 'AT' Command.
              	
              	; ---------------
              	; THE 'PLOT' WORD
              	; ---------------
              	; (x, y, n -- )
              	; Plots pixel (x, y) with plot mode n.
              	; n =   0       unplot
              	;       1       plot
              	;       2       move
              	;       3       change
              	; If n>3, takes value modulo 4.
              	
0B43: 504C4F  	L0B43:  DEFM    "PLO"                   ; 'name field'
0B46: D4      	        DEFB    'T' + $80
              	
0B47: 180B    	        DEFW    L0B18                   ; 'link field'
              	
0B49: 04      	L0B49:  DEFB    $04                     ; 'name length field'
              	
0B4A: 4C0B    	        DEFW    L0B4C                   ; 'code field'
              	
              	; ---
              	
0B4C: CD4E08  	L0B4C:  CALL    L084E                   ; stk_to_bc
              	
0B4F: DF      	        RST     18H                     ; pop word DE
0B50: DD7330  	        LD      (IX+$30),E              ; YCOORD
0B53: CB3B    	        SRL     E
0B55: CB11    	        RL      C
0B57: 3E16    	        LD      A,$16                   ; 24
0B59: 93      	        SUB     E
              	
0B5A: DF      	        RST     18H                     ; pop word DE
0B5B: DD732F  	        LD      (IX+$2F),E              ; XCOORD
0B5E: CB3B    	        SRL     E
0B60: CB11    	        RL      C
              	
0B62: CD280B  	        CALL    L0B28                   ;
              	
0B65: 7E      	        LD      A,(HL)
0B66: E678    	        AND     $78                     ; 01111000
0B68: FE10    	        CP      $10
0B6A: 7E      	        LD      A,(HL)
0B6B: 2802    	        JR      Z,L0B6F                 ;
              	
0B6D: 3E10    	        LD      A,$10
              	
0B6F: 5F      	L0B6F:  LD      E,A
0B70: 1687    	        LD      D,$87
0B72: 79      	        LD      A,C
0B73: E603    	        AND     $03
0B75: 47      	        LD      B,A
0B76: 2807    	        JR      Z,L0B7F                 ;
              	
0B78: 2F      	        CPL
              	
0B79: C602    	        ADD     A,$02
0B7B: CE03    	        ADC     A,$03
0B7D: 57      	        LD      D,A
0B7E: 43      	        LD      B,E
0B7F: 79      	L0B7F:  LD      A,C
0B80: 0F      	        RRCA
0B81: 0F      	        RRCA
0B82: 0F      	        RRCA
0B83: 9F      	        SBC     A,A
0B84: CB59    	        BIT     3,C
0B86: 2004    	        JR      NZ,L0B8C                ;
0B88: AB      	        XOR     E
0B89: 07      	        RLCA
0B8A: 9F      	        SBC     A,A
0B8B: A8      	        XOR     B
              	
0B8C: A2      	L0B8C:  AND     D
0B8D: AB      	        XOR     E
0B8E: 77      	        LD      (HL),A
0B8F: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------
              	; THE 'BEEP' WORD
              	; ---------------
              	; ( m, n --  )
              	; Plays a note on the loudspeaker. 8 * m = period in microseconds,
              	; n = time in milliseconds.
              	
0B91: 424545  	L0B91:  DEFM    "BEE"                   ; 'name field'
0B94: D0      	        DEFB    'P' + $80
              	
0B95: 490B    	        DEFW    L0B49                   ; 'link field'
              	
0B97: 04      	L0B97:  DEFB    $04                     ; 'name length field'
              	
0B98: C30E    	        DEFW    L0EC3                   ; 'code field'  m, n.
              	
              	; ---
              	
0B9A: 1209    	L0B9A:  DEFW    L0912                   ; OVER          m, n, m.
0B9C: 4B10    	        DEFW    L104B                   ; stk-data      m, n, m, 125.
0B9E: 7D      	        DEFB    $7D                     ;  (125)
0B9F: 8508    	        DEFW    L0885                   ; SWAP          m, n, 125, m.
0BA1: 7A0D    	        DEFW    L0D7A                   ; */            m, (n*125)/m
0BA3: 0E1A    	        DEFW    L1A0E                   ; end
              	
              	; ---
              	
0BA5: DF      	L0BA5:  RST     18H                     ; pop word DE
              	
0BA6: CD4E08  	        CALL    L084E                   ; stk_to_bc
              	
0BA9: 21F900  	        LD      HL,$00F9                ;
0BAC: 09      	        ADD     HL,BC                   ;
0BAD: 2C      	        INC     L                       ;
              	
0BAE: F3      	        DI                              ; Disable Interrupts.
              	
0BAF: 3E7F    	L0BAF:  LD      A,$7F                   ; place $7FFE on address bus and read
0BB1: DBFE    	        IN      A,($FE)                 ; from port, pushing the loudspeaker
              	                                        ; diaphragm in.
              	
0BB3: 0F      	        RRCA                            ; test the read 'SPACE' key bit.
              	
0BB4: 3011    	        JR      NC,L0BC7                ; forward if BREAK pressed.
              	
0BB6: CDC90B  	        CALL    L0BC9                   ; routine delay_HL
              	
0BB9: 1B      	        DEC     DE                      ; decrement counter.
              	
0BBA: 7A      	        LD      A,D                     ; all even addresses are reserved for
              	                                        ; Jupiter Ace so any value does for the
              	                                        ; high order byte. $FE is low value.
              	
0BBB: D3FE    	        OUT     ($FE),A                 ; push the loudspeaker diaphragm out.
              	
0BBD: CDC90B  	        CALL    L0BC9                   ; routine delay_HL
              	
0BC0: B3      	        OR      E                       ; test for counter DE reaching zero.
0BC1: C2AF0B  	        JP      NZ,L0BAF                ; loop back if not.
              	
0BC4: FB      	        EI                              ; Enable Interrupts.
              	
0BC5: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
0BC7: E7      	L0BC7:  RST     20H                     ; Error 3
0BC8: 03      	        DEFB    $03                     ; BREAK pressed.
              	
              	; ---------------------------
              	; THE 'BEEP DELAY' SUBROUTINE
              	; ---------------------------
              	; called twice from the above BEEP routine.
              	
0BC9: 45      	L0BC9:  LD      B,L                     ; transfer the value of
0BCA: 4C      	        LD      C,H                     ; the HL register to BC.
              	
0BCB: 10FE    	L0BCB:  DJNZ    L0BCB                   ; self-loop for B times
              	
0BCD: 05      	        DEC     B                       ; set B to $FF for future loops
0BCE: 0D      	        DEC     C                       ; decrement outer loop counter C
0BCF: C2CB0B  	        JP      NZ,L0BCB                ; JUMP back if not zero           (10)
              	
0BD2: C9      	        RET                             ; return
              	
              	; ----------------
              	; THE 'INKEY' WORD
              	; ----------------
              	; ( -- ASCII code)
              	; Reads the keyboard. Puts ASCII value on the stack if a key is pressed, 0
              	; otherwise.
              	
              	
0BD3: 494E4B45	L0BD3:  DEFM    "INKE"                  ; 'name field'
0BD7: D9      	        DEFB    'Y' + $80
              	
0BD8: 970B    	        DEFW    L0B97                   ; 'link field'
              	
0BDA: 05      	L0BDA:  DEFB    $05                     ; 'name length field'
              	
0BDB: DD0B    	L0BDB:  DEFW    L0BDD                   ; 'code field'
              	
              	; ---
              	
0BDD: CD3603  	L0BDD:  CALL    L0336                   ; routine KEY-SCAN
              	
0BE0: 5F      	        LD      E,A                     ; transfer the key code to E.
0BE1: 1600    	        LD      D,$00                   ; make high order byte zero.
              	
0BE3: D7      	        RST     10H                     ; stack Data Word DE
              	
0BE4: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------
              	; THE 'IN' WORD
              	; -------------
              	; (port address -- data byte)
              	; Inputs a data byte from an I/O port.
              	
0BE6: 49      	L0BE6:  DEFB    'I'                     ; 'name field'
0BE7: CE      	        DEFB    'N' + $80
              	
0BE8: DA0B    	        DEFW    L0BDA                   ; 'link field'
              	
0BEA: 02      	L0BEA:  DEFB    $02                     ; 'name length field'
              	
0BEB: ED0B    	        DEFW    L0BED                   ; 'code field'
              	
              	; ---
              	
0BED: CD4E08  	L0BED:  CALL    L084E                   ; stk_to_bc
0BF0: 1600    	        LD      D,$00                   ; make high order byte zero.
              	
0BF2: ED58    	        IN      E,(C)                   ; read the port to E.
              	
0BF4: D7      	        RST     10H                     ; stack Data Word DE.
              	
0BF5: FDE9    	L0BF5:  JP      (IY)                    ; to 'next'.
              	
              	; --------------
              	; THE 'OUT' WORD
              	; --------------
              	; (data byte, port address -- )
              	; Outputs a data byte to an I/O port.
              	
0BF7: 4F55    	L0BF7:  DEFM    "OU"                    ; 'name field'
0BF9: D4      	        DEFB    'T' + $80
              	
0BFA: EA0B    	        DEFW    L0BEA                   ; 'link field'
              	
0BFC: 03      	L0BFC:  DEFB    $03                     ; 'name length field'
              	
0BFD: FF0B    	        DEFW    L0BFF                   ; 'code field'
              	
              	; ---
              	
0BFF: CD4E08  	L0BFF:  CALL    L084E                   ; stk_to_bc
              	                                        ; all 16 bits are placed on the
              	                                        ; Z80A address bus.
0C02: DF      	        RST     18H                     ; pop word DE
              	
0C03: ED59    	        OUT     (C),E                   ; output byte to port address.
              	
0C05: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; --------------
              	; THE 'ABS' WORD
              	; --------------
              	; (n -- absolute value of n)
              	
0C07: 4142    	L0C07:  DEFM    "AB"                    ; 'name field'
0C09: D3      	        DEFB    'S' + $80
              	
0C0A: FC0B    	        DEFW    L0BFC                   ; 'link field'
              	
0C0C: 03      	L0C0C:  DEFB    $03                     ; 'name length field'
              	
0C0D: C30E    	L0C0D:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0C0F: 6B08    	        DEFW    L086B                   ; DUP
0C11: 940D    	        DEFW    L0D94                   ; pos
0C13: B604    	        DEFW    L04B6                   ; EXIT
              	
              	; -------------
              	; THE '0=' WORD
              	; -------------
              	; (n -- flag)
              	; flag is 1 in n = 0.
              	
0C15: 30      	L0C15:  DEFB    '0'                     ; 'name field'
0C16: BD      	        DEFB    '=' + $80
              	
0C17: 0C0C    	        DEFW    L0C0C                   ; 'link field'
              	
0C19: 02      	L0C19:  DEFB    $02                     ; 'name length field'
              	
0C1A: 1C0C    	L0C1A:  DEFW    L0C1C                   ; 'code field'
              	
              	; ---
              	
0C1C: DF      	L0C1C:  RST     18H                     ; pop word DE
0C1D: 7A      	        LD      A,D                     ; test for
0C1E: B3      	        OR      E                       ; zero
0C1F: FE01    	        CP      $01                     ; sets carry if word is zero
              	
              	; -> zero_or_one
              	
0C21: 3E00    	L0C21:  LD      A,$00                   ; make accumulator zero.
0C23: 57      	        LD      D,A                     ; set D to zero
0C24: 17      	        RLA                             ; pick up carry (1/0)
0C25: 5F      	        LD      E,A                     ; set DE to one or zero
0C26: D7      	        RST     10H                     ; push word DE
              	
0C27: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------
              	; THE '0<' WORD
              	; -------------
              	; (n -- flag)
              	; flag is 1 if n is negative
              	
0C29: 30      	L0C29:  DEFB    '0'                     ; 'name field'
0C2A: BC      	        DEFB    '<' + $80
              	
0C2B: 190C    	        DEFW    L0C19                   ; 'link field'
              	
0C2D: 02      	L0C2D:  DEFB    $02                     ; 'name length field'
              	
0C2E: 300C    	L0C2E:  DEFW    L0C30                   ; 'code field'
              	
              	; ---
              	
0C30: DF      	L0C30:  RST     18H                     ; pop word DE
0C31: CB12    	        RL      D                       ; test the sign bit.
              	
0C33: 18EC    	        JR      L0C21                   ; back to above routine to stack the
              	                                        ; carry as one (true) or zero (false).
              	
              	; -------------
              	; THE '0>' WORD
              	; -------------
              	; (n -- flag)
              	; flag is 1 if n is positive.
              	
              	
0C35: 30      	L0C35:  DEFB    '0'                     ; 'name field'
0C36: BE      	        DEFB    '>' + $80
              	
0C37: 2D0C    	        DEFW    L0C2D                   ; 'link field'
              	
0C39: 02      	L0C39:  DEFB    $02                     ; 'name length field'
              	
0C3A: 3C0C    	L0C3A:  DEFW    L0C3C                   ; 'code field'
              	
              	; ---
              	
0C3C: DF      	L0C3C:  RST     18H                     ; pop word DE
0C3D: 7A      	        LD      A,D
0C3E: B3      	        OR      E
0C3F: 28E0    	        JR      Z,L0C21                 ; to stack word one or zero
              	
0C41: CB12    	        RL      D
0C43: 3F      	        CCF
0C44: 18DB    	        JR      L0C21                   ; to stack word one or zero
              	
              	; ------------
              	; THE '=' WORD
              	; ------------
              	; (n1, n2 -- flag)
              	; flag is 1 if n1=n2.
              	
0C46: BD      	L0C46:  DEFB    '=' + $80               ; 'name field'
              	
0C47: 390C    	        DEFW    L0C39                   ; 'link field'
              	
0C49: 01      	L0C49:  DEFB    $01                     ; 'name length field'
              	
0C4A: C30E    	L0C4A:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0C4C: E10D    	L0C4C:  DEFW    L0DE1                   ; -
0C4E: 1A0C    	        DEFW    L0C1A                   ; 0=
0C50: B604    	        DEFW    L04B6                   ; exit
              	
              	; ------------
              	; THE '>' WORD
              	; ------------
              	; (n1, n2 -- flag)
              	; flag is 1 if n1>n2.
              	
0C52: BE      	L0C52:  DEFB    '>' + $80               ; 'name field'
              	
0C53: 490C    	        DEFW    L0C49                   ; 'link field'
              	
0C55: 01      	L0C55:  DEFB    $01                     ; 'name length field'
              	
0C56: 580C    	L0C56:  DEFW    L0C58                   ; 'code field'
              	
              	; ---
              	
0C58: DF      	L0C58:  RST     18H                     ; pop word DE
0C59: D5      	        PUSH    DE                      ;
0C5A: DF      	        RST     18H                     ; pop word DE
0C5B: E1      	        POP     HL                      ;
              	
0C5C: CD990C  	        CALL    L0C99                   ;
              	
0C5F: 18C0    	        JR      L0C21                   ; to stack word one or zero
              	
              	; ------------
              	; THE '<' WORD
              	; ------------
              	; (n1, n2 -- flag)
              	; flag is 1 if n1 < n2.
              	
0C61: BC      	L0C61:  DEFB    '<' + $80               ; 'name field'
              	
0C62: 550C    	        DEFW    L0C55                   ; 'link field'
              	
0C64: 01      	L0C64:  DEFB    $01                     ; 'name length field'
              	
0C65: C30E    	L0C65:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0C67: 8508    	        DEFW    L0885                   ; swap
0C69: 560C    	        DEFW    L0C56                   ; >
0C6B: B604    	        DEFW    L04B6                   ; exit
              	
              	
              	; -------------
              	; THE 'U<' WORD
              	; -------------
              	; (un1, un2 -- flag)
              	; The flag is 1 if, of the two unsigned single length integers, un1 is less
              	; than un2.
              	
0C6D: 55      	L0C6D:  DEFB    'U'                     ; 'name field'
0C6E: BC      	        DEFB    '<' + $80
              	
0C6F: 640C    	        DEFW    L0C64                   ; 'link field'
              	
0C71: 02      	L0C71:  DEFB    $02                     ; 'name length field'
              	
0C72: 740C    	L0C72:  DEFW    L0C74                   ; 'code field'
              	
              	; ---
              	
0C74: CD4E08  	L0C74:  CALL    L084E                   ; stk_to_bc
              	
0C77: DF      	L0C77:  RST     18H                     ; pop word DE
0C78: EB      	        EX      DE,HL
0C79: A7      	        AND     A
0C7A: ED42    	        SBC     HL,BC
0C7C: 18A3    	        JR      L0C21                   ; to stack word one or zero
              	
              	; -------------
              	; THE 'D<' WORD
              	; -------------
              	; (d1, d2 -- flag)
              	; flag is 1 if the signed double integer, d1 < d2.
              	
0C7E: 44      	L0C7E:  DEFB    'D'                     ; 'name field'
0C7F: BC      	        DEFB    '<' + $80
              	
0C80: 710C    	        DEFW    L0C71                   ; 'link field'
              	
0C82: 02      	L0C82:  DEFB    $02                     ; 'name length field'
              	
0C83: 850C    	L0C83:  DEFW    L0C85                   ; 'code field'
              	
              	; ---
              	
0C85: DF      	L0C85:  RST     18H                     ; pop word DE
0C86: D5      	        PUSH    DE
0C87: CD4E08  	        CALL    L084E                   ; stk_to_bc
0C8A: DF      	        RST     18H                     ; pop word DE
0C8B: E1      	        POP     HL
0C8C: A7      	        AND     A
0C8D: ED52    	        SBC     HL,DE
0C8F: 28E6    	        JR      Z,L0C77                 ;
              	
0C91: 19      	        ADD     HL,DE
0C92: EB      	        EX      DE,HL
              	
0C93: CD990C  	        CALL    L0C99                   ;
              	
0C96: DF      	        RST     18H                     ; pop word DE
0C97: 1888    	        JR      L0C21                   ; to stack word one or zero
              	
              	; ---
              	; THE 'sign?' SUBROUTINE
              	; ---
              	
0C99: 7C      	L0C99:  LD      A,H
0C9A: AA      	        XOR     D
0C9B: FAA00C  	        JP      M,L0CA0                 ;
              	
0C9E: ED52    	        SBC     HL,DE
              	
0CA0: CB14    	L0CA0:  RL      H
0CA2: C9      	        RET
              	
              	; -------------
              	; THE 'U*' WORD
              	; -------------
              	; (un1, un2 -- double length(un1 * un2))
              	; Multiplies two unsigned single length integers to give an unsigned
              	; double length product.
              	
0CA3: 55      	L0CA3:  DEFB    'U'                     ; 'name field'
0CA4: AA      	        DEFB    '*' + $80
              	
0CA5: 820C    	        DEFW    L0C82                   ; 'link field'
              	
0CA7: 02      	L0CA7:  DEFB    $02                     ; 'name length field'
              	
0CA8: AA0C    	L0CA8:  DEFW    L0CAA                   ; 'code field'
              	
              	; => mult
              	
0CAA: DF      	L0CAA:  RST     18H                     ; pop word DE
0CAB: CD4E08  	        CALL    L084E                   ; stk_to_bc
0CAE: 210000  	        LD      HL,$0000
0CB1: 3E10    	        LD      A,$10
0CB3: 29      	L0CB3:  ADD     HL,HL
0CB4: EB      	        EX      DE,HL
0CB5: ED6A    	        ADC     HL,HL
0CB7: EB      	        EX      DE,HL
0CB8: 3004    	        JR      NC,L0CBE                ;
              	
0CBA: 09      	        ADD     HL,BC
0CBB: 3001    	        JR      NC,L0CBE                ;
              	
0CBD: 13      	        INC     DE
              	
0CBE: 3D      	L0CBE:  DEC     A
0CBF: 20F2    	        JR      NZ,L0CB3                ;
              	
0CC1: EB      	        EX      DE,HL
0CC2: 182F    	        JR      L0CF3                   ;
              	
              	; ---
              	; The 'div?' Internal Word
              	; ---
              	
0CC4: C60C    	L0CC4:  DEFW    L0CC6
              	
0CC6: DF      	L0CC6:  RST     18H                     ; pop word DE
0CC7: D9      	        EXX
0CC8: DF      	        RST     18H                     ; pop word DE
0CC9: D5      	        PUSH    DE
0CCA: DF      	        RST     18H                     ; pop word DE
0CCB: E1      	        POP     HL
0CCC: 7C      	        LD      A,H
0CCD: B5      	        OR      L
0CCE: 3E21    	        LD      A,$21                   ; 33
0CD0: 2003    	        JR      NZ,L0CD5                ;
              	
0CD2: EB      	        EX      DE,HL
0CD3: 3E11    	        LD      A,$11                   ; 17
              	
0CD5: D9      	L0CD5:  EXX
0CD6: 47      	        LD      B,A
0CD7: AF      	        XOR     A
0CD8: 67      	        LD      H,A
0CD9: 6F      	        LD      L,A
0CDA: 4F      	        LD      C,A
              	
0CDB: ED6A    	L0CDB:  ADC     HL,HL
0CDD: 9F      	        SBC     A,A
0CDE: A7      	        AND     A
0CDF: ED52    	        SBC     HL,DE
0CE1: 99      	        SBC     A,C
0CE2: 3001    	        JR      NC,L0CE5                ;
0CE4: 19      	        ADD     HL,DE
              	
0CE5: 3F      	L0CE5:  CCF
0CE6: D9      	        EXX
0CE7: EB      	        EX      DE,HL
0CE8: ED6A    	        ADC     HL,HL
0CEA: EB      	        EX      DE,HL
0CEB: ED6A    	        ADC     HL,HL
0CED: D9      	        EXX
0CEE: 10EB    	        DJNZ    L0CDB                   ;
              	
0CF0: EB      	        EX      DE,HL
0CF1: D7      	        RST     10H                     ; push word DE
0CF2: D9      	        EXX
              	
0CF3: E5      	L0CF3:  PUSH    HL
0CF4: D7      	        RST     10H                     ; push word DE
0CF5: D1      	        POP     DE
0CF6: D7      	        RST     10H                     ; push word DE
              	
0CF7: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------
              	; THE '/MOD' WORD
              	; ---------------
              	; (n1, n2 -- remainder, quotient of n1/n2)
              	; The remainder has the same sign as the dividend n1.
              	
0CF9: 2F4D4F  	L0CF9:  DEFM    "/MO"                   ; 'name field'
0CFC: C4      	        DEFB    'D' + $80
              	
0CFD: A70C    	        DEFW    L0CA7                   ; 'link field'
              	
0CFF: 04      	L0CFF:  DEFB    $04                     ; 'name length field'
              	
0D00: C30E    	L0D00:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0D02: 8508    	L0D02:  DEFW    L0885                   ; swap
0D04: D208    	        DEFW    L08D2                   ; >R
0D06: E912    	        DEFW    L12E9                   ; I
0D08: 0D0C    	        DEFW    L0C0D                   ; abs
0D0A: 4B10    	        DEFW    L104B                   ; stk_data
0D0C: 00      	        DEFB    $00                     ; zero
              	; ->
0D0D: FF08    	L0D0D:  DEFW    L08FF                   ; rot
0D0F: 6B08    	        DEFW    L086B                   ; dup
0D11: E912    	        DEFW    L12E9                   ; I
0D13: 600E    	        DEFW    L0E60                   ; xor
0D15: D208    	        DEFW    L08D2                   ; >R
0D17: 0D0C    	        DEFW    L0C0D                   ; abs
0D19: 8C0D    	        DEFW    L0D8C                   ; U/MOD
0D1B: DF08    	        DEFW    L08DF                   ; >R
0D1D: 940D    	        DEFW    L0D94                   ; pos
0D1F: 8508    	        DEFW    L0885                   ; swap
0D21: DF08    	        DEFW    L08DF                   ; >R
0D23: 940D    	        DEFW    L0D94                   ; pos
0D25: 8508    	        DEFW    L0885                   ; swap
0D27: B604    	        DEFW    L04B6                   ; exit
              	
              	; ----------------
              	; THE '*/MOD' WORD
              	; ----------------
              	; (n1, n2, n3 -- remainder, quotient of (n1 * n2)/n3)
              	; As in */, n1 * n2 is held to double length.
              	
0D29: 2A2F4D4F	L0D29:  DEFM    "*/MO"                  ; 'name field'
0D2D: C4      	        DEFB    'D' + $80
              	
0D2E: FF0C    	        DEFW    L0CFF                   ; 'link field'
              	
0D30: 05      	L0D30:  DEFB    $05                     ; 'name length field'
              	
0D31: C30E    	L0D31:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0D33: FF08    	        DEFW    L08FF                   ; rot
0D35: D208    	        DEFW    L08D2                   ; >R
0D37: E912    	        DEFW    L12E9                   ; I
0D39: 0D0C    	        DEFW    L0C0D                   ; abs
0D3B: FF08    	        DEFW    L08FF                   ; rot
0D3D: 6B08    	        DEFW    L086B                   ; dup
0D3F: DF08    	        DEFW    L08DF                   ; >R
0D41: 600E    	        DEFW    L0E60                   ; xor
0D43: D208    	        DEFW    L08D2                   ; >R
0D45: 0D0C    	        DEFW    L0C0D                   ; abs
0D47: A80C    	        DEFW    L0CA8                   ; u*
0D49: 7612    	        DEFW    L1276                   ; branch
              	
0D4B: C1FF    	L0D4B:  DEFW    $FFC1                   ; back to L0D0D  (in /MOD)
              	
              	
              	
              	
              	; ------------
              	; THE '/' WORD
              	; ------------
              	; (n1, n2 -- n1/n2)
              	; Single length signed integer division.
              	
0D4D: AF      	L0D4D:  DEFB    '/' + $80               ; 'name field'
              	
0D4E: 300D    	        DEFW    L0D30                   ; 'link field'
              	
0D50: 01      	L0D50:  DEFB    $01                     ; 'name length field'
              	
0D51: C30E    	L0D51:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0D53: 000D    	L0D53:  DEFW    L0D00                   ; /MOD
0D55: 8508    	        DEFW    L0885                   ; swap
0D57: 7908    	        DEFW    L0879                   ; drop
0D59: B604    	        DEFW    L04B6                   ; exit
              	
              	; --------------
              	; THE 'MOD' WORD
              	; --------------
              	; (n1, n2 -- remainder n1/n2)
              	; The remainder has the same sign as the dividend.
              	
0D5B: 4D4F    	L0D5B:  DEFM    "MO"                    ; 'name field'
0D5D: C4      	        DEFB    'D' + $80
              	
0D5E: 500D    	        DEFW    L0D50                   ; 'link field'
              	
0D60: 03      	L0D60:  DEFB    $03                     ; 'name length field'
              	
0D61: C30E    	L0D61:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0D63: 000D    	        DEFW    L0D00                   ; /MOD
0D65: 7908    	        DEFW    L0879                   ; drop
0D67: B604    	        DEFW    L04B6                   ; exit
              	
              	
              	; ------------
              	; THE '*' WORD
              	; ------------
              	; (n1, n2 -- n1*n2)
              	
0D69: AA      	L0D69:  DEFB    '*' + $80               ; 'name field'
              	
0D6A: 600D    	        DEFW    L0D60                   ; 'link field'
              	
0D6C: 01      	L0D6C:  DEFB    $01                     ; 'name length field'
              	
0D6D: C30E    	        DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0D6F: A80C    	        DEFW    L0CA8                   ; u*
0D71: 7908    	        DEFW    L0879                   ; drop
0D73: B604    	        DEFW    L04B6                   ; exit
              	
              	
              	; -------------
              	; THE '*/' WORD
              	; -------------
              	; (n1, n2, n3 -- (n1*n2)/n3)
              	; The intermediate product n1*n2 is held to double length.
              	
0D75: 2A      	L0D75:  DEFB    '*'                     ; 'name field'
0D76: AF      	        DEFB    '/' + $80
              	
0D77: 6C0D    	        DEFW    L0D6C                   ; 'link field'
              	
0D79: 02      	L0D79:  DEFB    $02                     ; 'name length field'
              	
0D7A: C30E    	L0D7A:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0D7C: 310D    	        DEFW    L0D31                   ; */MOD
0D7E: 8508    	        DEFW    L0885                   ; swap
0D80: 7908    	        DEFW    L0879                   ; drop
0D82: B604    	        DEFW    L04B6                   ; exit
              	
              	; --------------
              	; THE 'U/MOD' WORD
              	; --------------
              	; (ud1, un2 -- un3, un4)
              	; In unsigned arithmetic throughout, divides the double length integer ud1
              	; by the single length integer un2 to give a single length remainder un3
              	; and a single length quotient un4.
              	
0D84: 552F4D4F	L0D84:  DEFM    "U/MO"                  ; 'name field'
0D88: C4      	        DEFB    'D' + $80
              	
0D89: 790D    	        DEFW    L0D79                   ; 'link field'
              	
0D8B: 05      	L0D8B:  DEFB    $05                     ; 'name length field'
              	
0D8C: C30E    	L0D8C:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0D8E: C40C    	L0D8E:  DEFW    L0CC4                   ; div?
0D90: 7908    	        DEFW    L0879                   ; drop
0D92: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---
              	
              	; make positive
              	
0D94: C30E    	L0D94:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0D96: 2E0C    	L0D96:  DEFW    L0C2E                   ; 0<
0D98: 8312    	        DEFW    L1283                   ; ?branch               (if false)
0D9A: 0300    	L0D9A:  DEFW    $0003                   ; to L0D9E
              	
0D9C: A90D    	        DEFW    L0DA9                   ; negate
              	
0D9E: B604    	L0D9E:  DEFW    L04B6                   ; exit
              	
              	; -----------------
              	; THE 'NEGATE' WORD
              	; -----------------
              	; (n -- -n)
              	
              	
0DA0: 4E454741	L0DA0:  DEFM    "NEGAT"                 ; 'name field'
0DA4: 54      	
0DA5: C5      	        DEFB    'E' +$80
              	
0DA6: 8B0D    	        DEFW    L0D8B                   ; 'link field'
              	
0DA8: 06      	L0DA8:  DEFB    $06                     ; 'name length field'
              	
0DA9: AB0D    	L0DA9:  DEFW    L0DAB                   ; 'code field'
              	
              	; ---
              	
0DAB: 010200  	L0DAB:  LD      BC,$0002                ;
0DAE: 180F    	        JR      L0DBF                   ;
              	
              	; ------------------
              	; THE 'DNEGATE' WORD
              	; ------------------
              	; (d -- -d)
              	; Double length integer negation.
              	
0DB0: 444E4547	L0DB0:  DEFM    "DNEGAT"                ; 'name field'
0DB4: 4154    	
0DB6: C5      	        DEFB    'E' +$80
              	
0DB7: A80D    	        DEFW    L0DA8                   ; 'link field'
              	
0DB9: 07      	L0DB9:  DEFB    $07                     ; 'name length field'
              	
0DBA: BC0D    	L0DBA:  DEFW    L0DBC                   ; 'code field'
              	
              	; ---
              	
0DBC: 010400  	L0DBC:  LD      BC,$0004
              	
              	; NEGATE joins here with bc=2
              	
0DBF: 2A3B3C  	L0DBF:  LD      HL,($3C3B)              ; SPARE
0DC2: A7      	        AND     A
0DC3: ED42    	        SBC     HL,BC
              	
0DC5: 78      	L0DC5:  LD      A,B
0DC6: 9E      	        SBC     A,(HL)
0DC7: 77      	        LD      (HL),A
0DC8: 23      	        INC     HL
0DC9: 0D      	        DEC     C
0DCA: 20F9    	        JR      NZ,L0DC5                ;
              	
0DCC: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ------------
              	; THE '+' WORD
              	; ------------
              	; (n1, n2 -- n1 + n2)
              	
0DCE: AB      	L0DCE:  DEFB    '+' + $80               ; 'name field'
              	
0DCF: B90D    	        DEFW    L0DB9                   ; 'link field'
              	
0DD1: 01      	L0DD1:  DEFB    $01                     ; 'name length field'
              	
0DD2: D40D    	L0DD2:  DEFW    L0DD4                   ; 'code field'
              	
              	; ---
              	
0DD4: DF      	L0DD4:  RST     18H                     ; pop word DE
0DD5: D5      	        PUSH    DE                      ; save on machine stack
0DD6: DF      	        RST     18H                     ; pop word DE
0DD7: E1      	        POP     HL                      ; first number to HL
              	
0DD8: 19      	        ADD     HL,DE                   ; the actual addition
              	
0DD9: EB      	        EX      DE,HL                   ; result to DE
0DDA: D7      	        RST     10H                     ; push word DE
              	
0DDB: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ------------
              	; THE '-' WORD
              	; ------------
              	; (n1, n2 -- n1-n2)
              	; flip the sign and do a plus.
              	
0DDD: AD      	L0DDD:  DEFB    '-' + $80               ; 'name field'
              	
0DDE: D10D    	        DEFW    L0DD1                   ; 'link field'
              	
0DE0: 01      	L0DE0:  DEFB    $01                     ; 'name length field'
              	
0DE1: C30E    	L0DE1:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0DE3: A90D    	L0DE3:  DEFW    L0DA9                   ; negate
0DE5: D20D    	        DEFW    L0DD2                   ; +
0DE7: B604    	        DEFW    L04B6                   ; exit
              	
              	; -------------
              	; THE 'D+' WORD
              	; -------------
              	; (d1, d2 -- d1 + d2)
              	; double length integer addition.
              	
0DE9: 44      	L0DE9:  DEFB    'D'                     ; 'name field'
0DEA: AB      	        DEFB    '+' + $80
              	
0DEB: E00D    	        DEFW    L0DE0                   ; 'link field'
              	
0DED: 02      	L0DED:  DEFB    $02                     ; 'name length field'
              	
0DEE: F00D    	L0DEE:  DEFW    L0DF0                   ; 'code field'
              	
              	; ---
              	
0DF0: DF      	L0DF0:  RST     18H                     ; pop word DE
              	
0DF1: D5      	        PUSH    DE
0DF2: CD4E08  	        CALL    L084E                   ; stk_to_bc
0DF5: DF      	        RST     18H                     ; pop word DE
0DF6: D5      	        PUSH    DE
0DF7: DF      	        RST     18H                     ; pop word DE
0DF8: EB      	        EX      DE,HL
0DF9: 09      	        ADD     HL,BC
0DFA: EB      	        EX      DE,HL
0DFB: D7      	        RST     10H                     ; push word DE
0DFC: C1      	        POP     BC
0DFD: E1      	        POP     HL
0DFE: ED4A    	        ADC     HL,BC
0E00: EB      	        EX      DE,HL
0E01: D7      	        RST     10H                     ; push word DE
              	
0E02: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------
              	; THE '1+' WORD
              	; -------------
              	; (n -- n+1)
              	
0E04: 31      	L0E04:  DEFB    '1'                     ; 'name field'
0E05: AB      	        DEFB    '+' + $80
              	
0E06: ED0D    	        DEFW    L0DED                   ; 'link field'
              	
0E08: 02      	L0E08:  DEFB    $02                     ; 'name length field'
              	
0E09: 0B0E    	L0E09:  DEFW    L0E0B                   ; 'code field'
              	
              	; ---
              	
0E0B: DF      	L0E0B:  RST     18H                     ; get word 'n' in DE
0E0C: 1809    	        JR      L0E17                   ; forward to increment and stack
              	
              	; -------------
              	; THE '2+' WORD
              	; -------------
              	; (n -- n+2)
              	
0E0E: 32      	L0E0E:  DEFB    '2'                     ; 'name field'
0E0F: AB      	        DEFB    '+' + $80
              	
0E10: 080E    	        DEFW    L0E08                   ; 'link field'
              	
0E12: 02      	L0E12:  DEFB    $02                     ; 'name length field'
              	
0E13: 150E    	L0E13:  DEFW    L0E15                   ; 'code field'
              	
              	; ---
              	
0E15: DF      	L0E15:  RST     18H                     ; get word 'n' in DE.
0E16: 13      	        INC     DE                      ; increment n                   (4)
              	; ->
0E17: 13      	L0E17:  INC     DE                      ; increment n                   (4)
0E18: 1814    	        JR      L0E2E                   ; forward to push word DE and exit
              	
              	; -------------
              	; THE '1-' WORD
              	; -------------
              	; (n -- n-1)
              	
              	
0E1A: 31      	L0E1A:  DEFB    '1'                     ; 'name field'
0E1B: AD      	        DEFB    '-' + $80
              	
0E1C: 120E    	        DEFW    L0E12                   ; 'link field'
              	
0E1E: 02      	L0E1E:  DEFB    $02                     ; 'name length field'
              	
0E1F: 210E    	L0E1F:  DEFW    L0E21                   ; 'code field'
              	
              	; ---
              	
0E21: DF      	L0E21:  RST     18H                     ;
0E22: 1809    	        JR      L0E2D                   ;
              	
              	; -------------
              	; THE '2-' WORD
              	; -------------
              	; (n -- n-2)
              	
              	
0E24: 32      	L0E24:  DEFB    '2'                     ; 'name field'
0E25: AD      	L0E25:  DEFB    '-' + $80
              	
0E26: 1E0E    	L0E26:  DEFW    L0E1E                   ; 'link field'
              	
0E28: 02      	L0E28:  DEFB    $02                     ; 'name length field'
              	
0E29: 2B0E    	L0E29:  DEFW    L0E2B                   ; 'code field'
              	
              	; ---
              	
              	;
0E2B: DF      	L0E2B:  RST     18H
0E2C: 1B      	        DEC     DE
              	
              	; ->
0E2D: 1B      	L0E2D:  DEC     DE
              	
              	; ->
0E2E: D7      	L0E2E:  RST     10H                     ; push word DE
              	
0E2F: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------
              	; THE 'OR' WORD
              	; -------------
              	; (n1, n2 -- n1 OR n2)
              	; Bitwise Boolean operation.
              	
              	
0E31: 4F      	L0E31:  DEFB    'O'                     ; 'name field'
0E32: D2      	        DEFB    'R' + $80
              	
0E33: 280E    	        DEFW    L0E28                   ; 'link field'
              	
0E35: 02      	L0E35:  DEFB    $02                     ; 'name length field'
              	
0E36: 380E    	L0E36:  DEFW    L0E38                   ; 'code field'
              	
              	; ---
              	
0E38: DF      	L0E38:  RST     18H                     ; pop word DE
0E39: CD4E08  	        CALL    L084E                   ; stk_to_bc
              	
0E3C: 7B      	        LD      A,E                     ;
0E3D: B1      	        OR      C                       ; OR low order bytes
0E3E: 5F      	        LD      E,A                     ;
              	
0E3F: 7A      	        LD      A,D                     ;
0E40: B0      	        OR      B                       ; OR high order bytes
0E41: 57      	        LD      D,A                     ;
              	
0E42: D7      	        RST     10H                     ; push word DE
              	
0E43: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; --------------
              	; THE 'AND' WORD
              	; --------------
              	; (n1, n2 -- n1 AND n2)
              	; Bitwise Boolean operation.
              	
              	
0E45: 414E    	L0E45:  DEFM    "AN"                    ; 'name field'
0E47: C4      	        DEFB    'D' + $80
              	
0E48: 350E    	        DEFW    L0E35                   ; 'link field'
              	
0E4A: 03      	L0E4A:  DEFB    $03                     ; 'name length field'
              	
0E4B: 4D0E    	        DEFW    L0E4D                   ; 'code field'
              	
              	; ---
              	
0E4D: DF      	L0E4D:  RST     18H
0E4E: CD4E08  	        CALL    L084E                   ; stk_to_bc
              	
0E51: 7B      	        LD      A,E                     ;
0E52: A1      	        AND     C                       ;
0E53: 5F      	        LD      E,A                     ;
              	
0E54: 7A      	        LD      A,D                     ;
0E55: A0      	        AND     B                       ;
0E56: 57      	        LD      D,A                     ;
              	
0E57: D7      	        RST     10H                     ; push word DE
0E58: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; --------------
              	; THE 'XOR' WORD
              	; --------------
              	; (n1, n2 -- n1 XOR n2)
              	; Bitwise Boolean XOR (exclusive or)
              	
0E5A: 584F    	L0E5A:  DEFM    "XO"                    ; 'name field'
0E5C: D2      	        DEFB    'R' + $80
              	
0E5D: 4A0E    	        DEFW    L0E4A                   ; 'link field'
              	
0E5F: 03      	L0E5F:  DEFB    $03                     ; 'name length field'
              	
0E60: 620E    	L0E60:  DEFW    L0E62                   ; 'code field'
              	
              	; ---
              	
0E62: DF      	L0E62:  RST     18H
0E63: CD4E08  	        CALL    L084E                   ; stk_to_bc
              	
0E66: 7B      	        LD      A,E                     ;
0E67: A9      	        XOR     C                       ;
0E68: 5F      	        LD      E,A                     ;
              	
0E69: 7A      	        LD      A,D                     ;
0E6A: A8      	        XOR     B                       ;
0E6B: 57      	        LD      D,A                     ;
              	
0E6C: D7      	        RST     10H                     ; push word DE
0E6D: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; --------------
              	; THE 'MAX' WORD
              	; --------------
              	; (n1, n2 -- max (n1, n2))
              	; Calculates the larger of two numbers.
              	
0E6F: 4D41    	L0E72:  DEFM    "MA"                    ; 'name field'
0E71: D8      	        DEFB    'X' + $80
              	
0E72: 5F0E    	        DEFW    L0E5F                   ; 'link field'
              	
0E74: 03      	L0E74:  DEFB    $03                     ; 'name length field'
              	
0E75: C30E    	L0E75:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0E77: 1209    	L0E77:  DEFW    L0912                   ; over
0E79: 1209    	        DEFW    L0912                   ; over
0E7B: 650C    	        DEFW    L0C65                   ; <
0E7D: 7112    	        DEFW    L1271                   ; branch
0E7F: 0F00    	L0E7F:  DEFW    $000F                   ; forward to L0E8F
              	
              	; --------------
              	; THE 'MIN' WORD
              	; --------------
              	; (n1, n2 -- min (n1, n2))
              	; Calculates the smaller of two numbers.
              	
0E81: 4D49    	L0E81:  DEFM    "MI"                    ; 'name field'
0E83: CE      	        DEFB    'N' + $80
              	
0E84: 740E    	        DEFW    L0E74                   ; 'link field'
              	
0E86: 03      	L0E86:  DEFB    $03                     ; 'name length field'
              	
0E87: C30E    	        DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0E89: 1209    	L0E89:  DEFW    L0912                   ; over
0E8B: 1209    	        DEFW    L0912                   ; over
0E8D: 560C    	        DEFW    L0C56                   ; >
              	; ->
0E8F: 8312    	L0E8F:  DEFW    L1283                   ; ?branch
0E91: 0300    	L0E91:  DEFW    $0003                   ; forward to L0995
              	
0E93: 8508    	        DEFW    L0885                   ; swap
              	
0E95: 7908    	L0995:  DEFW    L0879                   ; drop
0E97: B604    	        DEFW    L04B6                   ; exit
              	
              	; ------------------
              	; THE 'DECIMAL' WORD
              	; ------------------
              	; (  --  )
              	; Sets the system number base to ten.
              	
0E99: 44454349	L0E99:  DEFM    "DECIMA"                ; 'name field'
0E9D: 4D41    	
0E9F: CC      	        DEFB    'L' + $80
              	
0EA0: 860E    	        DEFW    L0E86                   ; 'link field'
              	
0EA2: 07      	L0EA2:  DEFB    $07                     ; 'name length field'
              	
0EA3: A50E    	        DEFW    L0EA5                   ; 'code field'
              	
              	; ---
              	
0EA5: DD363F0A	L0EA5:  LD      (IX+$3F),$0A            ; update system variable BASE to 10
              	
0EA9: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ------------
              	; THE ':' WORD
              	; ------------
              	; Introduces colon definitions.
              	
0EAB: BA      	L0EAB:  DEFB    ':' + $80               ; 'name field'
              	
0EAC: A20E    	        DEFW    L0EA2                   ; 'link field'
              	
0EAE: 01      	L0EAE:  DEFB    $01                     ; 'name length field'
              	
0EAF: 8510    	L0EAF:  DEFW    L1085                   ; 'code field' - create and enclose
              	
              	; ---
              	
0EB1: C30E    	L0EB1:  DEFW    L0EC3                   ; do_colon
              	
0EB3: 4B10    	        DEFW    L104B                   ; stk_data
0EB5: 0A      	        DEFB    $0A                     ; ten                   marker byte?
              	; ->
0EB6: 0E1A    	L0EB6:  DEFW    L1A0E                   ; end_forth
              	
0EB8: 213E3C  	L0EB8:  LD      HL,$3C3E                ; FLAGS
              	
0EBB: 7E      	        LD      A,(HL)                  ; update bits 6 and 2.
0EBC: F644    	        OR      $44                     ; signal in compile mode, definition
              	                                        ; incomplete.
0EBE: 77      	        LD      (HL),A                  ; update FLAGS.
              	
0EBF: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
0EC1: E9      	x0EC1   DEFB    $E9                     ;;
0EC2: FF      	x0Ec2   DEFB    $FF                     ;; 0ec2 + ffe9 =  0eab = ':'
              	
              	; -------------------------------
              	; THE 'ENTER' or 'DOCOLON' action
              	; -------------------------------
              	;
              	
0EC3: EB      	L0EC3:  EX      DE,HL                   ;
0EC4: C3BA04  	        JP      L04BA                   ;
              	
              	
              	; -----------------
              	; THE 'CREATE' WORD
              	; -----------------
              	; CREATE name
              	; (  --  )
              	; Defines a new word with a header and an empty parameter field.
              	; When executed, the new word stacks its parameter field address.
              	
0EC7: 43524541	L0EC7:  DEFM    "CREAT"                 ; 'name field'
0ECB: 54      	
0ECC: C5      	        DEFB    'E' + $80
              	
0ECD: AE0E    	        DEFW    L0EAE                   ; 'link field'
              	
0ECF: 06      	L0ECF:  DEFB    $06                     ; 'name length field'
              	
0ED0: C30E    	L0ED0:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0ED2: 4B10    	L0ED2:  DEFW    L104B                   ; stk_data
0ED4: 20      	        DEFB    $20                     ; a space               delimiter
0ED5: AB05    	        DEFW    L05AB                   ; word to pad
0ED7: FB0E    	        DEFW    L0EFB                   ; get-name              in dict
0ED9: 8806    	        DEFW    L0688                   ; stk-zero              link
0EDB: 4E0F    	        DEFW    L0F4E                   ; ,
0EDD: 8004    	        DEFW    L0480                   ; current
0EDF: B308    	        DEFW    L08B3                   ; @
0EE1: 6B08    	        DEFW    L086B                   ; dup
0EE3: B308    	        DEFW    L08B3                   ; @
0EE5: 4E0F    	        DEFW    L0F4E                   ; ,
0EE7: 6004    	        DEFW    L0460                   ; here
0EE9: 8508    	        DEFW    L0885                   ; swap
0EEB: C108    	        DEFW    L08C1                   ; !
0EED: 9904    	        DEFW    L0499                   ; pad
0EEF: 9608    	        DEFW    L0896                   ; C@            fetch 1 byte
0EF1: 5F0F    	        DEFW    L0F5F                   ; C,
0EF3: 1110    	        DEFW    L1011                   ; stack next word
0EF5: EC0F    	        DEFW    $0FEC                   ; ???
0EF7: 4E0F    	        DEFW    L0F4E                   ; ,
0EF9: B604    	L0EF9:  DEFW    L04B6                   ; exit
              	
              	; ----------------------------
              	; The 'get_name' Internal Word
              	; ----------------------------
              	; Used only by the above CREATE thread.
              	
0EFB: FD0E    	L0EFB:  DEFW    L0EFD                   ; headerless 'code field'
              	
              	; ---
              	
0EFD: CD2E0F  	L0EFD:  CALL    L0F2E                   ; blank stack
              	
0F00: DF      	        RST     18H                     ; pop word DE
              	
0F01: 1A      	        LD      A,(DE)
0F02: 3D      	        DEC     A                       ; zero becomes $FF
0F03: FE3F    	        CP      $3F                     ; max length is 64
0F05: 3802    	        JR      C,L0F09                 ; forward if n range 1 - 64.
              	
0F07: E7      	        RST     20H                     ; Error 6
0F08: 06      	        DEFB    $06                     ; Name of new word too short or long.
              	
              	; ---
              	
0F09: C608    	L0F09:  ADD     A,$08                   ; allow for prev/len/addr 3 missing
              	
0F0B: 4F      	        LD      C,A                     ;
0F0C: 0600    	        LD      B,$00                   ; length to BC
              	
0F0E: CD8C0F  	L0F0E:  CALL    L0F8C                   ; check free memory.
              	
0F11: 1A      	x0f11   LD      A,(DE)                  ; true length to A
0F12: 4F      	        LD      C,A                     ; and BC again
              	
0F13: 2A373C  	        LD      HL,($3C37)              ; STKBOT
              	
0F16: D5      	        PUSH    DE                      ;
0F17: CD9E0F  	        CALL    L0F9E                   ; routine MAKE ROOM
0F1A: D1      	        POP     DE                      ;
              	
0F1B: 1A      	        LD      A,(DE)                  ; length of word in pad
0F1C: 47      	        LD      B,A                     ; transfer to counter.
              	
0F1D: 13      	L0F1D:  INC     DE                      ; increase source
0F1E: 1A      	        LD      A,(DE)                  ; fetch character
              	
0F1F: CD0708  	        CALL    L0807                   ; to_upper makes uppercase.
              	
0F22: 77      	        LD      (HL),A                  ; store in dictionary
0F23: 23      	        INC     HL                      ; increase destination
0F24: 10F7    	        DJNZ    L0F1D                   ; loop back for all letters.
              	
0F26: 22393C  	        LD      ($3C39),HL              ; store this location in SPARE
0F29: 2B      	        DEC     HL                      ; step back to last letter of word.
0F2A: CBFE    	        SET     7,(HL)                  ; and 'invert' it.
0F2C: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
              	
0F2E: DDCB3E56	L0F2E:  BIT     2,(IX+$3E)              ; test FLAGS incomplete definition ?
0F32: 2802    	        JR      Z,L0F36                 ; forward if not.
              	
0F34: E7      	        RST     20H                     ; Error 12
0F35: 0C      	        DEFB    $0C                     ; Incomplete definition in dictionary.
              	
              	; ---
              	
0F36: 2A373C  	L0F36:  LD      HL,($3C37)              ; fetch STKBOT
0F39: ED5B393C	        LD      DE,($3C39)              ; fetch SPARE
              	
0F3D: AF      	        XOR     A                       ; clear accumulator and carry flag
              	
0F3E: ED52    	        SBC     HL,DE                   ; subtract
              	
0F40: EB      	        EX      DE,HL                   ;
0F41: 73      	        LD      (HL),E                  ; place low byte at next STACK slot.
0F42: 23      	        INC     HL                      ;
0F43: 72      	        LD      (HL),D                  ; place high byte
0F44: 67      	        LD      H,A                     ; make HL zero
0F45: 6F      	        LD      L,A                     ;
0F46: 22393C  	        LD      ($3C39),HL              ; update system variable SPARE to zero
              	
0F49: C9      	        RET                             ; return
              	
              	; ---------------------
              	
              	; ------------
              	; THE ',' WORD
              	; ------------
              	; ( n --   )
              	; Encloses the single length integer in the dictionary.
              	
0F4A: AC      	L0F4A:  DEFB    ',' + $80               ; 'name field'
              	
0F4B: CF0E    	        DEFW    L0ECF                   ; 'link field'
              	
0F4D: 01      	L0F4D:  DEFB    $01                     ; 'name length field'
              	
0F4E: C30E    	L0F4E:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0F50: 830F    	L0F50:  DEFW    L0F83                   ; allot2
              	
0F52: 6004    	        DEFW    L0460                   ; here
0F54: 290E    	        DEFW    L0E29                   ; 2-
0F56: C108    	        DEFW    L08C1                   ; !
0F58: B604    	        DEFW    L04B6                   ; exit
              	
              	
              	; -------------
              	; THE 'C,' WORD
              	; -------------
              	; ( n --   )
              	; Encloses the less significant byte of n in the dictionary.
              	
0F5A: 43      	L0F5A:  DEFB    'C'                     ; 'name field'
0F5B: AC      	        DEFB    ',' + $80
              	
0F5C: 4D0F    	        DEFW    L0F4D                   ; 'link field'
              	
0F5E: 02      	L0F5E:  DEFB    $02                     ; 'name length field'
              	
0F5F: C30E    	L0F5F:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
0F61: 4B10    	L0F61:  DEFW    L104B                   ; stk-data
0F63: 01      	        DEFB    $01                     ; one
0F64: 760F    	        DEFW    L0F76                   ; allot
              	
0F66: 6004    	x0f66   DEFW    L0460                   ; here
0F68: 1F0E    	        DEFW    L0E1F                   ; 1-
0F6A: A508    	        DEFW    L08A5                   ; C!
0F6C: B604    	        DEFW    L04B6                   ; exit
              	
              	; ----------------
              	; THE 'ALLOT' WORD
              	; ----------------
              	; (n -- )
              	; Encloses n bytes in the dictionary, without initializing them.
              	
0F6E: 414C4C4F	L0F6E:  DEFM    "ALLO"                  ; 'name field'
0F72: D4      	        DEFB    'T' + $80
              	
0F73: 5E0F    	        DEFW    L0F5E                   ; 'link field'
              	
0F75: 05      	L0F75:  DEFB    $05                     ; 'name length field'
              	
0F76: 780F    	L0F76:  DEFW    L0F78                   ; 'code field'
              	
              	; ---
              	
0F78: CD4E08  	L0F78:  CALL    L084E                   ; stk_to_bc
0F7B: 2A373C  	        LD      HL,($3C37)              ; STKBOT
0F7E: CD9E0F  	        CALL    L0F9E                   ; routine MAKE ROOM
0F81: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; --------------------------
              	; The 'allot2' Internal Word
              	; --------------------------
              	; Encloses 2 bytes in the dictionary, without initializing them.
              	
0F83: C30E    	L0F83:  DEFW    L0EC3                   ; headerless 'code field' - docolon
              	
              	; ---
              	
0F85: 4B10    	L0F85:  DEFW    L104B                   ; stk_data
0F87: 02      	        DEFB    $02                     ; two bytes required
0F88: 760F    	        DEFW    L0F76                   ; allot
0F8A: B604    	        DEFW    L04B6                   ; exit
              	
              	; ----------------------------------
              	; THE 'DEFAULT MEMORY CHECK' ROUTINE
              	; ----------------------------------
              	; called each cycle in slow mode to check free memory.
              	
0F8C: 211E00  	L0F8C:  LD      HL,$001E                ; Allow a thirty byte overhead.
              	
              	; ----------------------------------
              	; THE 'CHECK FREE MEMORY' SUBROUTINE
              	; ----------------------------------
              	
0F8F: C5      	L0F8F:  PUSH    BC                      ; save bytes to check.
              	
0F90: 09      	        ADD     HL,BC                   ;
0F91: ED4B3B3C	        LD      BC,($3C3B)              ; SPARE
0F95: 09      	        ADD     HL,BC                   ; carry indicates error - past 65535
              	
0F96: C1      	        POP     BC                      ; restore number of bytes
0F97: 3803    	        JR      C,L0F9C                 ; forward with error
              	
0F99: ED72    	        SBC     HL,SP                   ; now check against the return stack
              	                                        ; (machine stack)
0F9B: D8      	        RET     C                       ; return if value is less
              	
0F9C: E7      	L0F9C:  RST     20H                     ; Error 1
0F9D: 01      	        DEFB    $01                     ; Not enough memory
              	
              	; --------------------------
              	; THE 'MAKE ROOM' SUBROUTINE
              	; --------------------------
              	
0F9E: EB      	L0F9E:  EX      DE,HL                   ; first new location to DE
0F9F: 212800  	        LD      HL,$0028                ; overhead 40 bytes.
              	
0FA2: CD8F0F  	L0FA2:  CALL    L0F8F                   ; check free memory.
              	
              	; now increase the two data stack pointers.
              	
0FA5: 2A373C  	        LD      HL,($3C37)              ; fetch value of STKBOT
0FA8: 09      	        ADD     HL,BC                   ; add required room.
0FA9: 22373C  	        LD      ($3C37),HL              ; update STKBOT.
              	
0FAC: 2A3B3C  	        LD      HL,($3C3B)              ; fetch value of SPARE
0FAF: E5      	        PUSH    HL                      ; take a copy of 'old' value
0FB0: 09      	        ADD     HL,BC                   ; add required room.
0FB1: 223B3C  	        LD      ($3C3B),HL              ; update SPARE.
              	
0FB4: E3      	        EX      (SP),HL                 ; new SPARE value to stack,
              	                                        ; old SPARE value to HL.
0FB5: E5      	        PUSH    HL                      ; push old SPARE value.
0FB6: A7      	        AND     A                       ; clear carry.
              	
0FB7: ED52    	        SBC     HL,DE                   ; get length of stack and 12
0FB9: 44      	        LD      B,H                     ;
0FBA: 4D      	        LD      C,L                     ;
0FBB: E1      	        POP     HL                      ; old spare
0FBC: D1      	        POP     DE                      ; new spare
0FBD: C8      	        RET     Z                       ; return if same.
              	
              	; else new SPARE must be higher than old spare.
              	
0FBE: 2B      	        DEC     HL                      ; point to end of data stack
0FBF: 1B      	        DEC     DE                      ; adjust destination.
0FC0: EDB8    	        LDDR                            ; copy the Data Stack + gap upwards.
              	
0FC2: 23      	L0FC2:  INC     HL                      ; point to first new location.
              	
0FC3: C9      	        RET                             ; return.
              	
              	; -------------------
              	; THE 'VARIABLE' WORD
              	; -------------------
              	; VARIABLE name
              	; (n -- )
              	; Sets up a variable with the given name, and initializes its value to n.
              	
0FC4: 56415249	L0FC4:  DEFM    "VARIABL"               ; 'name field'
0FC8: 41424C  	
0FCB: C5      	        DEFB    'E' + $80
              	
0FCC: 750F    	        DEFW    L0F75                   ; 'link field'
              	
0FCE: 08      	L0FCE:  DEFB    $08                     ; 'name length field'
              	
0FCF: 8510    	        DEFW    L1085                   ; 'code field' - create and enclose
              	
              	; ---
              	
0FD1: F00F    	L0FD1:  DEFW    L0FF0                   ; push word DE
0FD3: 4E0F    	        DEFW    L0F4E                   ; ,
              	
0FD5: B604    	        DEFW    L04B6                   ; exit
              	
              	; -------------------
              	; THE 'CONSTANT' WORD
              	; -------------------
              	; CONSTANT name
              	; (n -- )
              	; Defines a constant with the given name and value n.
              	
0FD7: 434F4E53	L0FD7:  DEFM    "CONSTAN"               ; 'name field'
0FDB: 54414E  	
0FDE: D4      	        DEFB    'T' + $80
              	
0FDF: CE0F    	        DEFW    L0FCE                   ; 'link field'
              	
0FE1: 08      	L0FE1:  DEFB    $08                     ; 'name length field'
              	
0FE2: 8510    	L0FE2:  DEFW    L1085                   ; 'code field' - create and enclose
              	
              	; ---
              	
0FE4: F50F    	L0FE4:  DEFW    L0FF5                   ; pad??
0FE6: 4E0F    	        DEFW    L0F4E                   ; ,
0FE8: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---
              	; ???
              	
0FEA: DC      	x0fea   DEFB    $DC                     ;;
0FEB: FE      	x0feb   DEFB    $FE                     ;;  0feb + fedc = 0Ec7 = CREATE
              	
              	; ->
0FEC: 1802    	L0FEC:  JR      L0FF0                   ; skip forward
              	
0FEE: D5      	x0fee   DEFB    $D5                     ;;
0FEF: FF      	x0fef   DEFB    $FF                     ;;  0fef + ffd5 = 0fc4 = VARIABLE
              	
              	; ---
              	
0FF0: D7      	L0FF0:  RST     10H                     ; push word DE
0FF1: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
0FF3: E3      	x0FF3   DEFB    $E3                     ;;
0FF4: FF      	x0ff4   DEFB    $FF                     ;;  0ff4 + ffe3 = 0fd7 = CONSTANT
              	
              	; --> pad
              	
0FF5: EB      	L0FF5:  EX      DE,HL
0FF6: 5E      	        LD      E,(HL)
0FF7: 23      	        INC     HL
0FF8: 56      	        LD      D,(HL)
0FF9: D7      	        RST     10H                     ; push word DE
0FFA: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ------------------
              	; THE 'LITERAL' WORD
              	; ------------------
              	; (n -- )
              	; Compiles the top of the stack into a word definition as a literal.
              	; Compiles integers. decimal 4102 = $1006. c.f. $1055
              	
0FFC: 4C495445	L0FFC:  DEFM    "LITERA"                ; 'name field'
1000: 5241    	
1002: CC      	        DEFB    'L' + $80
              	
1003: E10F    	        DEFW    L0FE1                   ; 'link field'
              	
1005: 47      	L1005:  DEFB    $47                     ; 'name length field'
              	
1006: 0811    	L1006:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
1008: 1110    	L1008:  DEFW    L1011                   ; stack next word
100A: 4E0F    	        DEFW    L0F4E                   ; ,
100C: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---
              	
100E: 02      	x100E:  DEFB    $02                     ;;
100F: FF      	x100f   DEFB    $FF                     ;; 100f + ff02 = 0f11 nah!
1010: FF      	x1010   DEFB    $FF                     ;;
              	
              	; -----------------------------------
              	; The 'Stack Next Word' Internal Word
              	; -----------------------------------
              	
1011: 1310    	L1011:  DEFW    L1013                   ; headerless 'code field'
              	
              	; ---
              	
1013: 0601    	L1013:  LD      B,$01                   ; counter - one word to push
              	
1015: E1      	L1015:  POP     HL                      ; drop the 'Next Word' pointer.
1016: 5E      	        LD      E,(HL)                  ; low byte to E.
1017: 23      	        INC     HL                      ; increment pointer.
1018: 56      	        LD      D,(HL)                  ; high byte to D.
              	
              	; -> E B=1 (one byte op)
              	
1019: 23      	L1019:  INC     HL                      ; increment the 'Next Word' pointer
              	
101A: E5      	L101A:  PUSH    HL                      ; the 'Next Word' pointer goes to
              	                                        ; the Return Stack.
101B: D7      	        RST     10H                     ; stack Data Word DE
101C: 10F7    	        DJNZ    L1015                   ; loop back if more than one.
              	
101E: FDE9    	L101E:  JP      (IY)                    ; to 'next'.
              	
              	
              	; ----------------
              	; THE 'ASCII' WORD
              	; ----------------
              	; Takes the next word from the input buffer, and yields the ASCII code
              	; of its first character. If compiling, then compiles this as a literal.
              	;
              	; e.g.      :STARS 0 DO ASCII * EMIT LOOP ;
              	; (--ASCII code)         (if interpreting)
              	; (--)                   (if compiling)
              	
1020: 41534349	L1020:  DEFM    "ASCI"                  ; 'name field'
1024: C9      	        DEFB    'I' + $80
              	
1025: 0510    	        DEFW    L1005                   ; 'link field'
              	
1027: 45      	L1027:  DEFB    $45                     ; 'name length field' (immediate mode)
              	
1028: C30E    	L1029:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ----------------
              	
102A: 4B10    	L102A:  DEFW    L104B                   ; stk_data
102C: 20      	        DEFB    $20                     ; space delimiter
102D: AB05    	        DEFW    L05AB                   ; word  to pad
102F: 090E    	        DEFW    L0E09                   ; 1+
1031: 9608    	        DEFW    L0896                   ; C@
1033: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
1035: DDCB3E76	        BIT     6,(IX+$3E)              ; FLAGS
1039: 28E3    	        JR      Z,L101E                 ; back to a jp (iy)
              	
103B: CDB904  	        CALL    L04B9                   ; forth
              	
103E: 1110    	L103E:  DEFW    L1011                   ; stack next word
1040: 4B10    	        DEFW    L104B                   ; (stk_data)
1042: 4E0F    	        DEFW    L0F4E                   ; ,
1044: 5F0F    	        DEFW    L0F5F                   ; c,
1046: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---
              	
1048: 01      	x1048   DEFB    $01                     ;; ?
              	
1049: D6      	x1049   DEFB    $D6                     ;; ?
104A: FF      	x104a   DEFB    $FF                     ;; ?  104a + ffd6 = 1020 = ASCII
              	
              	; ----------------------------
              	; The 'stk-data' Internal Word
              	; ----------------------------
              	; used succinctly to stack the following byte as a word.
              	
104B: 4D10    	L104B:  DEFW    L104D                   ; headerless 'code field'
              	
              	; ---
              	
104D: E1      	L104D:  POP     HL                      ; retrieve the 'Next Word' pointer.
              	
104E: 5E      	        LD      E,(HL)                  ; fetch the single byte from there.
104F: 1600    	        LD      D,$00                   ; set high order byte to zero.
              	
1051: 0601    	        LD      B,$01                   ; set counter to 1.
              	
1053: 18C4    	        JR      L1019                   ; back to stack one word and
              	                                        ; put the incremented pointer back on
              	                                        ; the Return Stack.
              	
              	; --------------------------
              	; The 'stk_fp' Internal Word
              	; --------------------------
              	; stack and enclose a floating point number - two words.
              	
1055: 0811    	L1055:  DEFW    L1108                   ; headerless 'code field' - compile
              	
              	; ---
              	
1057: 6410    	        DEFW    L1064                   ; stack two words.
1059: 8508    	        DEFW    L0885                   ; swap
105B: 4E0F    	        DEFW    L0F4E                   ; ,
105D: 4E0F    	        DEFW    L0F4E                   ; ,
105F: B604    	        DEFW    L04B6                   ; exit
              	; ---
              	
1061: 04      	x1061   DEFB    $04                     ;;
1062: FF      	x1062   DEFB    $FF                     ;; 1062 + ff04 = 0f66 XX
1063: FF      	x1063   DEFB    $FF                     ;;
              	
              	; -----------------------------------
              	; The 'STACK TWO WORDS' Internal Word
              	; -----------------------------------
              	
1064: 6610    	L1064:  DEFW    L1066                   ; headerless 'code field'
              	
              	; ---
              	
1066: 0602    	L1066:  LD      B,$02                   ; set counter to two
              	
1068: 18AB    	        JR      L1015                   ; back to stack 2 words
              	
              	
              	; -----------------
              	; THE 'DEFINER' WORD
              	; -----------------
              	; Used with 'DOES>' to define new defining words. i.e. words that themselves
              	; define new words.
              	; The format is
              	; DEFINER name
              	;       defining routine
              	; DOES>
              	;       action routine
              	; ;
              	; name is the name of the new defining word; when executed it will set up
              	; the header of a new word and use its defining routine to set up the
              	; parameter field. When this new word in its turn is executed, its parameter
              	; field will be put on the stack and the action routine will be executed.
              	
106A: 44454649	L106A:  DEFM    "DEFINE"                ; 'name field'
106E: 4E45    	
1070: D2      	        DEFB    'R' + $80
              	
1071: 2710    	        DEFW    L1027                   ; 'link field'
              	
1073: 07      	L1073:  DEFB    $07                     ; 'name length field'
              	
1074: 8510    	L1074:  DEFW    L1085                   ; 'code field' - create and enclose
              	
              	; ---
              	
1076: 8510    	L1076:  DEFW    L1085                   ; create and enclose
1078: 6004    	        DEFW    L0460                   ; here
              	
107A: 4B10    	        DEFW    L104B                   ; stk-data
              	
107C: 0C      	        DEFB    $0C                     ; 12                    marker byte
              	
107D: 830F    	        DEFW    L0F83                   ; allot2
107F: 7612    	        DEFW    L1276                   ; branch
1081: 34FE    	L1081:  DEFW    $FE34                   ; back to L0EB6
              	
              	; ---
              	
1083: E6      	x1083   DEFB    $E6                     ;;
1084: FF      	x1084   DEFB    $FF                     ;; 1084 + ffe6 = 106a = DEFINER
              	
              	; ---
              	;; createe and fill
              	; ----
              	; used seven times as a code word.
              	
1085: CDF00F  	L1085:  CALL    L0FF0                   ; push word DE (save addr nxt wrd on DS)
              	
1088: D00E    	        DEFW    L0ED0                   ; create
108A: 6B08    	        DEFW    L086B                   ; dup
108C: B308    	        DEFW    L08B3                   ; @
108E: 6004    	        DEFW    L0460                   ; here
1090: 290E    	        DEFW    L0E29                   ; 2-
1092: C108    	        DEFW    L08C1                   ; !
              	
1094: 130E    	L1094:  DEFW    L0E13                   ; 2+
1096: 9A10    	        DEFW    L109A                   ; pop DE
1098: B604    	        DEFW    L04B6                   ; exit
              	
              	; -----------
              	; pop word DE
              	; -----------
              	; branch to addr on stack???
              	
109A: 9C10    	L109A:  DEFW    L109C                   ; headerless 'code field'
              	
              	; ---
              	
109C: DF      	L109C:  RST     18H                     ; unstack Data Word DE
              	
109D: C3C30E  	        JP      L0EC3                   ; start new thread.
              	
              	; ---------------
              	; THE 'CALL' WORD
              	; ---------------
              	; (address -- )
              	; Executes Z80 machine code at address on the stack. The code is terminated
              	; by a jp (iy)
              	; e.g. in hex
              	; DEFINER CODE DOES> CALL ;
              	; CODE EI FB C, FD C, E9 C,
              	; The word EI will enable interrupts.
              	
10A0: 43414C  	L10A0:  DEFM    "CAL"                   ; 'name field'
10A3: CC      	        DEFB    'L' + $80
              	
10A4: 7310    	        DEFW    L1073                   ; 'link field'
              	
10A6: 04      	L10A6:  DEFB    $04                     ; 'name length field'
              	
10A7: A910    	L10A7:  DEFW    L10A9                   ; 'code field'
              	
              	; ---
              	
10A9: DF      	L10A9:  RST     18H
10AA: EB      	        EX      DE,HL
              	
10AB: E9      	        JP      (HL)
              	
              	; ----------------
              	; THE 'DOES>' WORD
              	; ----------------
              	; See DEFINER.
              	
10AC: 444F4553	L10AC:  DEFM    "DOES"                  ; 'name field'
10B0: BE      	        DEFB    '>' + $80
              	
10B1: F410    	        DEFW    L10F4                   ; 'link field'
              	
10B3: 45      	L10B3:  DEFB    $45                     ; 'name length field' (immediate mode)
              	
10B4: 0811    	L10B4:  DEFW    L1108                   ; 'code field' - compile
              	
10B6: E810    	L10B6:  DEFW    L10E8                   ; exit
              	
10B8: D812    	        DEFW    L12D8                   ; check??
              	
10BA: 0C      	        DEFB    $0C                     ; 12
              	
10BB: CD10    	        DEFW    L10CD                   ;
10BD: 4B10    	        DEFW    L104B                   ; stk_data
              	
10BF: CD      	        DEFB    $CD                     ; data                  call ?
              	
10C0: 5F0F    	        DEFW    L0F5F                   ; C,
10C2: 1110    	        DEFW    L1011                   ; stack next word
10C4: F00F    	        DEFW    L0FF0                   ; (push word DE)
10C6: 4E0F    	        DEFW    L0F4E                   ; ,
10C8: 4B10    	        DEFW    L104B                   ; stk-data
              	
10CA: 0A      	        DEFB    $0A                     ; ten                   marker byte.
              	
10CB: B604    	        DEFW    L04B6                   ; exit
              	
              	; -----------------------
              	; The '???' Internal Word
              	; -----------------------
              	
10CD: C30E    	L10CD:  DEFW    L0EC3                   ; headerless 'code field' - docolon
              	
              	; ---
              	
10CF: 6B08    	        DEFW    L086B                   ; dup
10D1: 290E    	        DEFW    L0E29                   ; 2-
10D3: B515    	        DEFW    L15B5                   ; namefield
10D5: 6004    	        DEFW    L0460                   ; here
10D7: E10D    	        DEFW    L0DE1                   ; -
10D9: 1F0E    	        DEFW    L0E1F                   ; 1-
10DB: 4E0F    	        DEFW    L0F4E                   ; ,
10DD: 6004    	        DEFW    L0460                   ; here
10DF: 8508    	        DEFW    L0885                   ; swap
10E1: C108    	        DEFW    L08C1                   ; !
10E3: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---
              	
10E5: 05      	x10e5   DEFB    $05                     ;;
              	
10E6: C5      	x10e6   DEFB    $C5                     ;;
10E7: FF      	x10e7   DEFB    $FF                     ;; 10e7 + ffc5 = 10ac = DOES>
              	
              	; ---
              	
10E8: B804    	L10E8:  DEFW    L04B8                   ; exit?
              	
              	; -------------------
              	; THE 'COMPILER' WORD
              	; -------------------
              	; Used with 'RUNS>' for defining new compiling words, i.e. words that are
              	; used within word definitions to give an immediate effect of compiling
              	; some information into the dictionary.
              	; (This is traditionally done with IMMEDIATE, but COMPILER...RUNS> works
              	; better with EDIT etc.)
              	
10EA: 434F4D50	L10EA:  DEFM    "COMPILE"               ; 'name field'
10EE: 494C45  	
10F1: D2      	        DEFB    'R' + $80
              	
10F2: A610    	        DEFW    L10A6                   ; 'link field'
              	
10F4: 08      	L10F4:  DEFB    $08                     ; 'name length field'
              	
10F5: 8510    	L10F5:  DEFW    L1085                   ; 'code field' - create and enclose
              	
              	; ---
              	
10F7: 0811    	        DEFW    L1108                   ; compile
10F9: 6011    	        DEFW    L1160                   ; immediate
10FB: 6004    	        DEFW    L0460                   ; here
10FD: 4B10    	        DEFW    L104B                   ; stk_data
              	
10FF: 0B      	L10FF:  DEFB    $0B                     ; 11                    marker byte
              	
1100: 830F    	        DEFW    L0F83                   ; allot2
1102: 7612    	        DEFW    L1276                   ; branch
1104: B1FD    	L1104:  DEFW    $FDB1                   ; back to L0EB6
              	
              	; ---
              	
1106: E3      	x1106   DEFB    $E3                     ;;
1107: FF      	x1107   DEFB    $FF                     ;; 1107 + ffe3 = 10ea = COMPILER
              	
              	; ---------------------
              	; THE 'COMPILE' ROUTINE
              	; ---------------------
              	; Instead of executing code words as they are encountered, lay them down in
              	; the dictionary along with any parameters.
              	
1108: DDCB3E76	L1108:  BIT     6,(IX+$3E)              ; test FLAGS - compiler mode ?
110C: 2002    	        JR      NZ,L1110                ; skip error if so.
              	
110E: E7      	        RST     20H                     ; Error 4.
110F: 04      	        DEFB    $04                     ; Compiling word used in interpret mode.
              	
1110: CDF00F  	L1110:  CALL    L0FF0                   ; push word DE (then jp (iy))
              	
1113: 6B08    	        DEFW    L086B                   ; dup
1115: B308    	        DEFW    L08B3                   ; @
1117: 4E0F    	        DEFW    L0F4E                   ; ,
1119: 7612    	        DEFW    L1276                   ; branch
111B: 78FF    	L111B:  DEFW    $FF78                   ; to L1094 - definer code
              	
              	; ----------------
              	; THE 'RUNS>' WORD
              	; ----------------
              	; See COMPILER
              	
111D: 52554E53	L111D:  DEFM    "RUNS"                  ; 'name field'
1121: BE      	        DEFB    '>' + $80
              	
1122: B310    	        DEFW    L10B3                   ; 'link field'
              	
1124: 45      	L1124:  DEFB    $45                     ; 'name length field' (immediate mode)
              	
1125: 0811    	L1125:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
1127: 4011    	L1127:  DEFW    L1140                   ; vv
1129: D812    	        DEFW    L12D8                   ; check-for
112B: 0B      	        DEFB    $0B                     ; 11                    marker byte.
112C: 8508    	        DEFW    L0885                   ; swap
112E: 5F0F    	        DEFW    L0F5F                   ; c,
1130: CD10    	        DEFW    L10CD                   ; ?
1132: 1110    	        DEFW    L1011                   ; stack next word
1134: 4211    	        DEFW    L1142
1136: 4E0F    	        DEFW    L0F4E                   ; ,
              	
1138: 4B10    	        DEFW    L104B                   ; stk-data
113A: 0A      	        DEFB    $0A                     ; ten.                  marker byte.
113B: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---
              	
113D: 05      	x113d   DEFB    $05                     ;;
              	
113E: DE      	x113e   DEFB    $DE                     ;;
113F: FF      	x113f   DEFB    $FF                     ;; 113f + ffde = 111d = RUNS>
              	
              	; ---
              	
1140: B804    	L1140:  DEFW    L04B8
              	
1142: E1      	L1142:  POP     HL
1143: D5      	        PUSH    DE
1144: EB      	        EX      DE,HL
              	
1145: D7      	        RST     10H                     ; push word DE
1146: 42      	        LD      B,D
1147: 4B      	        LD      C,E
1148: D1      	        POP     DE
1149: D5      	        PUSH    DE
114A: 1B      	        DEC     DE
114B: 1B      	        DEC     DE
              	
114C: CD9E15  	        CALL    L159E                   ;
              	
114F: D1      	        POP     DE
1150: C5      	        PUSH    BC
1151: C3C30E  	        JP      L0EC3                   ;
              	
              	; --------------------
              	; THE 'IMMEDIATE' WORD
              	; --------------------
              	; (  --  )
              	; The most recent word in the current vocabulary is made immediate, so that
              	; it will execute even in compile mode.
              	
1154: 494D4D45	L1154:  DEFM    "IMMEDIAT"              ; 'name field'
1158: 44494154	
115C: C5      	        DEFB    'E' + $80
              	
115D: 2411    	        DEFW    L1124                   ; 'link field'
              	
115F: 09      	L115F:  DEFB    $09                     ; 'name length field'
              	
1160: C30E    	L1160:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
1162: 8004    	L1162:  DEFW    L0480                   ; current
1164: B308    	        DEFW    L08B3                   ; @
1166: B308    	        DEFW    L08B3                   ; @
1168: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
116A: DF      	L116A:  RST     18H                     ; pop word DE
116B: EB      	        EX      DE,HL
116C: CBF6    	        SET     6,(HL)
116E: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---------------------
              	; THE 'VOCABULARY' WORD
              	; ---------------------
              	; (  --  )
              	; Defines a new vocabulary with the given name.
              	
1170: 564F4341	L1170:  DEFM    "VOCABULAR"             ; 'name field'
1174: 42554C41	
1178: 52      	
1179: D9      	        DEFB    'Y' + $80
              	
117A: 5F11    	        DEFW    L115F                   ; 'link field'
              	
117C: 0A      	L117C:  DEFB    $0A                     ; 'name length field'
              	
117D: 8510    	L117D:  DEFW    L1085                   ; 'code field' - create and enclose
              	
              	; ---
              	
117F: B511    	L117F:  DEFW    L11B5                   ; set context
1181: 8004    	        DEFW    L0480                   ; current
1183: B308    	        DEFW    L08B3                   ; @
1185: 130E    	        DEFW    L0E13                   ; 2+
1187: 4E0F    	        DEFW    L0F4E                   ; ,
1189: 8806    	        DEFW    L0688                   ; stk-zero
118B: 5F0F    	        DEFW    L0F5F                   ; C,
118D: 6004    	        DEFW    L0460                   ; here
118F: 1110    	        DEFW    L1011                   ; stack next word
1191: 353C    	        DEFW    $3C35                   ; (VOCLNK)
1193: 6B08    	        DEFW    L086B                   ; dup
1195: B308    	        DEFW    L08B3                   ; @
1197: 4E0F    	        DEFW    L0F4E                   ; ,
1199: C108    	        DEFW    L08C1                   ; !
119B: B604    	        DEFW    L04B6                   ; exit
              	
              	; ----------------------
              	; THE 'DEFINITIONS' WORD
              	; ----------------------
              	; (  --  )
              	; The CONTEXT vocabulary is made the CURRENT vocabulary as well.
              	
119D: 44454649	L119D:  DEFM    "DEFINITION"            ; 'name field'
11A1: 4E495449	
11A5: 4F4E    	
11A7: D3      	        DEFB    'S' + $80
              	
11A8: 7C11    	        DEFW    L117C                   ; 'link field'
              	
11AA: 0B      	L11AA:  DEFB    $0B                     ; 'name length field'
              	
11AB: AD11    	L11AB:  DEFW    L11AD                   ; 'code field'
              	
              	; ---
              	
11AD: 2A333C  	L11AD:  LD      HL,($3C33)              ; CONTEXT
11B0: 22313C  	        LD      ($3C31),HL              ; CURRENT
11B3: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
11B5: ED53333C	L11B5:  LD      ($3C33),DE              ; CONTEXT
11B9: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
              	; -------------
              	; THE 'IF' WORD
              	; -------------
              	; (n -- )
              	; Used in the form
              	; IF ... THEN
              	; or
              	; IF ... ELSE ... THEN
              	; In the first form, if n is non-zero then the words between IF and THEN
              	; are executed; otherwise they are skipped over.
              	; In the second form, if n is non-zero then the words between IF and ELSE
              	; are executed and those between ELSE and THEN are skipped over, while if
              	; n is zero then the words between IF and ELSE are skipped over and those
              	; between ELSE and THEN are executed.
              	
11BB: 49      	L11BB:  DEFB    'I'                     ; 'name field'
11BC: C6      	        DEFB    'F' + $80
              	
11BD: E013    	        DEFW    L13E0                   ; 'link field'
              	
11BF: 42      	L11BF:  DEFB    $42                     ; 'name length field' (immediate word)
              	
11C0: 0811    	        DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
11C2: 8312    	        DEFW    L1283                   ; ?branch
11C4: 6004    	        DEFW    L0460                   ; here
              	
11C6: 4B10    	        DEFW    L104B                   ; stk_data
11C8: 02      	        DEFB    $02                     ; 2 locations required for jump length
11C9: 830F    	        DEFW    L0F83                   ; allot2
11CB: B604    	        DEFW    L04B6                   ; exit
              	
              	; ----------------
              	; THE 'WHILE' WORD
              	; ----------------
              	; (n -- )
              	; Used in BEGIN ... WHILE ... REPEAT. If n = 0 then skips over to just past
              	; REPEAT.
              	
11CD: 5748494C	L11CD:  DEFM    "WHIL"                  ; 'name field'
11D1: C5      	        DEFB    'E' + $80
              	
11D2: BF11    	        DEFW    L11BF                   ; 'link field'
              	
11D4: 45      	L11D4:  DEFB    $45                     ; 'name length field' (immediate mode)
              	
11D5: 0811    	L11D5:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
11D7: 8812    	        DEFW    L1288                   ; ?branch
              	
11D9: D812    	        DEFW    L12D8                   ; check-for
11DB: 01      	        DEFB    $01                     ;  1
11DC: 6004    	        DEFW    L0460                   ; here
11DE: 4B10    	        DEFW    L104B                   ; stk-data
11E0: 04      	        DEFB    $04                     ;  four
11E1: 830F    	        DEFW    L0F83                   ; allot
11E3: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---------------
              	; THE 'ELSE' WORD
              	; ---------------
              	; (  --  )
              	; Used with IF and THEN.
              	
11E5: 454C53  	L11E5:  DEFM    "ELS"                   ; 'name field'
11E8: C5      	        DEFB    'E' + $80
              	
11E9: D411    	        DEFW    L11D4                   ; 'link field'
              	
11EB: 44      	L11EB:  DEFB    $44                     ; 'name length field' (immediate mode)
              	
11EC: 0811    	L11EC:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
11EE: 7112    	        DEFW    L1271                   ; branch
              	
11F0: D812    	        DEFW    L12D8                   ; check-for
11F2: 02      	        DEFB    $02                     ; two
11F3: 830F    	        DEFW    L0F83                   ; allot2
11F5: 2512    	        DEFW    L1225                   ; ?
11F7: 6004    	        DEFW    L0460                   ; here
11F9: 290E    	        DEFW    L0E29                   ; 2-
11FB: 4B10    	        DEFW    L104B                   ; stk-data
11FD: 02      	        DEFB    $02                     ; two
11FE: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---------------
              	; THE 'THEN' WORD
              	; ---------------
              	; Used with IF.
              	
1200: 544845  	L1200:  DEFM    "THE"                   ; 'name field'
1203: CE      	        DEFB    'N' + $80
              	
1204: EB11    	        DEFW    L11EB                   ; 'link field'
              	
1206: 44      	L1206:  DEFB    $44                     ; 'name length field' (immediate mode)
              	
1207: 0811    	L1207:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
1209: A412    	        DEFW    L12A4                   ; end?
              	
120B: D812    	        DEFW    L12D8                   ; check-for
120D: 02      	        DEFB    $02
120E: 2512    	        DEFW    L1225                   ; ?
1210: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---------------
              	; THE 'BEGIN' WORD
              	; ---------------
              	; (  --  )
              	; Used with either UNTIL or WHILE...REPEAT.
              	
1212: 42454749	L1212:  DEFM    "BEGI"                  ; 'name field'
1216: CE      	        DEFB    'N' + $80
              	
1217: 0612    	        DEFW    L1206                   ; 'link field'
              	
1219: 45      	L1219:  DEFB    $45                     ; 'name length field' (immediate mode)
              	
121A: 0811    	L121A:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
121C: 9F12    	        DEFW    L129F
121E: 6004    	        DEFW    L0460                   ; here
1220: 4B10    	        DEFW    L104B                   ; stk_data
1222: 01      	        DEFB    $01                     ; 1
1223: B604    	        DEFW    L04B6                   ; exit
              	
              	; -----------------------
              	; The '???' Internal Word
              	; -----------------------
              	
1225: C30E    	L1225:  DEFW    L0EC3                   ; headerless 'code field' - docolon
              	
              	; ---
              	
1227: 6B08    	        DEFW    L086B                   ; dup
1229: 6004    	        DEFW    L0460                   ; here
122B: 8508    	        DEFW    L0885                   ; swap
122D: E10D    	        DEFW    L0DE1                   ; -
122F: 1F0E    	        DEFW    L0E1F                   ; 1-
1231: 8508    	        DEFW    L0885                   ; swap
1233: C108    	        DEFW    L08C1                   ; !
1235: B604    	        DEFW    L04B6                   ; exit
              	
              	; -----------------------
              	; The '???' Internal Word
              	; -----------------------
              	
1237: C30E    	L1237:  DEFW    L0EC3                   ; headerless 'code field' - docolon
              	
              	; ---
              	
1239: 6004    	        DEFW    L0460                   ; here
123B: E10D    	        DEFW    L0DE1                   ; -
123D: 1F0E    	        DEFW    L0E1F                   ; 1-
123F: 4E0F    	        DEFW    L0F4E                   ; ,
1241: B604    	        DEFW    L04B6                   ; exit
              	
              	
              	; -----------------
              	; THE 'REPEAT' WORD
              	; -----------------
              	; (  --  )
              	; Used in construction BEGIN ... WHILE .. REPEAT.
              	; Causes a jump back to just after BEGIN.
              	
              	
1243: 52455045	L1243:  DEFM    "REPEA"                 ; 'name field'
1247: 41      	
1248: D4      	        DEFB    'T' + $80
              	
1249: 1912    	        DEFW    L1219                   ; 'link field'
              	
124B: 46      	L124B:  DEFB    $46                     ; 'name length field' (immediate mode)
              	
124C: 0811    	L124C:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
124E: 7612    	L124E   DEFW    L1276                   ; branch
1250: D812    	L1250:  DEFW    L12D8                   ; check_for
1252: 04      	        DEFB    $04                     ; four
1253: 8508    	        DEFW    L0885                   ; swap
1255: 3712    	        DEFW    L1237                   ; ?
1257: 2512    	        DEFW    L1225                   ; ?
1259: B604    	        DEFW    L04B6                   ; exit
              	
              	; ----------------
              	; THE 'UNTIL' WORD
              	; ----------------
              	; (n -- )
              	; Used in BEGIN ... UNTIL.
              	; Loops back to BEGIN if n = 0
              	
125B: 554E5449	L125B:  DEFM    "UNTI"                  ; 'name field'
125F: CC      	        DEFB    'L' + $80
              	
1260: 4B12    	        DEFW    L124B                   ; 'link field'
              	
1262: 45      	L1262:  DEFB    $45                     ; 'name length field' (immediate mode)
              	
1263: 0811    	L1263:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
1265: 8D12    	        DEFW    L128D                   ; ?branch
1267: D812    	        DEFW    L12D8                   ; check_for
1269: 01      	        DEFB    $01                     ;
126A: 3712    	        DEFW    L1237                   ; ?
126C: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---
              	
126E: 02      	x126E   DEFB    $02                     ;;
              	
126F: 75      	x126F   DEFB    $75                     ;;
1270: FF      	x1270   DEFB    $FF                     ;; 1270 + ff75 = 11e5 = ELSE
              	
              	; ---
              	
              	
1271: 7812    	L1271:  DEFW    L1278                   ; ?
              	
              	; ---
1273: 02      	x1273   DEFB    $02                     ;;
              	
1274: CE      	x1274   DEFB    $CE                     ;;
1275: FF      	x1275   DEFB    $FF                     ;; 1275 + ffce = 1243 = REPEAT
              	
              	; --------------------------
              	; The 'branch' Internal Word
              	; --------------------------
              	
1276: 7812    	L1276:  DEFW    L1278                   ; headerless 'code field'
              	
              	; ---
              	
1278: E1      	L1278:  POP     HL                      ; drop next word pointer
1279: 5E      	        LD      E,(HL)                  ; read the 16-bit offset
127A: 23      	        INC     HL                      ; that is
127B: 56      	        LD      D,(HL)                  ; stored there.
              	
127C: 19      	L127C:  ADD     HL,DE                   ; add to current address.
              	
127D: C3BA04  	        JP      L04BA                   ; jump back into address loop so that
              	                                        ; a new address gets stacked as IP.
              	
              	; ---
              	
1280: 02      	x1280   DEFB    $02                     ;;
              	
1281: 39      	x1281   DEFB    $39                     ;;
1282: FF      	x1282   DEFB    $FF                     ;; 1282 + ff39 = 11bb = IF
              	
              	; ---
              	
1283: 8F12    	L1283:  DEFW    L128F                   ; from IF, convert, line, min, etc.
              	
              	; ---
              	
1285: 02      	x1285   DEFB    $02                     ;;
              	
1286: 46      	x1286   DEFB    $46                     ;;
1287: FF      	x1287   DEFB    $FF                     ;; 1287 + ff46 = 11cd = WHILE
              	
              	; ---
              	
1288: 8F12    	L1288:  DEFW    L128F                   ; from WHILE
              	
              	; ---
              	
128A: 02      	x128A   DEFB    $02                     ;;
              	
128B: CF      	x128B   DEFB    $CF                     ;;
128C: FF      	x128C   DEFB    $FF                     ;; 128c + ffcf = 125b = UNTIL
              	
              	; ---------------------------
              	; The '?branch' Internal Word
              	; ---------------------------
              	
128D: 8F12    	L128D:  DEFW    L128F                   ; headerless 'code field'
              	
              	; ---
              	
128F: CD4E08  	L128F:  CALL    L084E                   ; stk_to_bc
              	
1292: 78      	        LD      A,B                     ; test for
1293: B1      	        OR      C                       ; zero
              	
              	; -> from +loop
1294: 28E2    	L1294:  JR      Z,L1278                 ; make the jump to "branch" if zero.
              	
1296: E1      	        POP     HL                      ; else drop the pointer.
1297: 23      	        INC     HL                      ; step over.
1298: 23      	        INC     HL                      ; the jump bytes
1299: C3BA04  	        JP      L04BA                   ; jump back into address loop so that
              	                                        ; a new address gets stacked as IP.
              	
              	; ---
              	
129C: 00      	x129C   DEFB    $00                     ;;
129D: 74      	x129D   DEFB    $74                     ;;
129E: FF      	x129E   DEFB    $FF                     ;; 129e + ff74 = 1212 = BEGIN
              	
              	; ---
              	
129F: B904    	L129F:  DEFW    L04B9                   ; forth
              	
              	; ---
              	
12A1: 00      	x12A1   DEFB    $00                     ;;
12A2: 5D      	x12A2   DEFB    $5D                     ;;
12A3: FF      	x12A3   DEFB    $FF                     ;; 12a3 + ff5d = 1200 = THEN
              	
              	; ---
              	
12A4: B904    	L12A4:  DEFW    L04B9
              	
              	; -------------
              	; THE 'DO' WORD
              	; -------------
              	; (limit, initial value -- )
              	; Sets up a DO loop, initializing the loop counter to the initial value.
              	; The limit and loop counter are stored on the return stack.
              	; See LOOP and +LOOP.
              	
12A6: 44      	L12A6:  DEFB    'D'                     ; 'name field'
12A7: CF      	        DEFB    'O' + $80
              	
12A8: 6212    	        DEFW    L1262                   ; 'link field'
              	
12AA: 42      	L12AA:  DEFB    $42                     ; 'name length field' (immediate mode)
              	
12AB: 0811    	L12AB:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
12AD: 2313    	        DEFW    L1323                   ; shuffle
12AF: 6004    	        DEFW    L0460                   ; here
12B1: 4B10    	        DEFW    L104B                   ; stk_data
12B3: 03      	        DEFB    $03                     ; 3                     marker byte.
12B4: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---------------
              	; THE 'LOOP' WORD
              	; ---------------
              	; (  --  )
              	; Like +LOOP (below) but the number added onto the loop counter is 1.
              	
12B6: 4C4F4F  	L12B6:  DEFM    "LOO"                   ; 'name field'
12B9: D0      	        DEFB    'P' + $80
              	
12BA: AA12    	        DEFW    L12AA                   ; 'link field'
              	
12BC: 44      	L12BC:  DEFB    $44                     ; 'name length field' (immediate mode)
              	
12BD: 0811    	L12BD:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
12BF: 3213    	        DEFW    L1332                   ; shuffle more
              	
12C1: D812    	L12C1:  DEFW    L12D8                   ; check-for
12C3: 03      	        DEFB    $03                     ; 3                     marker byte
12C4: 3712    	        DEFW    L1237                   ; ?
12C6: B604    	        DEFW    L04B6                   ; exit
              	
              	; ----------------
              	; THE '+LOOP' WORD
              	; ----------------
              	; (n -- )
              	; Used with DO. Adds n to the loop counter, and loops back if the loop counter
              	; is now less than the limit (if n >= 0) or greater than the limit (if n < 0).
              	
12C8: 2B4C4F4F	L12C8:  DEFM    "+LOO"                  ; 'name field'
12CC: D0      	        DEFB    'P' + $80
              	
12CD: BC12    	        DEFW    L12BC                   ; 'link field'
              	
12CF: 45      	L12CF:  DEFB    $45                     ; 'name length field' (immediate mode)
              	
12D0: 0811    	L12D0:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
12D2: 3C13    	L12D2:  DEFW    L133C                   ; ?
12D4: 7612    	        DEFW    L1276                   ; branch
              	
12D6: EAFF    	L12D6:  DEFW    $FFEA                   ; back to L12C1
              	
              	; -----------------------------
              	; The 'check-for' Internal Word
              	; -----------------------------
              	; Checks for expected marker byte which indicates stack is balanced and that
              	; a previous mandatory word was present.
              	
12D8: DA12    	L12D8:  DEFW    L12DA                   ; headerless 'code field'
              	
              	; ---
              	
12DA: DF      	L12DA:  RST     18H                     ; pop word DE
12DB: E1      	        POP     HL                      ;
12DC: 7E      	        LD      A,(HL)                  ;
12DD: 23      	        INC     HL                      ;
12DE: E5      	        PUSH    HL                      ;
12DF: 93      	        SUB     E                       ;
12E0: B2      	        OR      D                       ;
              	
12E1: 284A    	        JR      Z,L132D                 ; to next via jp (iy).
              	
              	; else...
              	
12E3: E7      	        RST     20H                     ; Error 5
12E4: 05      	        DEFB    $05                     ; Word is not properly structured.
              	
              	; ------------
              	; THE 'I' WORD
              	; ------------
              	; ( -- loop counter)
              	; Copies the top of the return stack to the data stack. This will be either
              	; the loop counter for the innermost DO...LOOP, or the number most recently
              	; transferred by >R.
              	
              	
12E5: C9      	L12E5:  DEFB    'I' + $80               ; 'name field'
              	
12E6: AA11    	        DEFW    L11AA                   ; 'link field'
              	
12E8: 01      	L12E8:  DEFB    $01                     ; 'name length field'
              	
12E9: EB12    	L12E9:  DEFW    L12EB                   ; 'code field'
              	
              	; ---
              	
12EB: C1      	L12EB:  POP     BC                      ; pop return address
12EC: D1      	        POP     DE                      ; pop the loop counter to DE.
12ED: D5      	        PUSH    DE                      ; now restore the stack
12EE: C5      	        PUSH    BC                      ; exactly as it was.
              	
12EF: D7      	        RST     10H                     ; push Data Word DE - inner loop counter
              	
12F0: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------
              	; THE 'I'' WORD
              	; -------------
              	; ( -- limit)
              	; Copies the second number down on the return stack to the data stack
              	; (so in a DO loop it copies  the limit of the loop).
              	
12F2: 49      	L12F2:  DEFB    'I'                     ; 'name field'
12F3: A7      	        DEFB    $A7                     ; "'" + $80
              	
12F4: E812    	        DEFW    L12E8                   ; 'link field'
              	
12F6: 02      	L12F6:  DEFB    $02                     ; 'name length field'
              	
12F7: F912    	L12F7:  DEFW    L12F9                   ; 'code field'
              	
              	; ---
              	
12F9: 210400  	L12F9:  LD      HL,$0004                ; two bytes per entry.
12FC: 1809    	        JR      L1307                   ; forward to use the 'J' indexing
              	                                        ; routine
              	
              	; ------------
              	; THE 'J' WORD
              	; ------------
              	; ( -- loop counter)
              	; Copies the third entry on the return stack to the data stack.
              	; This will be either the loop counter for the second innermost DO loop
              	; or the number put on the return stack by the most recent >R.
              	
12FE: CA      	L12FE:  DEFB    'J' + $80               ; 'name field'
              	
12FF: F612    	        DEFW    L12F6                   ; 'link field'
              	
1301: 01      	L1301:  DEFB    $01                     ; 'name length field'
              	
1302: 0413    	L1302:  DEFW    L1304                   ; 'code field'
              	
              	; ---
              	
1304: 210600  	L1304:  LD      HL,$0006                ; two bytes per entry
              	
              	; -> I' joins here with HL=4
              	
1307: 39      	L1307:  ADD     HL,SP                   ; index the stack pointer.
1308: 5E      	        LD      E,(HL)                  ; low order byte to E
1309: 23      	        INC     HL                      ; address high byte.
130A: 56      	        LD      D,(HL)                  ; DE now holds a copy of the required
              	                                        ; entry from the Return Stack
              	
130B: D7      	        RST     10H                     ; stack Data Word DE
              	
130C: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ----------------
              	; THE 'LEAVE' WORD
              	; ----------------
              	; (  --  )
              	; Forces termination of a DO loop at the next LOOP or +LOOP by setting the
              	; loop counter equal to the limit.
              	
130E: 4C454156	L130E:  DEFM    "LEAV"                  ; 'name field'
1312: C5      	        DEFB    'E' + $80
              	
1313: 0113    	        DEFW    L1301                   ; 'link field'
              	
1315: 05      	L1315:  DEFB    $05                     ; 'name length field'
              	
1316: 1813    	L1316:  DEFW    L1318                   ; 'code field'
              	
              	; ---
              	
1318: C1      	L1318:  POP     BC                      ; pop return address to BC.
1319: E1      	        POP     HL                      ; pop the loop counter.
131A: E1      	        POP     HL                      ; now the limit.
131B: E5      	        PUSH    HL                      ; push unaltered limit.
131C: E5      	        PUSH    HL                      ; push counter - now limit.
131D: C5      	        PUSH    BC                      ; restore return address.
              	
131E: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
              	
1320: 00      	x1320   DEFB    $00                     ;;
1321: 84      	x1321   DEFB    $84                     ;;
1322: FF      	x1322   DEFB    $FF                     ;; 1322 + ff84 = 12a6 = DO
              	
              	; -----------------------
              	; The '???' Internal Word
              	; -----------------------
              	
1323: 2513    	L1323:  DEFW    L1325                   ; headerless 'code field'
              	
              	; ---
              	
1325: CD4E08  	L1325:  CALL    L084E                   ; stk_to_bc
1328: DF      	        RST     18H                     ; pop word DE
1329: E1      	        POP     HL
132A: D5      	        PUSH    DE
              	
132B: C5      	L132B:  PUSH    BC
132C: E5      	        PUSH    HL
              	
132D: FDE9    	L132D:  JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
132F: 02      	x132F   DEFB    $02                     ;;
1330: 85      	x1330   DEFB    $85                     ;;
1331: FF      	x1331   DEFB    $FF                     ;; 1331 + ff85 = 12b6 = LOOP
              	
              	; -----------------------
              	; The '???' Internal Word
              	; -----------------------
              	
1332: 3413    	L1332:  DEFW    L1334                   ; headerless 'code field'
              	
              	; ---
              	
1334: 110100  	L1334:  LD      DE,$0001
1337: 1806    	        JR      L133F                   ; forward =>
              	
              	; ---
              	
1339: 02      	x1339   DEFB    $02
133A: 8D      	x133A   DEFB    $8D
133B: FF      	x133B   DEFB    $FF
              	
              	; -----------------------
              	; The '???' Internal Word
              	; -----------------------
              	; loop counter + n
              	; Note. ADC HL,DE is used in preference to ADD HL,DE as affects P/O flag
              	
133C: 3E13    	L133C:  DEFW    L133E                   ; headerless 'code field'
              	
              	; ---
              	
133E: DF      	L133E:  RST     18H                     ; pop word DE - number to be added (n)
              	; =>
133F: C1      	L133F:  POP     BC                      ; pop return address to BC.
1340: E1      	        POP     HL                      ; loop counter to HL.
1341: A7      	        AND     A                       ; clear carry.
1342: ED5A    	        ADC     HL,DE                   ; add the number specified.
1344: 7A      	        LD      A,D                     ; save MSB of (n) in A.
1345: D1      	        POP     DE                      ; now pop the limit to DE.
1346: 37      	        SCF                             ; set carry.
1347: EA5813  	        JP      PE,L1358                ; jump forward with overflow.
              	
134A: D5      	        PUSH    DE                      ; push limit
134B: E5      	        PUSH    HL                      ; push adjusted counter.
134C: 07      	        RLCA                            ; now test sign of number (n)
134D: 3001    	        JR      NC,L1350                ;
              	
134F: EB      	        EX      DE,HL
              	
1350: CD990C  	L1350:  CALL    L0C99                   ;
              	
1353: 3F      	        CCF
              	
1354: 3002    	        JR      NC,L1358                ;
              	
1356: E1      	        POP     HL
1357: E1      	        POP     HL
              	
1358: C5      	L1358:  PUSH    BC
1359: 9F      	        SBC     A,A
135A: C39412  	        JP      L1294                   ; jump to branch on zero.
              	
              	; ------------
              	; THE '(' WORD
              	; ------------
              	; Starts a comment terminated by ')'
              	
135D: A8      	L135D:  DEFB    '(' + $80               ; 'name field'
              	
135E: D413    	        DEFW    L13D4                   ; 'link field'
              	
1360: 41      	L1360:  DEFB    $41                     ; 'name length field' (immediate mode)
              	
1361: 0811    	L1361:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
1363: 7913    	L1363:  DEFW    L1379                   ;
1365: 4B10    	        DEFW    L104B                   ; stk_data
              	
1367: 29      	        DEFB    $29                     ; character ')'         - delimiter
              	
1368: 6004    	L1368:  DEFW    L0460                   ; here
136A: 8508    	        DEFW    L0885                   ; swap
136C: 830F    	        DEFW    L0F83                   ; allot2
136E: 9F13    	        DEFW    L139F                   ; find)
1370: 8508    	        DEFW    L0885                   ; swap
1372: C108    	        DEFW    L08C1                   ; !
              	
1374: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---
              	
1376: FF      	x1376   DEFB    $FF                     ;;
1377: E5      	x1377   DEFB    $E5                     ;;
1378: FF      	x1378   DEFB    $FF                     ;; 1378 + ffe5 = 135d = '('
              	
              	; -----------------------
              	; The '???' Internal Word
              	; -----------------------
              	
1379: 7B13    	L1379:  DEFW    L137B                   ; headerless 'code field'
              	
              	; ---
              	
137B: E1      	L137B:  POP     HL
137C: 5E      	        LD      E,(HL)
137D: 23      	        INC     HL
137E: 56      	        LD      D,(HL)
              	
137F: 13      	        INC     DE
              	
1380: C37C12  	        JP      L127C                   ;
              	
              	; -------------
              	; THE '."' WORD
              	; -------------
              	; (  --  )
              	; Prints the following string terminated by ".
              	
1383: 2E      	L1383:  DEFB    '.'                     ; 'name field'
1384: A2      	        DEFB    '"' + $80
              	
1385: 6013    	        DEFW    L1360                   ; 'link field'
              	
1387: 42      	L1387:  DEFB    $42                     ; 'name length field' (immediate mode)
              	
1388: 0811    	L1388:  DEFW    L1108                   ; 'code field' - compile
              	
              	; ---
              	
138A: 9613    	L138A:  DEFW    L1396                   ; pr_embedded string.
138C: 4B10    	        DEFW    L104B                   ; stk_data
138E: 22      	        DEFB    $22                     ; '"'                   - delimiter
              	
138F: 7612    	        DEFW    L1276                   ; branch
1391: D6FF    	L1391:  DEFW    $FFD6                   ; back to 1368 (1392+$FFD6)
              	                                        ; same routine as for matching comments
              	
              	; ---
              	
1393: FF      	x1393   DEFB    $FF                     ;;
1394: EE      	x1394   DEFB    $EE                     ;;
1395: FF      	x1395   DEFB    $FF                     ;; 1395 + ffee = 1383 = ."
              	
              	; -----------------------
              	; The '???' Internal Word
              	; -----------------------
              	; print string embedded in Dictionary
              	
1396: 9813    	L1396:  DEFW    L1398                   ; headerless 'code field'
              	
              	; ---
              	
1398: D1      	L1398:  POP     DE
1399: CD7909  	        CALL    L0979                   ; pr_string1
139C: D5      	        PUSH    DE
139D: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -----------------------
              	; The '???' Internal Word
              	; -----------------------
              	; enclose comment
              	; comments may be multiple
              	; e.g. : SV ( system) ( variables) CLS BEGIN 0 0 AT 15360 80 TYPE 0 UNTIL ;
              	
              	
139F: A113    	L139F:  DEFW    L13A1                   ; headerless 'code field'
              	
              	; ---
              	
13A1: DF      	L13A1:  RST     18H                     ; pop word DE
13A2: D5      	        PUSH    DE                      ; save delimiter.
              	
13A3: CDE105  	        CALL    L05E1                   ; find the ')' delimiter
              	
13A6: 62      	        LD      H,D
13A7: 6B      	        LD      L,E
13A8: 09      	        ADD     HL,BC
13A9: 7E      	        LD      A,(HL)
13AA: E1      	        POP     HL                      ; pop the delimiter.
13AB: BD      	        CP      L
13AC: 280A    	        JR      Z,L13B8                 ; forward with a match.         =->
              	
13AE: EB      	        EX      DE,HL                   ;
13AF: D7      	        RST     10H                     ; push word DE
13B0: 117805  	        LD      DE,$0578                ; addr retype?
              	
13B3: CD1518  	        CALL    L1815                   ; pr2
              	
13B6: 18E9    	        JR      L13A1                   ; loop back
              	
              	; ---
              	; =->
              	
13B8: D5      	L13B8:  PUSH    DE
13B9: C5      	        PUSH    BC
13BA: 2A373C  	        LD      HL,($3C37)              ; STKBOT
              	
13BD: CD9E0F  	        CALL    L0F9E                   ; routine MAKE ROOM
              	
13C0: C1      	        POP     BC
13C1: D1      	        POP     DE
13C2: D5      	        PUSH    DE
13C3: C5      	        PUSH    BC
13C4: EB      	        EX      DE,HL
13C5: EDB0    	        LDIR                            ; copy comment to dictionary.
13C7: C1      	        POP     BC
13C8: 50      	        LD      D,B
13C9: 59      	        LD      E,C
13CA: D7      	        RST     10H                     ; push word DE
13CB: D1      	        POP     DE
              	
13CC: CDDA07  	        CALL    L07DA                   ;
              	
13CF: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ------------
              	; THE '[' WORD
              	; ------------
              	; (  --  )
              	; Enters interpret mode.
              	
13D1: DB      	L13D1:  DEFB    '[' + $80               ; 'name field'
              	
13D2: CF12    	        DEFW    L12CF                   ; 'link field'
              	
13D4: 41      	L13D4:  DEFB    $41                     ; 'name length field' (immediate mode)
              	
13D5: D713    	L13D5:  DEFW    L13D7                   ; 'code field'
              	
              	; ---
              	
13D7: DDCB3EB6	L13D7:  RES     6,(IX+$3E)              ; FLAGS
13DB: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ------------
              	; THE ']' WORD
              	; ------------
              	; (  --  )
              	; Enters compile mode.
              	
13DD: DD      	L13DD:  DEFB    ']' + $80               ; 'name field'
              	
13DE: 1513    	        DEFW    L1315                   ; 'link field'
              	
13E0: 01      	L13E0:  DEFB    $01                     ; 'name length field'
              	
13E1: E313    	L13E1:  DEFW    L13E3                   ; 'code field'
              	
              	; ---
              	
13E3: DDCB3EF6	L13E3:  SET     6,(IX+$3E)              ; FLAGS
13E7: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	
              	; ---------------
              	; THE 'EXIT' WORD
              	; ---------------
              	; (  --  )
              	; Exits immediately from the word in whose definition it is contained.
              	; Cannot be used between DO and LOOP or +LOOP, nor between >R and R>.
              	
13E9: 455849  	L13E9:  DEFM    "EXI"                   ; 'name field'
13EC: D4      	        DEFB    'T' + $80
              	
13ED: 8713    	        DEFW    L1387                   ; 'link field'
              	
13EF: 04      	L13EF:  DEFB    $04                     ; 'name length field'
              	
13F0: B804    	L13F0:  DEFW    L04B8                   ; 'code field'
              	
              	; -------------------
              	; THE 'REDEFINE' WORD
              	; -------------------
              	; REDEFINE name
              	; (  --  )
              	; Takes word 'name' and replaces it with the most recent word in the
              	; dictionary. Updates entire dictionary to take changes into account.
              	; Most commonly used as
              	;  EDIT name
              	;  REDEFINE name
              	
13F2: 52454445	L13F2:  DEFM    "REDEFIN"               ; 'name field'
13F6: 46494E  	
13F9: C5      	        DEFB    'E' + $80
              	
13FA: EF13    	        DEFW    L13EF                   ; 'link field'
              	
13FC: 08      	L13FC:  DEFB    $08                     ; 'name length field'
              	
13FD: FF13    	L13FD:  DEFW    L13FF                   ; 'code field'
              	
              	; ---
              	
13FF: CD2E0F  	L13FF:  CALL    L0F2E                   ; blank stack
              	
1402: 2A313C  	        LD      HL,($3C31)              ; CURRENT
              	
1405: 5E      	        LD      E,(HL)
1406: 23      	        INC     HL
1407: 56      	        LD      D,(HL)
              	
1408: EB      	        EX      DE,HL                   ; transfer value to HL
1409: 23      	        INC     HL
140A: 220527  	        LD      ($2705),HL              ; store in pad
              	
140D: E5      	        PUSH    HL                      ; (*)
              	
140E: CDC015  	        CALL    L15C0                   ; get 'name field' address
              	
1411: 220D27  	        LD      ($270D),HL              ; name field addr
1414: ED430727	        LD      ($2707),BC              ; parameter field addr
1418: ED530B27	        LD      ($270B),DE              ; length field value
              	
141C: 2A373C  	        LD      HL,($3C37)              ; STKBOT
141F: ED52    	        SBC     HL,DE
1421: C2DA14  	        JP      NZ,L14DA                ; forward if not matched to Error 11.
              	
1424: D1      	        POP     DE                      ; (*)
              	
1425: D7      	        RST     10H                     ; push word DE
              	
1426: CDB904  	        CALL    L04B9                   ; forth
              	
1429: 1016    	L1429:  DEFW    L1610                   ; prvcur
142B: 3D06    	        DEFW    L063D                   ; find
142D: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
              	; ---
              	
142F: DF      	L1425:  RST     18H                     ; pop word DE
1430: 21AFC3  	        LD      HL,$C3AF
1433: 19      	        ADD     HL,DE
1434: D2CF14  	        JP      NC,L14CF                ;
              	
1437: EB      	        EX      DE,HL
1438: 220327  	        LD      ($2703),HL
              	
143B: CDC015  	        CALL    L15C0                   ; get 'name field' address
              	
143E: 220127  	        LD      ($2701),HL
              	
1441: E5      	L1441:  PUSH    HL
1442: ED530927	        LD      ($2709),DE
1446: 78      	        LD      A,B
1447: B1      	        OR      C
1448: ED5B0727	        LD      DE,($2707)
144C: 2804    	        JR      Z,L1452                 ;
              	
144E: 7A      	        LD      A,D
144F: B3      	        OR      E
1450: 287D    	        JR      Z,L14CF                 ;
              	
1452: E1      	L1452:  POP     HL
1453: ED4B0D27	        LD      BC,($270D)
1457: ED42    	        SBC     HL,BC
1459: EB      	        EX      DE,HL
145A: 19      	        ADD     HL,DE
145B: 220727  	        LD      ($2707),HL
145E: 2A0B27  	        LD      HL,($270B)
1461: 19      	        ADD     HL,DE
1462: ED4B0927	        LD      BC,($2709)
1466: A7      	        AND     A
1467: ED42    	        SBC     HL,BC
1469: 220B27  	        LD      ($270B),HL
146C: 012E00  	        LD      BC,$002E                ; 46d
146F: 09      	        ADD     HL,BC
1470: CB7C    	        BIT     7,H
1472: 200B    	        JR      NZ,L147F                ;
              	
1474: ED4B3B3C	        LD      BC,($3C3B)              ; SPARE
1478: 09      	        ADD     HL,BC
1479: 3854    	        JR      C,L14CF                 ;
              	
147B: ED72    	        SBC     HL,SP
147D: 3050    	        JR      NC,L14CF                ;
              	
147F: 2A0327  	L147F:  LD      HL,($2703)
1482: E5      	        PUSH    HL
1483: 2B      	        DEC     HL
1484: 2B      	        DEC     HL
1485: 46      	        LD      B,(HL)
1486: 2B      	        DEC     HL
1487: 4E      	        LD      C,(HL)
1488: 2A0527  	        LD      HL,($2705)
148B: E5      	        PUSH    HL
148C: 2B      	        DEC     HL
148D: 2B      	        DEC     HL
148E: 70      	        LD      (HL),B
148F: 2B      	        DEC     HL
1490: 71      	        LD      (HL),C
1491: E1      	        POP     HL
1492: 19      	        ADD     HL,DE
1493: C1      	        POP     BC
1494: A7      	        AND     A
1495: ED42    	        SBC     HL,BC
1497: 220527  	        LD      ($2705),HL
149A: ED5B0127	        LD      DE,($2701)
149E: 2A0927  	        LD      HL,($2709)
14A1: A7      	        AND     A
14A2: ED52    	        SBC     HL,DE
14A4: 44      	        LD      B,H
14A5: 4D      	        LD      C,L
14A6: D5      	        PUSH    DE
14A7: C5      	        PUSH    BC
              	
14A8: CDDC14  	        CALL    L14DC                   ; RECLAIM
              	
14AB: 2A0B27  	        LD      HL,($270B)
14AE: C1      	        POP     BC
14AF: 09      	        ADD     HL,BC
14B0: 44      	        LD      B,H
14B1: 4D      	        LD      C,L
14B2: E1      	        POP     HL
14B3: C5      	        PUSH    BC
              	
14B4: CD9E0F  	        CALL    L0F9E                   ; routine MAKE ROOM
              	
14B7: EB      	        EX      DE,HL                   ;
14B8: 2A0D27  	        LD      HL,($270D)              ;
14BB: ED4B0B27	        LD      BC,($270B)              ;
14BF: 09      	        ADD     HL,BC                   ;
14C0: C1      	        POP     BC                      ;
14C1: C5      	        PUSH    BC                      ;
14C2: E5      	        PUSH    HL                      ;
              	
14C3: EDB0    	        LDIR                            ;
              	
14C5: D1      	        POP     DE
14C6: C1      	        POP     BC
              	
14C7: CDDC14  	        CALL    L14DC                   ; RECLAIM
14CA: CDF814  	        CALL    L14F8                   ;
              	
14CD: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
14CF: 2A313C  	L14CF:  LD      HL,($3C31)              ; CURRENT
14D2: ED5B0527	        LD      DE,($2705)
14D6: 1B      	        DEC     DE
14D7: 73      	        LD      (HL),E
14D8: 23      	        INC     HL
14D9: 72      	        LD      (HL),D
              	
14DA: E7      	L14DA:  RST     20H                     ; Error 11
14DB: 0B      	        DEFB    $0B                     ; Error in REDEFINE or FORGET
              	
              	; ---------------------------
              	; THE 'RECLAIMING' SUBROUTINE
              	; ---------------------------
              	
14DC: 2A373C  	L14DC:  LD      HL,($3C37)              ; fetch STKBOT
14DF: A7      	        AND     A                       ; clear carry flag
14E0: ED42    	        SBC     HL,BC                   ; subtract number of bytes to reclaim.
14E2: 22373C  	        LD      ($3C37),HL              ; update STKBOT
              	
14E5: 2A3B3C  	        LD      HL,($3C3B)              ; fetch SPARE
14E8: ED42    	        SBC     HL,BC                   ; subtract number of bytes to reclaim.
14EA: 223B3C  	        LD      ($3C3B),HL              ; update SPARE
              	
14ED: ED52    	        SBC     HL,DE                   ; subtract
14EF: C8      	        RET     Z                       ; return if same address.
              	
14F0: C5      	        PUSH    BC                      ;
14F1: 44      	        LD      B,H                     ;
14F2: 4D      	        LD      C,L                     ;
14F3: E1      	        POP     HL                      ;
14F4: 19      	        ADD     HL,DE                   ;
              	
14F5: EDB0    	        LDIR                            ;
              	
14F7: C9      	        RET                             ;
              	
              	; ---
              	;
              	; ---
              	
14F8: 01313C  	L14F8:  LD      BC,$3C31                ; CURRENT
              	
14FB: CD5715  	        CALL    L1557                   ;
14FE: CD5715  	        CALL    L1557                   ;
              	
1501: 01403C  	        LD      BC,$3C40                ; addr. of "FORTH" in RAM.
              	
1504: 2A373C  	L1504:  LD      HL,($3C37)              ; STKBOT
1507: 37      	        SCF                             ;
1508: ED42    	        SBC     HL,BC                   ;
150A: D8      	        RET     C                       ;
              	
150B: 0A      	L150B:  LD      A,(BC)                  ;
150C: 17      	        RLA                             ;
150D: 03      	        INC     BC                      ;
150E: 30FB    	        JR      NC,L150B                ;
              	
1510: 03      	        INC     BC                      ;
1511: 03      	        INC     BC                      ;
1512: CD5715  	        CALL    L1557                   ;
1515: 03      	        INC     BC                      ;
1516: CD5715  	        CALL    L1557                   ;
              	
1519: CDFB15  	L1519:  CALL    L15FB                   ; routine INDEXER
              	
              	; -------------------------------------------------------
              	
151C: C30E    	        DEFW    L0EC3                   ; DE value
151E: 1C      	L151E:  DEFB    $1C                     ; to L153A
              	
151F: 8510    	        DEFW    L1085                   ; DE value
1521: 16      	L1521:  DEFB    $16                     ; to L1537
              	
1522: 0811    	        DEFW    L1108                   ; DE value
1524: 13      	L1524:  DEFB    $13                     ; to L1537
              	
1525: B511    	        DEFW    L11B5                   ; DE value
1527: 18      	L1527:  DEFB    $18                     ; to L153F
              	
1528: 0000    	        DEFW    $0000                   ; zero end marker
              	
              	; -------------------------------------------------------
              	
152A: 21F9FF  	L152A:  LD      HL,$FFF9
152D: 09      	        ADD     HL,BC
              	
152E: 4E      	        LD      C,(HL)
152F: 23      	        INC     HL
1530: 46      	        LD      B,(HL)
1531: 2B      	        DEC     HL
              	
1532: 09      	        ADD     HL,BC
              	
1533: 44      	        LD      B,H
1534: 4D      	        LD      C,L
1535: 18CD    	        JR      L1504                   ;
              	
              	; -------------------------------------------------------
              	
1537: CD5715  	L1537:  CALL    L1557                   ;
              	
              	; ->
              	
153A: CD4815  	L153A:  CALL    L1548                   ;
153D: 18C5    	        JR      L1504                   ;
              	
              	; ---
              	
153F: CD5715  	L153F:  CALL    L1557                   ;
1542: 03      	        INC     BC                      ;
1543: CD5715  	        CALL    L1557                   ;
1546: 18BC    	        JR      L1504                   ;
              	
              	; -------------------------------------------------------
              	
              	; XXX?
              	
1548: CD5715  	L1548:  CALL    L1557                   ;
154B: 21B604  	        LD      HL,L04B6                ;
154E: A7      	        AND     A                       ;
154F: ED52    	        SBC     HL,DE                   ;
1551: C8      	        RET     Z                       ;
              	
1552: CD9E15  	        CALL    L159E                   ;
              	
1555: 18F1    	        JR      L1548                   ;
              	
              	; ---
              	; often called twice
              	; ---
              	
              	
1557: 0A      	L1557:  LD      A,(BC)                  ; lo byte
1558: 5F      	        LD      E,A                     ;
1559: 03      	        INC     BC                      ;
155A: 0A      	        LD      A,(BC)                  ; hi byte
155B: 57      	        LD      D,A                     ;
155C: 0B      	        DEC     BC                      ; BC now unchanged, DE contents
              	
155D: CD6815  	        CALL    L1568                   ; routine below. header?
              	
1560: EB      	        EX      DE,HL                   ; value to DE
1561: 7B      	        LD      A,E                     ;
1562: 02      	        LD      (BC),A                  ; lo byte
1563: 03      	        INC     BC                      ;
1564: 7A      	        LD      A,D                     ;
1565: 02      	        LD      (BC),A                  ; hi byte
1566: 03      	        INC     BC                      ;
1567: C9      	        RET                             ; to next - BC+=2
              	
              	; ---
              	
1568: 2A0127  	L1568:  LD      HL,($2701)              ; first bytes of pad.
156B: A7      	        AND     A                       ;
156C: ED52    	        SBC     HL,DE                   ; subtract the DE value read from
              	                                        ; memory
156E: 62      	        LD      H,D                     ;
156F: 6B      	        LD      L,E                     ; transfer that DE to HL as well
              	
1570: D0      	        RET     NC                      ; return if HL was higher than DE
              	
1571: 2A0927  	        LD      HL,($2709)              ; tape header
1574: ED52    	        SBC     HL,DE
1576: 300C    	        JR      NC,L1584                ; forward if higher to
              	
1578: 2A0D27  	        LD      HL,($270D)
157B: ED52    	        SBC     HL,DE
157D: 3813    	        JR      C,L1592                 ; forward if lower to
              	
157F: 2A0B27  	        LD      HL,($270B)              ;
1582: 19      	        ADD     HL,DE
1583: C9      	        RET                             ; return
              	
              	; ---
              	
1584: 2A0327  	L1584:  LD      HL,($2703)
1587: ED52    	        SBC     HL,DE
1589: 2A0727  	        LD      HL,($2707)
158C: D8      	        RET     C
              	
158D: 2A0527  	        LD      HL,($2705)
1590: 19      	        ADD     HL,DE
1591: C9      	        RET
              	
              	; ---
              	
1592: 2A0127  	L1592:  LD      HL,($2701)
1595: 19      	        ADD     HL,DE
1596: ED5B0D27	        LD      DE,($270D)
159A: A7      	        AND     A
159B: ED52    	        SBC     HL,DE
159D: C9      	        RET
              	
              	; ---
              	
159E: 1B      	L159E:  DEC     DE
159F: 1A      	        LD      A,(DE)
15A0: 17      	        RLA
15A1: D0      	        RET     NC
              	
15A2: 1B      	L15A2:  DEC     DE
15A3: 1B      	        DEC     DE
15A4: 1A      	        LD      A,(DE)
15A5: 6F      	        LD      L,A                     ; low byte
15A6: 2600    	        LD      H,$00                   ; make high byte zero
15A8: 3C      	        INC     A                       ; test offset for $FF.
15A9: 2006    	        JR      NZ,L15B1                ; forward if not.
              	
15AB: 0A      	        LD      A,(BC)
15AC: 6F      	        LD      L,A
15AD: 03      	        INC     BC
15AE: 0A      	        LD      A,(BC)
15AF: 67      	        LD      H,A
15B0: 03      	        INC     BC
              	
15B1: 09      	L15B1:  ADD     HL,BC
              	
15B2: 44      	        LD      B,H
15B3: 4D      	        LD      C,L
15B4: C9      	        RET
              	
              	; ---
              	;
              	; ---
              	
              	
15B5: B715    	L15B5:  DEFW    L15B7
              	
              	; ---
              	
15B7: DF      	L15B7:  RST     18H                     ; pop word DE
              	
15B8: EB      	        EX      DE,HL
              	
15B9: CDE715  	        CALL    L15E7                   ; WORDSTART1
              	
15BC: EB      	        EX      DE,HL
              	
15BD: D7      	        RST     10H                     ; push word DE
15BE: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	;
              	; ---
              	
15C0: E5      	L15C0:  PUSH    HL
15C1: 5E      	        LD      E,(HL)
15C2: 23      	        INC     HL
15C3: 56      	        LD      D,(HL)
              	
15C4: CDFB15  	L15C4:  CALL    L15FB                   ; routine INDEXER
              	
              	; -------------------------------------------------------
              	
15C7: 0811    	        DEFW    L1108
15C9: 0B      	L15C9:  DEFB    $0B                     ; to L15D4 - find parameter field
              	
15CA: 8510    	        DEFW    L1085
15CC: 08      	L15CC:  DEFB    $08                     ; to L15D4 - find parameter field
              	
15CD: 0000    	        DEFW    $0000                   ; zero end_marker.
              	
              	; -------------------------------------------------------
              	
15CF: 010000  	L15CF:  LD      BC,$0000                ; zero indicates no parameter field.
15D2: 1807    	        JR      L15DB                   ; forward to consider total length.
              	
              	; -------------------------------------------------------
              	
15D4: E1      	L15D4:  POP     HL                      ; retrieve the code field address
15D5: E5      	        PUSH    HL                      ; save it again
              	
15D6: 23      	        INC     HL                      ; step past the
15D7: 23      	        INC     HL                      ; address word
15D8: 4E      	        LD      C,(HL)                  ; and get following address
15D9: 23      	        INC     HL                      ; which if in RAM could be the
15DA: 46      	        LD      B,(HL)                  ; parameter field to              BC.
              	
              	; ->
              	
15DB: E1      	L15DB:  POP     HL                      ; retrieve the code field address
15DC: E5      	        PUSH    HL                      ; and save it again
              	
15DD: 2B      	        DEC     HL                      ; the name length field
15DE: 2B      	        DEC     HL                      ; link field high order byte
15DF: 2B      	        DEC     HL                      ; link field low order byte
15E0: 2B      	        DEC     HL                      ; possible length field high
15E1: 56      	        LD      D,(HL)                  ; save in D
15E2: 2B      	        DEC     HL                      ; possible length field low
15E3: 5E      	        LD      E,(HL)                  ; save in E
15E4: 19      	        ADD     HL,DE                   ; add this length
15E5: EB      	        EX      DE,HL                   ; and save result in              DE.
              	
15E6: E1      	        POP     HL                      ; retrieve code field address
              	
              	; ->
              	; indexes the header information of a FORTH word
              	
15E7: 2B      	L15E7:  DEC     HL                      ; point to name length field
              	
              	; =>
15E8: 7C      	L15E8:  LD      A,H                     ; fetch high order byte of the
              	                                        ; header address.
15E9: FE3C    	        CP      $3C                     ; compare to RAM location
15EB: 7E      	        LD      A,(HL)                  ; fetch length byte.
15EC: CBB7    	        RES     6,A                     ; reset the immediate mode bit
15EE: 3802    	        JR      C,L15F2                 ; forward if definition is in ROM.
              	
15F0: C602    	        ADD     A,$02                   ; else add extra for 'length field'
              	
15F2: 2B      	L15F2:  DEC     HL                      ; step past the
15F3: 2B      	        DEC     HL                      ; link to previous word.
              	
15F4: 2B      	L15F4:  DEC     HL                      ; now address last letter on name.
15F5: 3D      	        DEC     A                       ; decrement the length
15F6: 20FC    	        JR      NZ,L15F4                ; loop back until at first letter  HL.
              	
15F8: C9      	        RET                             ; return.
              	
              	; -------
              	; INDEXER
              	; -------
              	
              	; indexerloop
              	
15F9: 23      	L15F9:  INC     HL                      ; step past the
15FA: E5      	        PUSH    HL                      ; offset byte.
              	
              	; -> Call Entry point
              	
15FB: E1      	L15FB:  POP     HL                      ; drop return address - points to byte
              	                                        ; after the call.
15FC: 7E      	        LD      A,(HL)                  ; read low-order byte
15FD: 23      	        INC     HL                      ; increment address once
15FE: E5      	        PUSH    HL                      ; push return address
              	
15FF: 66      	        LD      H,(HL)                  ; read high-order byte.
1600: 6F      	        LD      L,A                     ; now HL holds the read word
1601: B4      	        OR      H                       ; test for two zeros.
1602: C8      	        RET     Z                       ; two zeros - return
              	                                        ; (ret addr is second NOP)
              	
1603: ED52    	        SBC     HL,DE                   ; compare to value passed in DE
              	
1605: E1      	        POP     HL                      ; now increment the
1606: 23      	        INC     HL                      ; return address on machine stack.
              	
1607: 20F0    	        JR      NZ,L15F9                ; loop back if read word is not
              	                                        ; equal to DE
              	
1609: D5      	        PUSH    DE                      ; else preserve DE
              	
160A: 1600    	        LD      D,$00                   ; a 1 byte relative jump.
160C: 5E      	        LD      E,(HL)                  ; read one-byte offset.
160D: 19      	        ADD     HL,DE                   ; add to read address.
              	
160E: D1      	        POP     DE                      ; restore DE
              	
160F: E9      	        JP      (HL)                    ; >>>
              	
              	; ---
              	
1610: C30E    	L1610:  DEFW    L0EC3                   ; 'code field' - docolon
              	
1612: 1F0E    	        DEFW    L0E1F                   ; 1-
1614: 290E    	        DEFW    L0E29                   ; 2-
1616: B308    	        DEFW    L08B3                   ; @
1618: 8004    	        DEFW    L0480                   ; current
161A: B308    	        DEFW    L08B3                   ; @
161C: C108    	        DEFW    L08C1                   ; !
161E: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---------------------------------
              	; THE 'FIND WORD IN RAM' SUBROUTINE
              	; ---------------------------------
              	; This subroutine is used by FORGET, EDIT and LIST.
              	; First use the standard FORTH word find to get address of word (in pad).
              	; If word does not exist then returned value will be zero.
              	; The lowest word in RAM is the FORTH word at L3C51 so a check is made
              	; against this address.
              	
1620: CDB904  	L1620:  CALL    L04B9                   ; forth
1623: 3D06    	        DEFW    L063D                   ; find
              	
1625: 0E1A    	L1625:  DEFW    L1A0E                   ; end-forth.
              	
1627: DF      	        RST     18H                     ; pop word DE
              	
1628: 21AFC3  	        LD      HL,$C3AF                ; i.e $0000 - $3C51
              	
162B: 19      	        ADD     HL,DE                   ; add to test value.
162C: D8      	        RET     C                       ; carry signals that word exists in RAM.
              	                                        ; return the address in DE.
              	
              	; else generate an error code.
              	
162D: E7      	        RST     20H                     ; Error 13
162E: 0D      	        DEFB    $0D                     ; Error word not found or is in ROM.
              	
              	; -----------------
              	; THE 'FORGET' WORD
              	; -----------------
              	; FORGET name.
              	; Erases the word 'name' and all subsequently defined names from the dictionary.
              	
162F: 464F5247	L162F:  DEFM    "FORGE"                 ; 'name field'
1633: 45      	
1634: D4      	        DEFB    'T' + $80
              	
1635: FC13    	        DEFW    L13FC                   ; 'link field'
              	
1637: 06      	L1637:  DEFB    $06                     ; 'name length field'
              	
1638: 3A16    	L1638:  DEFW    L163A                   ; 'code field'
              	
              	; ---
              	
163A: 2A313C  	L163A:  LD      HL,($3C31)              ; CURRENT
163D: ED5B333C	        LD      DE,($3C33)              ; CONTEXT
1641: A7      	        AND     A
1642: ED52    	        SBC     HL,DE
              	
1644: C2DA14  	        JP      NZ,L14DA                ;
              	
1647: CD2016  	        CALL    L1620                   ; findramword
              	
164A: 21FBFF  	        LD      HL,$FFFB
164D: 19      	        ADD     HL,DE
164E: 22393C  	        LD      ($3C39),HL              ; SPARE
1651: DDCB3ED6	        SET     2,(IX+$3E)              ; FLAGS
              	
1655: E7      	        RST     20H                     ; Invoke error routine.
1656: FF      	        DEFB    $FF                     ; No error
              	
              	; ---------------
              	; THE 'EDIT' WORD
              	; ---------------
              	; EDIT name
              	; Lists word 'name' at bottom of the screen to be edited. Lists 18 lines at
              	; a time, then waits for editing until ENTER is pressed.
              	; A new version of the word is entered at the end of the dictionary.
              	; While editing, cursor up and cursor down are needed to move the cursor
              	; from one line to another. DELETE LINE deletes one line.
              	
1657: 454449  	L1657:  DEFM    "EDI"                   ; 'name field'
165A: D4      	        DEFB    'T' + $80
              	
165B: 3716    	        DEFW    L1637                   ; 'link field'
              	
165D: 04      	L165D:  DEFB    $04                     ; 'name length field'
              	
165E: 6016    	L165E:  DEFW    L1660                   ; 'code field'
              	
              	; ---
              	
1660: CD2016  	L1660:  CALL    L1620                   ; findramword
              	
1663: DDCB3EDE	        SET     3,(IX+$3E)              ; update FLAGS output -> input buffer
1667: 180C    	        JR      L1675                   ; forward to list routine the difference
              	                                        ; being that the listing will go to the
              	                                        ; lower screen.
              	
              	; ---------------
              	; THE 'LIST' WORD
              	; ---------------
              	; LIST name
              	; (  --  )
              	; Lists word 'name' on the screen. It must have been defined by :, DEFINER,
              	; or COMPILER. Lists about 18 lines at a time and waits for key depression
              	; (shifted space breaks).
              	
1669: 4C4953  	L1669:  DEFM    "LIS"                   ; 'name field'
166C: D4      	        DEFB    'T' + $80
              	
166D: 5D16    	        DEFW    L165D                   ; 'link field'
              	
166F: 04      	L166F:  DEFB    $04                     ; 'name length field'
              	
1670: 7216    	L1670:  DEFW    L1672                   ; 'code field'
              	
              	; ---
              	
1672: CD2016  	L1672:  CALL    L1620                   ; findramword
              	
              	; edit path joins here but carriage returns are printed as zeros.
              	
1675: 3E0D    	L1675:  LD      A,$0D                   ; prepare a carriage return.
1677: CF      	        RST     08H                     ; print_ch
              	
1678: DDCB3E5E	        BIT     3,(IX+$3E)              ; test FLAGS output->input buffer?
              	
167C: D5      	        PUSH    DE
              	
167D: C4D802  	        CALL    NZ,L02D8                ; call if so to initialize buffer
              	
1680: C1      	        POP     BC                      ; LD DE,(BC)
              	
1681: 0A      	        LD      A,(BC)
1682: 5F      	        LD      E,A
1683: 03      	        INC     BC
1684: 0A      	        LD      A,(BC)
1685: 57      	        LD      D,A
1686: 0B      	        DEC     BC
              	
1687: CDFB15  	        CALL    L15FB                   ; routine INDEXER
              	
              	; -------------------------------------------------------
              	
168A: C30E    	L168A:  DEFW    L0EC3                   ; DE value
168C: 0B      	L168C:  DEFB    $0B                     ; offset to L1697
              	
168D: 0811    	L168D:  DEFW    L1108                   ; DE value
168F: 0D      	L168F:  DEFB    $0D                     ; offset to L169C
              	
1690: 8510    	L1690:  DEFW    L1085                   ; DE value
1692: 1F      	L1692:  DEFB    $1F                     ; offset to L16B1
              	
1693: 0000    	        DEFW    $0000                   ; zero end-marker
              	
              	; -------------------------------------------------------
              	
1695: E7      	L1695:  RST     20H                     ; Error 14
1696: 0E      	        DEFB    $0E                     ; Word unlistable.
              	
              	; Only words defined by ':', 'DEFINER' or 'COMPILER' are listable.
              	
              	; -------------------------------------------------------
              	
              	; ':'
1697: 210200  	L1697:  LD      HL,$0002
169A: 1818    	        JR      L16B4                   ;
              	; ---
              	
169C: D5      	L169C:  PUSH    DE
169D: 210200  	        LD      HL,$0002
16A0: 09      	        ADD     HL,BC
16A1: 7E      	        LD      A,(HL)
16A2: 23      	        INC     HL
16A3: 66      	        LD      H,(HL)
16A4: 6F      	        LD      L,A
16A5: 2B      	        DEC     HL
16A6: 2B      	        DEC     HL
16A7: 2B      	        DEC     HL
              	
16A8: 6E      	        LD      L,(HL)
16A9: 7D      	        LD      A,L
16AA: 07      	        RLCA
16AB: 9F      	        SBC     A,A
16AC: 67      	        LD      H,A
              	
16AD: CD0E18  	        CALL    L180E                   ; pr_int_hl?
              	
16B0: D1      	        POP     DE
              	
16B1: 210400  	L16B1:  LD      HL,$0004
              	
              	
16B4: 09      	L16B4:  ADD     HL,BC
16B5: E5      	        PUSH    HL
16B6: C5      	        PUSH    BC
              	
16B7: CDE417  	        CALL    L17E4                   ;
              	
16BA: D1      	        POP     DE
16BB: C1      	        POP     BC
              	
16BC: CDE417  	        CALL    L17E4                   ;
              	
16BF: DD361401	        LD      (IX+$14),$01            ; LISTWSx
              	
16C3: DD361610	L16C3:  LD      (IX+$16),$10            ; LISTWSx
              	
16C7: CD0817  	L16C7:  CALL    L1708                   ; index_table
              	
16CA: 3806    	        JR      C,L16D2                 ;
              	
16CC: DD3516  	        DEC     (IX+$16)                ; LISTWSx
16CF: F2C716  	        JP      P,L16C7                 ;
              	
16D2: DDCB3E5E	L16D2:  BIT     3,(IX+$3E)              ; FLAGS
16D6: 2010    	        JR      NZ,L16E8                ; branch forward  =->
              	
16D8: 3828    	        JR      C,L1702                 ;
              	
16DA: 21263C  	        LD      HL,$3C26                ; KEYCOD
16DD: 3600    	        LD      (HL),$00                ;
              	
16DF: 7E      	L16DF:  LD      A,(HL)                  ;
16E0: A7      	        AND     A                       ;
16E1: 28FC    	        JR      Z,L16DF                 ; loop back while zero
              	
16E3: CDE404  	        CALL    L04E4                   ; check break
              	
16E6: 18DB    	        JR      L16C3                   ; loop back
              	
              	; =->
              	
16E8: F5      	L16E8:  PUSH    AF
16E9: DDCB3E9E	        RES     3,(IX+$3E)              ; FLAGS
16ED: C5      	        PUSH    BC
              	
16EE: CDB904  	        CALL    L04B9                   ; forth
              	
16F1: 7805    	        DEFW    L0578                   ; retype        - allow user to retype
16F3: 0605    	        DEFW    L0506                   ; line          - interpret buffer
16F5: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
              	
16F7: DDCB3EDE	        SET     3,(IX+$3E)              ; FLAGS
              	
16FB: CDD802  	        CALL    L02D8                   ;
              	
16FE: C1      	        POP     BC
16FF: F1      	        POP     AF
1700: 30C1    	        JR      NC,L16C3                ;
              	
1702: DDCB3E9E	L1702:  RES     3,(IX+$3E)              ; FLAGS
1706: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------------------------------------------------
              	
              	; called once
              	
1708: 3A143C  	L1708:  LD      A,($3C14)               ; LISTWS2
170B: 32153C  	        LD      ($3C15),A               ; LISTWS3
              	
170E: DD361305	        LD      (IX+$13),$05            ; LISTWS
              	
1712: 0A      	L1712:  LD      A,(BC)
1713: 5F      	        LD      E,A
1714: 03      	        INC     BC
1715: 0A      	        LD      A,(BC)
1716: 57      	        LD      D,A
1717: 03      	        INC     BC
              	
1718: CDFB15  	L1718:  CALL    L15FB                   ; routine INDEXER
              	
              	; -------------------------------------------------------
              	
171B: 8312    	L171B:  DEFW    L1283                   ;
171D: 40      	L171D:  DEFB    $40                     ; offset to L175D
              	
171E: 7112    	L171E:  DEFW    L1271                   ;
1720: 44      	L1720:  DEFB    $44                     ; offset to L1764
              	
1721: A412    	L1721:  DEFW    L12A4                   ;
1723: 48      	L1723:  DEFB    $48                     ; offset to L176B
              	
1724: 9F12    	L1724:  DEFW    L129F                   ;
1726: 37      	L1726:  DEFB    $37                     ; offset to L175D
              	
1727: 8D12    	L1727:  DEFW    L128D                   ;
1729: 42      	L1729:  DEFB    $42                     ; offset to L176B
              	
172A: 8812    	L172A:  DEFW    L1288                   ;
172C: 38      	L172C:  DEFB    $38                     ; offset to L1764
              	
172D: 7612    	L172D:  DEFW    L1276                   ;
172F: 3C      	L172F:  DEFB    $3C                     ; offset to L176B
              	
1730: 2313    	L1730:  DEFW    L1323                   ;
1732: 2B      	L1732:  DEFB    $2B                     ; offset to L175D
              	
1733: 3213    	L1733:  DEFW    L1332                   ;
1735: 36      	L1735:  DEFB    $36                     ; offset to L176B
              	
1736: 3C13    	L1736:  DEFW    L133C                   ;
1738: 33      	L1738:  DEFB    $33                     ; offset to L176B
              	
1739: E810    	L1739:  DEFW    L10E8                   ;
173B: 29      	L173B:  DEFB    $29                     ; offset to L1764
              	
173C: 4011    	L173C:  DEFW    L1140                   ;
173E: 26      	L173E:  DEFB    $26                     ; offset to L1764
              	
173F: 1110    	L173F:  DEFW    L1011                   ;
1741: 3B      	L1741:  DEFB    $3B                     ; offset to L177C
              	
1742: 6410    	L1742:  DEFW    L1064                   ;
1744: 47      	L1744:  DEFB    $47                     ; offset to L178B
              	
1745: 4B10    	L1745:  DEFW    L104B                   ;
1747: 51      	L1747:  DEFB    $51                     ; offset to L1798
              	
1748: 7913    	L1748:  DEFW    L1379                   ;
174A: 62      	L174A:  DEFB    $62                     ; offset to L17AC
              	
174B: 9613    	L174B:  DEFW    L1396                   ;
174D: 63      	L174D:  DEFB    $63                     ; offset to L17B0
              	
174E: B604    	L174E:  DEFW    L04B6                   ;
1750: 54      	L1750:  DEFB    $54                     ; offset to L17A4
              	
1751: 0000    	L1751:  DEFW    $0000                   ; zero end-marker
              	
              	; -------------------------------------------------------
              	
              	; default action
              	
1753: CDE117  	L1753:  CALL    L17E1                   ;
              	
1756: DD3513  	L1756:  DEC     (IX+$13)                ; LISTWS
1759: 20B7    	        JR      NZ,L1712                ;
175B: A7      	        AND     A
175C: C9      	        RET
              	
              	; ---
              	
175D: 2A143C  	L175D:  LD      HL,($3C14)              ; LISTWS2
1760: 65      	        LD      H,L
1761: 2C      	        INC     L
1762: 180C    	        JR      L1770                   ;
              	
              	; ---
              	
1764: 2A143C  	L1764:  LD      HL,($3C14)              ; LISTWS2
1767: 65      	        LD      H,L
1768: 25      	        DEC     H
1769: 1805    	        JR      L1770                   ;
              	
              	; ---
              	
176B: 2A143C  	L176B:  LD      HL,($3C14)              ; LISTWS2
176E: 2D      	        DEC     L
176F: 65      	        LD      H,L
              	
1770: 22143C  	L1770:  LD      ($3C14),HL              ; LISTWS2
1773: DD361301	        LD      (IX+$13),$01            ; LISTWS
1777: DD3516  	        DEC     (IX+$16)                ; LISTWSx
177A: 18D7    	        JR      L1753                   ;
              	
              	; ---
              	
177C: CDDA17  	L177C:  CALL    L17DA                   ;
              	
177F: D7      	        RST     10H                     ; push word DE
1780: 11B309  	        LD      DE,$09B3                ; '.' addr
              	
1783: CDC117  	L1783:  CALL    L17C1                   ; routine INDENT
1786: CD1518  	        CALL    L1815                   ; pr2
              	
1789: 18CB    	        JR      L1756                   ;
              	
              	; ---
              	
178B: CDDA17  	L178B:  CALL    L17DA                   ;
178E: D7      	        RST     10H                     ; push word DE
178F: CDDA17  	        CALL    L17DA                   ;
1792: D7      	        RST     10H                     ; push word DE
1793: 11AF0A  	        LD      DE,$0AAF                ; 'F.' addr
1796: 18EB    	        JR      L1783                   ;
              	
              	; ---
              	
1798: 0A      	L1798:  LD      A,(BC)
1799: F5      	        PUSH    AF
              	
179A: CDE117  	        CALL    L17E1                   ;
              	
179D: F1      	        POP     AF
179E: CF      	        RST     08H                     ; print_ch
              	
179F: 3E20    	        LD      A,$20                   ; a space character
17A1: CF      	        RST     08H                     ; print_ch
              	
17A2: 18B2    	        JR      L1756                   ;
              	
              	; ---
              	
17A4: CD0818  	L17A4:  CALL    L1808                   ; pr_inline
              	
17A7: 0D      	        DEFB    $0D                     ; newline
17A8: 3B      	        DEFB    ';'                     ; ;
17A9: 8D      	        DEFB    $8D                     ; inverted newline
              	
17AA: 37      	        SCF                             ;
17AB: C9      	        RET                             ;
              	
              	; ---
              	
17AC: 3E29    	L17AC:  LD      A,$29                   ; character ')' - end of comment.
17AE: 1802    	        JR      L17B2                   ;
              	
17B0: 3E22    	L17B0:  LD      A,$22                   ; character '"' - quote
              	
17B2: F5      	L17B2:  PUSH    AF
17B3: C5      	        PUSH    BC
17B4: CDE117  	        CALL    L17E1                   ;
17B7: D1      	        POP     DE
17B8: CD7909  	        CALL    L0979                   ; pr_string1
17BB: 42      	        LD      B,D
17BC: 4B      	        LD      C,E
17BD: F1      	        POP     AF
              	
17BE: CF      	        RST     08H                     ; print_ch
              	
17BF: A7      	        AND     A
17C0: C9      	        RET
              	
              	; -------------------------------------------------------
              	
17C1: 3A153C  	L17C1:  LD      A,($3C15)               ; LISTWS3
17C4: A7      	        AND     A
17C5: F8      	        RET     M
              	
17C6: C5      	        PUSH    BC                      ; preserve BC
17C7: 47      	        LD      B,A                     ; transfer count to B
              	
17C8: 3E0D    	        LD      A,$0D                   ; carriage return.
17CA: CF      	        RST     08H                     ; print_ch
              	
17CB: 04      	        INC     B                       ; test indentation.
17CC: 05      	        DEC     B                       ;
17CD: 2805    	        JR      Z,L17D4                 ;
              	
17CF: 3E20    	L17CF:  LD      A,$20                   ; a space character
17D1: CF      	        RST     08H                     ; print_ch
              	
17D2: 10FB    	        DJNZ    L17CF                   ;
              	
17D4: DD3615FF	L17D4:  LD      (IX+$15),$FF            ; LISTWS3
              	
17D8: C1      	        POP     BC                      ; restore BC
17D9: C9      	        RET                             ; return.
              	
              	; ---
              	
17DA: 0A      	L17DA:  LD      A,(BC)
17DB: 5F      	        LD      E,A
17DC: 03      	        INC     BC
17DD: 0A      	        LD      A,(BC)
17DE: 57      	        LD      D,A
17DF: 03      	L17DF:  INC     BC
17E0: C9      	        RET
              	
              	; ---
              	
17E1: CDC117  	L17E1:  CALL    L17C1                   ; routine INDENT
              	
17E4: EB      	L17E4:  EX      DE,HL
17E5: 2B      	        DEC     HL
17E6: 7E      	        LD      A,(HL)
17E7: CB7F    	        BIT     7,A
17E9: 2005    	        JR      NZ,L17F0                ;
              	
17EB: CDE815  	        CALL    L15E8                   ; routine WORDSTART
              	
17EE: 180B    	        JR      L17FB                   ;
              	
              	; ---
              	
17F0: EB      	L17F0:  EX      DE,HL
              	
17F1: CDA215  	        CALL    L15A2                   ;
              	
17F4: 13      	        INC     DE
17F5: 1A      	        LD      A,(DE)
17F6: 6F      	        LD      L,A
17F7: 13      	        INC     DE
17F8: 1A      	        LD      A,(DE)
17F9: 67      	        LD      H,A
17FA: 19      	        ADD     HL,DE
              	
              	; pr_string_sp
              	
17FB: 7E      	L17FB:  LD      A,(HL)
17FC: E67F    	        AND     $7F
17FE: CF      	        RST     08H                     ; print_ch
17FF: CB7E    	        BIT     7,(HL)
1801: 23      	        INC     HL
1802: 28F7    	        JR      Z,L17FB                 ;
              	
1804: 3E20    	        LD      A,$20
1806: CF      	        RST     08H                     ; print_ch
1807: C9      	        RET
              	
              	; ---------------------------------------
              	; THE 'INLINE PRINT STRING SPACE' ROUTINE
              	; ---------------------------------------
              	;
              	
1808: E3      	L1808:  EX      (SP),HL
1809: CDFB17  	        CALL    L17FB                   ; pr_string_sp
180C: E3      	        EX      (SP),HL
180D: C9      	        RET
              	
              	; ---------------------------
              	; THE 'PRINT INTEGER' ROUTINE
              	; ---------------------------
              	; in HL
              	
              	; -> called twice
180E: 11B309  	L180E:  LD      DE,$09B3                ; '.' addr
1811: D5      	        PUSH    DE                      ; but save it as we need DE?
              	
1812: EB      	        EX      DE,HL                   ; transfer HL to DE.
1813: D7      	        RST     10H                     ; push word DE, was HL, on Data Stack.
1814: D1      	        POP     DE                      ; restore L09B3 again
              	
              	; -> called twice.
1815: C5      	L1815:  PUSH    BC                      ; preserve BC.
              	
1816: CDBF04  	        CALL    L04BF                   ; executes '.' word
              	
              	; the '.' exits so expects another word here
              	
              	
1819: 1B18    	L1819:  DEFW    L181B
              	
181B: 1D18    	L181B:  DEFW    L181D
              	
181D: C1      	L181D   POP     BC                      ;
181E: C1      	        POP     BC                      ; restore BC.
              	
181F: C9      	        RET                             ; return.
              	
              	; ---------------------------------
              	; THE 'CASSETTE INTERFACE' ROUTINES
              	; ---------------------------------
              	
              	; ---
              	; tape???
              	; ---
              	
1820: FDE5    	L1820:  PUSH    IY
              	
1822: E5      	        PUSH    HL
1823: FDE1    	        POP     IY
              	
1825: 219218  	        LD      HL,L1892
1828: E5      	        PUSH    HL
              	
1829: 2100E0  	        LD      HL,$E000
182C: CB79    	        BIT     7,C
182E: 2802    	        JR      Z,L1832                 ;
1830: 26FC    	        LD      H,$FC
1832: 13      	L1832:  INC     DE
1833: FD2B    	        DEC     IY
1835: F3      	        DI
1836: AF      	        XOR     A
              	
1837: 0697    	L1837:  LD      B,$97
              	
1839: 10FE    	L1839:  DJNZ    L1839                   ;
183B: D3FE    	        OUT     ($FE),A
183D: EE08    	        XOR     $08
183F: 2C      	        INC     L
1840: 2001    	        JR      NZ,L1843                ;
1842: 24      	        INC     H
1843: 20F2    	L1843:  JR      NZ,L1837                ;
1845: 062B    	        LD      B,$2B
1847: 10FE    	L1847:  DJNZ    L1847                   ;
1849: D3FE    	        OUT     ($FE),A
184B: 69      	        LD      L,C
184C: 01083B  	        LD      BC,$3B08
184F: 10FE    	L184F:  DJNZ    L184F                   ;
1851: 79      	        LD      A,C
1852: D3FE    	        OUT     ($FE),A
1854: 0638    	        LD      B,$38
1856: C38A18  	        JP      L188A                   ;
              	
1859: 79      	L1859:  LD      A,C
185A: CB78    	        BIT     7,B
              	
185C: 10FE    	L185C:  DJNZ    L185C                   ;
              	
185E: 3004    	        JR      NC,L1864                ;
              	
1860: 063D    	        LD      B,$3D
1862: 10FE    	L1862:  DJNZ    L1862                   ;
              	
1864: D3FE    	L1864:  OUT     ($FE),A
1866: 063A    	        LD      B,$3A
1868: C25918  	        JP      NZ,L1859                ;
186B: 05      	        DEC     B
186C: AF      	        XOR     A
186D: CB15    	L186D:  RL      L
186F: C25C18  	        JP      NZ,L185C                ;
1872: 1B      	        DEC     DE
1873: FD23    	        INC     IY
1875: 062E    	        LD      B,$2E
              	
1877: 3E7F    	        LD      A,$7F
1879: DBFE    	        IN      A,($FE)
187B: 1F      	        RRA
187C: D0      	        RET     NC
              	
187D: 7A      	        LD      A,D
187E: FEFF    	        CP      $FF
1880: D0      	        RET     NC
              	
1881: B3      	        OR      E
1882: 280B    	        JR      Z,L188F                 ;
              	
1884: FD6E00  	        LD      L,(IY+$00)
1887: 7C      	L1887:  LD      A,H
1888: AD      	        XOR     L
1889: 67      	        LD      H,A
188A: AF      	L188A:  XOR     A
188B: 37      	        SCF
188C: C36D18  	        JP      L186D                   ; JUMP back
              	
              	; ---
              	
188F: 6C      	L188F:  LD      L,H
1890: 18F5    	        JR      L1887                   ;
              	
1892: FDE1    	L1892:  POP     IY                      ; restore the original IY value so that
              	                                        ; words can be used gain.
              	
1894: 08      	        EX      AF,AF'                  ;;
1895: 063B    	        LD      B,$3B                   ;
              	
1897: 10FE    	L1897:  DJNZ    L1897                   ; self-loop for delay.
              	
1899: AF      	        XOR     A
189A: D3FE    	        OUT     ($FE),A
              	
189C: 3E7F    	        LD      A,$7F                   ; read the port $7FFE
189E: DBFE    	        IN      A,($FE)                 ; keyrows SPACE to V.
18A0: 1F      	        RRA
18A1: FB      	        EI                              ; Enable Interrupts.
              	
18A2: D2F004  	        JP      NC,L04F0                ; jump if SPACE pressed to Error 3
              	                                        ; 'BREAK pressed'.
              	
18A5: 08      	        EX      AF,AF'                  ;;
18A6: C9      	        RET                             ; return.
              	
              	; ---
              	; READ BYTES FROM TAPE
              	; ---
              	
18A7: F3      	L18A7:  DI
18A8: FDE5    	        PUSH    IY
18AA: E5      	        PUSH    HL
18AB: FDE1    	        POP     IY
18AD: 219218  	        LD      HL,L1892
18B0: E5      	        PUSH    HL
18B1: 61      	        LD      H,C
18B2: 08      	        EX      AF,AF'                  ; save carry
18B3: AF      	        XOR     A
18B4: 4F      	        LD      C,A
              	
18B5: C0      	L18B5:  RET     NZ
              	
18B6: 2E00    	L18B6:  LD      L,$00
18B8: 06B8    	L18B8:  LD      B,$B8
              	
18BA: CD1119  	        CALL    L1911                   ;
              	
18BD: 30F6    	        JR      NC,L18B5                ;
              	
18BF: 3EDF    	        LD      A,$DF
18C1: B8      	        CP      B
18C2: 30F2    	        JR      NC,L18B6                ;
              	
18C4: 2C      	        INC     L
18C5: 20F1    	        JR      NZ,L18B8                ;
              	
18C7: 06CF    	L18C7:  LD      B,$CF
              	
18C9: CD1519  	        CALL    L1915                   ;
              	
18CC: 30E7    	        JR      NC,L18B5                ;
              	
18CE: 78      	        LD      A,B
18CF: FED8    	        CP      $D8
18D1: 30F4    	        JR      NC,L18C7                ;
              	
18D3: CD1519  	        CALL    L1915                   ;
18D6: D0      	        RET     NC
              	
18D7: CDFC18  	        CALL    L18FC                   ;
18DA: D0      	        RET     NC
              	
18DB: 3F      	        CCF
18DC: C0      	        RET     NZ
              	
18DD: 1811    	        JR      L18F0                   ;
              	
              	; ---
              	
18DF: 08      	L18DF:  EX      AF,AF'
18E0: 3005    	        JR      NC,L18E7                ;
18E2: FD7500  	        LD      (IY+$00),L
18E5: 1805    	        JR      L18EC                   ;
              	
              	; ---
              	
18E7: FD7E00  	L18E7:  LD      A,(IY+$00)
18EA: AD      	        XOR     L
18EB: C0      	        RET     NZ
              	
18EC: FD23    	L18EC:  INC     IY
18EE: 1B      	        DEC     DE
18EF: 08      	        EX      AF,AF'
              	
18F0: CDFC18  	L18F0:  CALL    L18FC                   ;
              	
18F3: D0      	        RET     NC
              	
18F4: 7A      	        LD      A,D
18F5: B3      	        OR      E
18F6: 20E7    	        JR      NZ,L18DF                ;
              	
18F8: 7C      	        LD      A,H
18F9: FE01    	        CP      $01
18FB: C9      	L18FB:  RET
              	
              	; ---
              	
18FC: 2E01    	L18FC:  LD      L,$01
18FE: 06C7    	L18FE:  LD      B,$C7
              	
1900: CD1119  	        CALL    L1911                   ;
              	
1903: D0      	        RET     NC
              	
1904: 3EE2    	        LD      A,$E2
1906: B8      	        CP      B
1907: CB15    	        RL      L
1909: D2FE18  	        JP      NC,L18FE                ;
              	
190C: 7C      	        LD      A,H
190D: AD      	        XOR     L
190E: 67      	        LD      H,A
190F: 37      	        SCF
1910: C9      	        RET
              	
              	; ---
              	
1911: CD1519  	L1911:  CALL    L1915                   ;
1914: D0      	        RET     NC
              	
1915: 3E14    	L1915:  LD      A,$14
1917: 3D      	L1917:  DEC     A
              	
1918: 20FD    	        JR      NZ,L1917                ;
              	
191A: A7      	        AND     A
              	
191B: 04      	L191B:  INC     B
191C: C8      	        RET     Z
              	
191D: 3E7F    	        LD      A,$7F
191F: DBFE    	        IN      A,($FE)
1921: 1F      	        RRA
1922: D0      	        RET     NC
              	
1923: A9      	        XOR     C
1924: E610    	        AND     $10
1926: 28F3    	        JR      Z,L191B                 ;
              	
1928: 79      	        LD      A,C
1929: 2F      	        CPL
192A: 4F      	        LD      C,A
192B: 37      	        SCF
192C: C9      	        RET
              	
              	; ---------------
              	; THE 'SAVE' WORD
              	; ---------------
              	; SAVE name.
              	; Saves entire dictionary in RAM on a dictionary type cassette file with the
              	; given name. Makes a noise on the internal loudspeaker.
              	
192D: 534156  	L192D:  DEFM    "SAV"                   ; 'name field'
1930: C5      	        DEFB    'E' + $80
              	
1931: 6F16    	        DEFW    L166F                   ; 'link field'
              	
1933: 04      	L1933:  DEFB    $04                     ; 'name length field'
              	
1934: C30E    	L1934:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
1936: 101A    	        DEFW    L1A10                   ; word to pad
1938: 4F1A    	        DEFW    L1A4F                   ;  prep some sort of header?
193A: B604    	        DEFW    L04B6                   ; exit
              	
              	; ----------------
              	; THE 'BSAVE' WORD
              	; ----------------
              	; BSAVE name
              	; (m, n -- )
              	; Save n bytes to bytes type cassette file 'name' starting at
              	; address m.
              	;
              	
193C: 42534156	L193C:  DEFM    "BSAV"                  ; 'name field'
1940: C5      	        DEFB    'E' + $80
              	
1941: 3319    	        DEFW    L1933                   ; 'link field'
              	
1943: 05      	L1943:  DEFB    $05                     ; 'name length field'
              	
1944: C30E    	L1944:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
1946: 3D1A    	L1946:  DEFW    L1A3D                   ; prep_header
1948: 4F1A    	        DEFW    L1A4F                   ; prep some sort of header?
194A: B604    	        DEFW    L04B6                   ; exit
              	
              	
              	; ----------------
              	; THE 'BLOAD' WORD
              	; ----------------
              	; BLOAD name
              	; (m, n -- )
              	; Load at most n bytes of bytes type cassette file 'name' starting at
              	; address m. ERROR 10 if the file has more than m bytes.
              	;
194C: 424C4F41	L194C:  DEFM    "BLOA"                  ; 'name field'
1950: C4      	        DEFB    'D' + $80
              	
1951: 4319    	        DEFW    L1943                   ; 'link field'
              	
1953: 05      	L1953:  DEFB    $05                     ; 'name length field'
              	
1954: C30E    	L1954:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
1956: 3D1A    	        DEFW    L1A3D                   ; prep_header
1958: 741A    	        DEFW    L1A74                   ; ld-bytes??
195A: B81A    	        DEFW    L1AB8                   ; tapeFF
195C: B604    	        DEFW    L04B6                   ; exit
              	
              	; -----------------
              	; THE 'VERIFY' WORD
              	; -----------------
              	; VERIFY name
              	; (  --  )
              	; Verifies dictionary on tape against dictionary in RAM.
              	
195E: 56455249	L195E:  DEFM    "VERIF"                 ; 'name field'
1962: 46      	
1963: D9      	        DEFB    'Y' + $80
              	
1964: 5319    	        DEFW    L1953                   ; 'link field'
              	
1966: 06      	L1966:  DEFB    $06                     ; 'name length field'
              	
1967: C30E    	L1967:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
1969: 101A    	L1969:  DEFW    L1A10                   ; word to pad
196B: 7112    	        DEFW    L1271                   ; branch
196D: 0F00    	L196D:  DEFW    $000F                   ; 15 bytes forward to L197D
              	
              	
              	; ------------------
              	; THE 'BVERIFY' WORD
              	; ------------------
              	; BVERIFY name
              	; (m, n -- )
              	; Verify at most n bytes of bytes type cassette file 'name' against
              	; RAM starting at address m. ERROR 10 if the file has more than m bytes.
              	; For BLOAD and BVERIFY, if m = 0, then starts at the address the bytes
              	; were saved from. If n = 0, then doesn't care about the length.
              	;
              	
196F: 42564552	L196F:  DEFM    "BVERIF"                ; 'name field'
1973: 4946    	
1975: D9      	        DEFB    'Y' + $80
              	
1976: 6619    	        DEFW    L1966                   ; 'link field'
              	
1978: 07      	L1978:  DEFB    $07                     ; 'name length field'
              	
1979: C30E    	L1979:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
197B: 3D1A    	L197B:  DEFW    L1A3D                   ; prep_header
              	
              	; ->
              	
197D: 741A    	L197D:  DEFW    L1A74                   ; ld_bytes
197F: BE1A    	        DEFW    L1ABE                   ; tape00
1981: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---------------
              	; THE 'LOAD' WORD
              	; ---------------
              	; LOAD name
              	; (  --  )
              	; Searches for a dictionary cassette file 'name' and loads it in, adding it
              	; to end of old dictionary. Writes to the screen all files found on tape.
              	; For best results turn the tone control on the tape recorder right down
              	; (as bass as possible) and the volume control to about three-quarters
              	; maximum.
              	
1983: 4C4F41  	L1983:  DEFM    "LOA"                   ; 'name field'
1986: C4      	        DEFB    'D' + $80
              	
1987: 7819    	        DEFW    L1978                   ; 'link field'
              	
1989: 04      	L1989:  DEFB    $04                     ; 'name length field'
              	
198A: C30E    	L198A:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
198C: 101A    	L198C:  DEFW    L1A10                   ; word to pad
              	
198E: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
1990: 2A373C  	        LD      HL,($3C37)              ; STKBOT
1993: 220E23  	        LD      ($230E),HL
1996: EB      	        EX      DE,HL
1997: 21CCFF  	        LD      HL,$FFCC
199A: 39      	        ADD     HL,SP
199B: A7      	        AND     A
199C: ED52    	        SBC     HL,DE
199E: 220C23  	        LD      ($230C),HL
              	
19A1: CDB904  	        CALL    L04B9                   ; forth
              	
19A4: 741A    	L19A4:  DEFW    L1A74                   ; ld_bytes
19A6: B81A    	        DEFW    L1AB8                   ; tapeFF
19A8: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
19AA: ED4B373C	        LD      BC,($3C37)              ; STKBOT
19AE: 21503C  	        LD      HL,$3C50
19B1: 220127  	        LD      ($2701),HL
19B4: 23      	        INC     HL
19B5: 220927  	        LD      ($2709),HL
19B8: 2A2523  	        LD      HL,($2325)
19BB: 09      	        ADD     HL,BC
19BC: 22373C  	        LD      ($3C37),HL              ; STKBOT
19BF: 21AFC3  	        LD      HL,$C3AF
19C2: 09      	        ADD     HL,BC
19C3: 220B27  	        LD      ($270B),HL
19C6: ED5B2923	        LD      DE,($2329)
19CA: 19      	        ADD     HL,DE
19CB: ED5B4C3C	        LD      DE,($3C4C)
19CF: 224C3C  	        LD      ($3C4C),HL
19D2: C5      	        PUSH    BC
19D3: D5      	        PUSH    DE
              	
              	
19D4: ED730D27	L19D4:  LD      ($270D),SP
19D8: CD0415  	        CALL    L1504                   ;
19DB: C1      	        POP     BC
19DC: E1      	        POP     HL
19DD: CB7E    	L19DD:  BIT     7,(HL)
19DF: 23      	        INC     HL
19E0: 28FB    	        JR      Z,L19DD                 ;
19E2: 23      	        INC     HL
19E3: 23      	        INC     HL
19E4: 71      	        LD      (HL),C
19E5: 23      	        INC     HL
19E6: 70      	        LD      (HL),B
19E7: 2A373C  	        LD      HL,($3C37)              ; STKBOT
19EA: 010C00  	        LD      BC,$000C                ; allow twelve bytes for underflow.
19ED: 09      	        ADD     HL,BC
19EE: 223B3C  	        LD      ($3C3B),HL              ; SPARE
19F1: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
19F3: C30E    	L19F3:  DEFW    L0EC3                   ; 'code field' - docolon
19F5: 4B10    	        DEFW    L104B                   ; stk_data
19F7: 20      	        DEFB    $20                     ; a space delimiter
19F8: AB05    	        DEFW    L05AB                   ; word          (to pad)
19FA: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
              	; ---
              	
19FC: CD2E0F  	L19FC:  CALL    L0F2E                   ; blank stack
              	
19FF: DF      	L19FF:  RST     18H                     ; pop word DE
              	
1A00: 3E20    	        LD      A,$20                   ;
1A02: 12      	        LD      (DE),A                  ;
1A03: 110C27  	        LD      DE,$270C                ;
1A06: 21FF27  	        LD      HL,$27FF                ;
              	
1A09: CDFA07  	        CALL    L07FA                   ; routine SPACE_FILL
              	
1A0C: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
              	
1A0E: FB18    	L1A0E:  DEFW    L18FB                   ; location of RET instruction.
              	
              	; ---
              	
1A10: C30E    	L1A10:  DEFW    L0EC3                   ; 'code field' - docolon
1A12: F319    	        DEFW    L19F3                   ; word to pad
1A14: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
1A16: AF      	        XOR     A                       ;
1A17: 320123  	        LD      ($2301),A               ;
1A1A: 21513C  	        LD      HL,$3C51                ;
1A1D: 220E23  	        LD      ($230E),HL              ;
1A20: EB      	        EX      DE,HL                   ;
1A21: 2A373C  	        LD      HL,($3C37)              ; STKBOT
1A24: A7      	        AND     A                       ;
1A25: ED52    	        SBC     HL,DE
1A27: 220C23  	        LD      ($230C),HL
1A2A: 2A4C3C  	        LD      HL,($3C4C)
1A2D: 221023  	        LD      ($2310),HL
1A30: 21313C  	        LD      HL,$3C31                ; CURRENT
1A33: 111223  	        LD      DE,$2312
1A36: 010800  	        LD      BC,$0008                ;
              	
1A39: EDB0    	        LDIR                            ;
              	
1A3B: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
              	
1A3D: C30E    	L1A3D:  DEFW    L0EC3                   ; 'code field' - docolon
1A3F: F319    	        DEFW    L19F3                   ; word to pad
1A41: 1110    	        DEFW    L1011                   ; stack next word
1A43: 0C23    	        DEFW    $230C                   ; header location
1A45: C108    	        DEFW    L08C1                   ; !     store int at address
1A47: 1110    	        DEFW    L1011                   ; stack next word
1A49: 0E23    	        DEFW    $230E                   ; header location
1A4B: C108    	        DEFW    L08C1                   ; !     store int at address
1A4D: B604    	        DEFW    L04B6                   ; exit
              	
              	; ---
              	
1A4F: 511A    	L1A4F:  DEFW    L1A51
              	
1A51: 3A0223  	L1A51:  LD      A,($2302)               ; length of word in pad
1A54: A7      	        AND     A
1A55: 285F    	        JR      Z,L1AB6                 ; forward if null.
              	
1A57: 2A0C23  	        LD      HL,($230C)
1A5A: 7C      	        LD      A,H
1A5B: B5      	        OR      L
1A5C: 2858    	        JR      Z,L1AB6                 ;
              	
1A5E: E5      	        PUSH    HL
1A5F: 111900  	        LD      DE,$0019                ;
1A62: 210123  	        LD      HL,$2301                ; pad using ROM priority
1A65: 4A      	        LD      C,D                     ;
              	
1A66: CD2018  	        CALL    L1820                   ;
              	
1A69: D1      	        POP     DE
1A6A: 2A0E23  	        LD      HL,($230E)              ;
1A6D: 0EFF    	        LD      C,$FF
              	
1A6F: CD2018  	        CALL    L1820                   ;
              	
1A72: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	; ld_bytes
              	; ---
              	
1A74: 761A    	L1A74:  DEFW    L1A76
              	
1A76: 111900  	L1A76:  LD      DE,$0019
1A79: 211A23  	        LD      HL,$231A
1A7C: 4A      	        LD      C,D
              	
1A7D: 37      	        SCF
              	
1A7E: CDA718  	        CALL    L18A7                   ;
              	
1A81: 30F3    	        JR      NC,L1A76                ; loop back until read
              	
1A83: 111A23  	        LD      DE,$231A
1A86: 1A      	        LD      A,(DE)
1A87: A7      	        AND     A
1A88: 200B    	        JR      NZ,L1A95                ;
              	
1A8A: CD0818  	        CALL    L1808                   ; pr_inline
              	
              	; ---
              	
1A8D: 0D      	L1A8D:  DEFB    $0D                     ; newline
1A8E: 44696374	        DEFM    "Dict"
1A92: BA      	        DEFB    ':' + $80               ;
              	
1A93: 180A    	L1A93:  JR      L1A9F                   ;
              	
              	; ---
              	
1A95: CD0818  	L1A95:  CALL    L1808                   ; pr_inline
              	
1A98: 0D      	L1A98:  DEFB    $0D                     ; newline
              	
1A99: 42797465	        DEFM    "Bytes"
1A9D: 73      	
1A9E: BA      	        DEFB    ':' + $80               ;
              	
              	; ---
              	
1A9F: 210123  	L1A9F:  LD      HL,$2301
1AA2: 010B0B  	        LD      BC,$0B0B
1AA5: 1802    	        JR      L1AA9                   ;
              	
              	; ---
              	
1AA7: 1A      	L1AA7:  LD      A,(DE)
1AA8: CF      	        RST     08H                     ; print_ch
              	
1AA9: 1A      	L1AA9:  LD      A,(DE)
1AAA: BE      	        CP      (HL)
1AAB: 2001    	        JR      NZ,L1AAE                ;
1AAD: 0D      	        DEC     C
              	
1AAE: 23      	L1AAE:  INC     HL
1AAF: 13      	        INC     DE
1AB0: 10F5    	        DJNZ    L1AA7                   ;
              	
1AB2: 20C2    	        JR      NZ,L1A76                ;
1AB4: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
1AB6: E7      	L1AB6:  RST     20H                     ; Error 10
1AB7: 0A      	        DEFB    $0A                     ; Tape error
              	
              	; ---
              	;
              	; ---
              	
1AB8: BA1A    	L1AB8:  DEFW    L1ABA                   ; headerless 'code field'
              	
1ABA: 06FF    	L1ABA:  LD      B,$FF
1ABC: 1812    	        JR      L1AD0                   ; forward to +->
              	
              	; ---
              	;
              	; ---
              	
1ABE: C01A    	L1ABE:  DEFW    L1AC0                   ; headerless 'code field'
              	
1AC0: 211223  	L1AC0:  LD      HL,$2312
1AC3: 112B23  	        LD      DE,$232B
1AC6: 0608    	        LD      B,$08
              	
1AC8: 1A      	L1AC8:  LD      A,(DE)
1AC9: 13      	        INC     DE
1ACA: BE      	        CP      (HL)
1ACB: 23      	        INC     HL
1ACC: 20E8    	        JR      NZ,L1AB6                ; back to tape error
              	
1ACE: 10F8    	        DJNZ    L1AC8                   ; back for all 8
              	
              	; common code - B is $00 from above or $FF from previous.
              	
1AD0: 2A0C23  	L1AD0:  LD      HL,($230C)
1AD3: ED5B2523	        LD      DE,($2325)
1AD7: 7C      	        LD      A,H
1AD8: B5      	        OR      L
1AD9: 2804    	        JR      Z,L1ADF                 ; skip if zero
              	
1ADB: ED52    	        SBC     HL,DE
1ADD: 38D7    	        JR      C,L1AB6                 ; back to tape error
              	
1ADF: 2A0E23  	L1ADF:  LD      HL,($230E)
1AE2: 7C      	        LD      A,H
1AE3: B5      	        OR      L
1AE4: 2003    	        JR      NZ,L1AE9                ; skip if zero
1AE6: 2A2723  	        LD      HL,($2327)
              	
1AE9: 0EFF    	L1AE9:  LD      C,$FF
1AEB: CB18    	        RR      B
              	
1AED: CDA718  	        CALL    L18A7                   ;
              	
1AF0: 30C4    	        JR      NC,L1AB6                ; back to report tape error
              	
1AF2: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ==========================================================
              	; THE 'FLOATING POINT ARITHMETIC' ROUTINES
              	; ==========================================================
              	
              	; ---------------------
              	; THE 'PREP_FP' ROUTINE
              	; ---------------------
              	; ( f1, f2 -- m1, m2 )
              	; -> from add/mult/div
              	; Entered with two floating point numbers on the stack.
              	; The exponents are stored in the first two bytes of FP_WS and the third byte
              	; is loaded with the manipulated result sign.
              	; the two exponent locations on the Data Stack are blanked leaving just the
              	; binary coded mantissas.
              	
              	; Begin by clearing the first part of the workspace.
              	
1AF4: 010F3C  	L1AF4:  LD      BC,$3C0F                ; byte 15 of the 19 bytes at FP_WS
              	
1AF7: AF      	        XOR     A                       ; clear accumulator.
              	
1AF8: 02      	L1AF8:  LD      (BC),A                  ; clear the workspace.
1AF9: 0D      	        DEC     C                       ; decrement low byte of address.
1AFA: 20FC    	        JR      NZ,L1AF8                ; and back until at $3C00
              	
              	;
              	
1AFC: 2A3B3C  	        LD      HL,($3C3B)              ; fetch end of data stack+1 from SPARE.
1AFF: 11FCFF  	        LD      DE,$FFFC                ; prepare  -4
              	
1B02: 2B      	        DEC     HL                      ; point to last byte of stack.
1B03: 4E      	        LD      C,(HL)                  ; sign/exponent of (f2) to C.
1B04: 77      	        LD      (HL),A                  ; replace with zero to take overflow.
              	
1B05: 19      	        ADD     HL,DE                   ; subtract four from address
              	
              	; update system variable SPARE - this could be deferred.
              	
1B06: 23      	        INC     HL                      ; point to location after (f1).
1B07: 223B3C  	        LD      ($3C3B),HL              ; update system variable SPARE
1B0A: 2B      	        DEC     HL                      ; point to exponent of (f1)
              	
1B0B: 46      	        LD      B,(HL)                  ; sign/exponent of (f1) to B.
1B0C: 77      	        LD      (HL),A                  ; replace with zero.
              	
              	; At this stage we have the sign/exponent of (f1) in B and the sign/exponent
              	; of (f2) in C. The next section places the sign bit of (f1) in but 7 of A
              	; and the sign bit of (f2) in bit 6 of A. The other bits are of no importance.
              	
1B0D: 79      	        LD      A,C                     ; transfer C to A.
1B0E: 0F      	        RRCA                            ; rotate sign bit to bit 6.
1B0F: A8      	        XOR     B                       ; XOR B
1B10: E67F    	        AND     $7F                     ; mask off bits to restore
1B12: A8      	        XOR     B                       ; bit 6 as it was, bit 7 of B to A.
              	
1B13: 32023C  	L1B13   LD      ($3C02),A               ; FP_WS_02             see L1C2F
              	
1B16: CBB8    	        RES     7,B                     ; make both numbers
1B18: CBB9    	        RES     7,C                     ; positive
              	
1B1A: ED43003C	        LD      ($3C00),BC              ; store the exponents at start of FP_WS
              	
1B1E: 23      	        INC     HL                      ; point to (f2) again.
1B1F: EB      	        EX      DE,HL                   ; transfer f2 pointer to DE, HL now -4
1B20: 19      	        ADD     HL,DE                   ; subtract four to point HL at (f1)
1B21: C9      	        RET                             ; return.
              	
              	; On exit, HL -> (f1), DE -> (f2), B = exponent of (f1), C = exponent of (f2).
              	
              	; -----------------------------
              	; THE 'SHIFT_ADDEND' SUBROUTINE
              	; -----------------------------
              	
1B22: 3E09    	L1B22:  LD      A,$09
1B24: B8      	        CP      B
1B25: 3001    	        JR      NC,L1B28                ;
              	
1B27: 47      	        LD      B,A                     ; set shift counter to nine. i.e clear.
              	
1B28: 0E04    	L1B28:  LD      C,$04                   ; four bytes
1B2A: 23      	        INC     HL
1B2B: 23      	        INC     HL
1B2C: 23      	        INC     HL                      ; point to highest byte
              	
1B2D: AF      	        XOR     A                       ; prepare to start with a blank nibble.
              	
1B2E: ED67    	L1B2E:  RRD                             ; A=0000 XXXX --> 7654->3210 =(HL)
              	                                        ;          \_____<-______/
              	
1B30: 2B      	        DEC     HL                      ; point to next lower byte on Data Stack
1B31: 0D      	        DEC     C                       ; decrement the byte counter.
1B32: 20FA    	        JR      NZ,L1B2E                ; loop for all 4 bytes = 1 nibble shift
              	
1B34: 23      	        INC     HL                      ; set pointer to start of number again
1B35: 10F1    	        DJNZ    L1B28                   ; decrement the shift counter and loop.
              	
1B37: C6FB    	        ADD     A,$FB                   ; add minus five to last nibble lost
              	                                        ; will set the carry flag if 5 or more.
              	
1B39: E5      	        PUSH    HL                      ;; preserve pointer to start of addend.
              	
1B3A: 7E      	L1B3A:  LD      A,(HL)                  ; fetch the pair of BCD nibbles.
              	
1B3B: 88      	        ADC     A,B                     ; increment if carry set (B = 0)
1B3C: 27      	        DAA                             ; Decimal Adjust Accumulator
              	                                        ; ($99 becomes $00 with carry set).
              	
1B3D: 77      	        LD      (HL),A                  ; put nibbles back.
1B3E: 23      	        INC     HL                      ; point to next significant pair of
              	                                        ; binary coded decimal digits.
1B3F: 38F9    	        JR      C,L1B3A                 ; and ripple any rounding through.
              	
1B41: E1      	        POP     HL                      ;; retrieve the pointer to start.
1B42: C9      	        RET                             ; return.
              	
              	; ---------------------------
              	; THE 'BCD NEGATE' SUBROUTINE
              	; ---------------------------
              	; Negates the four byte, 8 nibble, binary coded decimal on the Data Stack.
              	; For example -123.456
              	; is prepared as $00 $12 $34 $56
              	; and negated as $99 $87 $65 $34
              	
1B43: C5      	L1B43:  PUSH    BC                      ; preserve the two
1B44: E5      	        PUSH    HL                      ; main registers used.
              	
1B45: 0604    	        LD      B,$04                   ; set byte counter to four.
1B47: A7      	        AND     A                       ; clear carry.
              	
1B48: 3E00    	L1B48:  LD      A,$00                   ; set to zero without disturbing carry.
              	
1B4A: 9E      	        SBC     A,(HL)                  ; subtract pair of digits
1B4B: 27      	        DAA                             ; Decimal Adjust Accumulator
              	                                        ; adjusts as if from 100 setting carry
              	
1B4C: 77      	        LD      (HL),A                  ; place adjusted decimals back.
              	
1B4D: 23      	        INC     HL                      ; next location on Data Stack.
              	
1B4E: 10F8    	        DJNZ    L1B48                   ; loop for all 4 bytes.
              	
1B50: E1      	        POP     HL                      ; restore the
1B51: C1      	        POP     BC                      ; saved registers.
              	
1B52: C9      	        RET                             ; return.
              	
              	; ------------------------------
              	; THE 'BCD OPERATION' SUBROUTINE
              	; ------------------------------
              	; This versatile routine performs the binary coded decimal addition of
              	; two floating point values with C = 1.
              	; The second entry point is used in multiplication.
              	
              	; ->
1B53: 0E01    	L1B53:  LD      C,$01                   ; signal the operation is addition.
              	
              	; -> (with c!=0)
1B55: E5      	L1B55:  PUSH    HL                      ; preserve the
1B56: D5      	        PUSH    DE                      ; three main
1B57: C5      	        PUSH    BC                      ; registers.
              	
1B58: 79      	        LD      A,C                     ; treat C as a binary coded decimal.
1B59: E60F    	        AND     $0F                     ; isolate the right-hand nibble.
1B5B: 47      	        LD      B,A                     ; transfer R.H. nibble to B
              	
1B5C: A9      	        XOR     C                       ; A now has L.H. nibble.
1B5D: 4F      	        LD      C,A                     ; place in C.
              	
              	; this next magical routine converts the two BCD digits to binary.
              	; imagine we started with ninety-nine so C = 1001 0000  and B = 0000 1001
              	
1B5E: 0F      	        RRCA                            ;    0100 1000
1B5F: 0F      	        RRCA                            ;    0010 0100
1B60: 81      	        ADD     A,C                     ;    1011 0100
1B61: 0F      	        RRCA                            ;    0101 1010
1B62: 80      	        ADD     A,B                     ;    0110 0011  = 99 binary
              	
1B63: 4F      	        LD      C,A                     ;    binary multiplier in C
              	
              	; note that for simple addition C is unchanged and still contains 1.
              	
1B64: 0604    	        LD      B,$04                   ; four bytes to consider
1B66: AF      	        XOR     A                       ; clear accumulator ensuring no initial
              	                                        ; carry is fed into the loop.
              	
              	; loop
              	
1B67: C5      	L1B67:  PUSH    BC                      ; push the counters.
1B68: D5      	        PUSH    DE                      ; push the (f2) pointer
              	
1B69: E5      	        PUSH    HL                      ; push the (f1) pointer.
              	
1B6A: 86      	        ADD     A,(HL)                  ; add any running carry to (f1) cell.
              	
1B6B: 27      	        DAA                             ; Decimal Adjust Accumulator
              	                                        ; possibly setting carry.
              	
1B6C: 6F      	        LD      L,A                     ; result to L
1B6D: 1A      	        LD      A,(DE)                  ; fetch (f2) cell value.
1B6E: 2600    	        LD      H,$00                   ; set high bytes H and D to
1B70: 54      	        LD      D,H                     ; zero without disturbing carry
              	
1B71: CB14    	        RL      H                       ; now pick up any carry in H.
              	
1B73: A7      	        AND     A                       ; test (f2) cell value.
1B74: 281B    	        JR      Z,L1B91                 ; skip forward to just store the carry
              	                                        ; result if the addend value is zero.
              	
1B76: 5F      	        LD      E,A                     ; else DE now holds cell value.
              	
1B77: CB39    	L1B77:  SRL     C                       ; shift counter C   0->76543210->C
              	
1B79: 3008    	        JR      NC,L1B83                ; skip addition if no carry.
              	
              	; else perform HL=HL+DE in BCD.
              	
1B7B: 7D      	        LD      A,L                     ; fetch low byte of (f1) cell.
1B7C: 83      	        ADD     A,E                     ; add to low byte of (f2) cell.
1B7D: 27      	        DAA                             ; DAA.
1B7E: 6F      	        LD      L,A                     ; result in L and carry.
              	
1B7F: 7C      	        LD      A,H                     ; fetch high byte possibly 1 from carry
1B80: 8A      	        ADC     A,D                     ; add in any carry from above (D=0)
1B81: 27      	        DAA                             ; comes into play with multiplication.
1B82: 67      	        LD      H,A                     ; result to H.
              	
1B83: 0C      	L1B83:  INC     C                       ; test the counter for zero.
1B84: 0D      	        DEC     C                       ; (will be if addition)
1B85: 280A    	        JR      Z,L1B91                 ; forward when zero ->
              	
              	; else is BCD multiplication - double the DE value.
              	
1B87: 7B      	        LD      A,E                     ;
1B88: 87      	        ADD     A,A                     ;
1B89: 27      	        DAA                             ;
1B8A: 5F      	        LD      E,A                     ;
              	
1B8B: 7A      	        LD      A,D                     ;
1B8C: 8F      	        ADC     A,A                     ;
1B8D: 27      	        DAA                             ;
1B8E: 57      	        LD      D,A                     ;
              	
1B8F: 18E6    	        JR      L1B77                   ; back to continue multiplying by C.
              	
              	; ---
              	
              	; ->
1B91: EB      	L1B91:  EX      DE,HL                   ; transfer result to DE.
              	
1B92: E1      	        POP     HL                      ; pop (f1) cell pointer
1B93: 73      	        LD      (HL),E                  ; insert result.
1B94: 7A      	        LD      A,D                     ; transfer any carry to A
1B95: D1      	        POP     DE                      ; pop the (f2) pointer
1B96: C1      	        POP     BC                      ; pop the counter, and initial C value.
              	
1B97: 13      	        INC     DE                      ; increment (f2) cell pointer.
1B98: 23      	        INC     HL                      ; increment (f1) cell pointer.
              	
1B99: 10CC    	        DJNZ    L1B67                   ; loop back for all 4 bytes.
              	
1B9B: C1      	        POP     BC                      ; restore the
1B9C: D1      	        POP     DE                      ; three main
1B9D: E1      	        POP     HL                      ; registers.
              	
1B9E: C9      	        RET                             ; return.
              	
              	; -------------
              	; THE 'F-' WORD
              	; -------------
              	; ( f1, f2 -- f1-f2 )
              	; Subtracts top two floating point numbers.
              	;
              	; just flip the sign and then do floating point addition.
              	
1B9F: 46      	L1B9F:  DEFB    'F'                     ; 'name field'
1BA0: AD      	        DEFB    '-' + $80
              	
1BA1: 8919    	        DEFW    L1989                   ; 'link field'
              	
1BA3: 02      	L1BA3:  DEFB    $02                     ; 'name length field'
              	
1BA4: C30E    	L1BA4:  DEFW    L0EC3                   ; 'code field' - docolon
              	
              	; ---
              	
1BA6: 0F1D    	L1BA6:  DEFW    L1D0F                   ; fnegate
1BA8: 0E1A    	        DEFW    L1A0E                   ; end-forth.
              	
1BAA: 1807    	        JR      L1BB3                   ; forward to floating point addition.
              	
              	; -------------
              	; THE 'F+' WORD
              	; -------------
              	; ( f1, f2 -- f1+f2 )
              	; Adds top two floating point numbers.
              	
1BAC: 46      	L1BAC:  DEFB    'F'                     ; 'name field'
1BAD: AB      	        DEFB    '+' + $80
              	
1BAE: A31B    	        DEFW    L1BA3                   ; 'link field'
              	
1BB0: 02      	L1BB0:  DEFB    $02                     ; 'name length field'
              	
1BB1: B31B    	L1BB1:  DEFW    L1BB3                   ; 'code field'
              	
              	; ---
              	
1BB3: CDF41A  	L1BB3:  CALL    L1AF4                   ; PREP_FP
              	
1BB6: 79      	        LD      A,C                     ; take exponent of second number (f2).
1BB7: 90      	        SUB     B                       ; subtract exponent of first (f1).
1BB8: F5      	        PUSH    AF                      ; save result flags.
              	
1BB9: 3006    	        JR      NC,L1BC1                ; forward if second number >= first.
              	
1BBB: EB      	        EX      DE,HL                   ; else swap the pointers.
1BBC: ED44    	        NEG                             ; negate negative result.
1BBE: DD7000  	        LD      (IX+$00),B              ; place B in FP_WS_0  (was C).
              	
1BC1: 47      	L1BC1:  LD      B,A                     ; put positive subtraction result in B.
              	
1BC2: C4221B  	        CALL    NZ,L1B22                ; routine SHIFT_ADDEND aligns digits if
              	                                        ; exponents are not equal.
              	
1BC5: F1      	        POP     AF                      ; retrieve subtraction result flags.
1BC6: 3001    	        JR      NC,L1BC9                ; forward is second number was >= first.
              	
1BC8: EB      	        EX      DE,HL                   ; else switch the pointers back.
              	
1BC9: 0602    	L1BC9:  LD      B,$02                   ; two floating point numbers to consider
              	
1BCB: DD4E02  	        LD      C,(IX+$02)              ; FP_WS_02
              	
1BCE: CB11    	L1BCE:  RL      C                       ; test sign bit first bit 7 then bit 6.
              	
1BD0: DC431B  	        CALL    C,L1B43                 ; routine BCD neg if carry
              	
1BD3: EB      	        EX      DE,HL                   ; switch number pointers.
              	
1BD4: 10F8    	        DJNZ    L1BCE                   ; decrement counter and loop if second
              	                                        ; number still to do.
              	
1BD6: CD531B  	        CALL    L1B53                   ; the BCD ADDITION routine.
              	
              	; The routine preserves main registers so HL->(f1), DE->(f2) and B is zero.
              	
1BD9: 1B      	        DEC     DE                      ; point to highest byte of result which
              	                                        ; could be $99 if one negative number
              	                                        ; involved or $98 if two negatives.
              	
1BDA: 1A      	        LD      A,(DE)                  ; fetch the result sign byte.
1BDB: C668    	        ADD     A,$68                   ; add $68 causing carry if negative.
1BDD: CB18    	        RR      B                       ; pick up carry in bit 7 of B, which
              	                                        ; was zero so zero flag now set if none.
              	
1BDF: DD7002  	        LD      (IX+$02),B              ; place result sign in  FP_WS_02
              	
1BE2: C4431B  	        CALL    NZ,L1B43                ; routine BCD_NEGATE if negative result.
              	
              	; if the
              	
1BE5: 1A      	L1BE5:  LD      A,(DE)                  ;
1BE6: A7      	        AND     A                       ;
              	
1BE7: 2019    	        JR      NZ,L1C02                ;
              	
              	; else A is zero.
              	
1BE9: DD3500  	        DEC     (IX+$00)                ; decrement the result exponent FP_WS_00
1BEC: DD3500  	        DEC     (IX+$00)                ; as two nibbles will be moved at a time
              	
1BEF: D5      	        PUSH    DE                      ; save pointer to 4th byte
              	
1BF0: 62      	        LD      H,D                     ; make HL
1BF1: 6B      	        LD      L,E                     ; equal to DE
1BF2: 2B      	        DEC     HL                      ; minus one.
              	
1BF3: 01FF03  	        LD      BC,$03FF                ; counter for three bytes. The $FF
              	                                        ; value ensures B is not affected by
              	                                        ; the LDD instruction. Also A is 0.
              	
1BF6: B6      	L1BF6:  OR      (HL)                    ; (detects if the three bytes are zero)
              	
1BF7: EDA8    	        LDD                             ; copy HL contents one location higher
              	                                        ; to that addressed by DE. Also dec bc.
              	
1BF9: 10FB    	        DJNZ    L1BF6                   ; repeat for all 3 bytes
              	
1BFB: EB      	        EX      DE,HL                   ; make HL address lowest location
1BFC: 70      	        LD      (HL),B                  ; and insert a zero into vacated byte.
              	
1BFD: D1      	        POP     DE                      ; restore the pointer to the 4th byte.
              	
1BFE: 20E5    	        JR      NZ,L1BE5                ; jump back to the end test if something
              	                                        ; was being shifted through.
              	
              	; else all four bytes are zero - i.e. the result of the addition is zero.
              	
1C00: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
              	; The branch was to here, from the end test above, when the 4th byte had been
              	; filled.
              	; Before joining common code, ensure that the initial block move will be
              	; ineffective.
              	
1C02: 54      	L1C02:  LD      D,H                     ; make DE the same as HL - the source
1C03: 5D      	        LD      E,L                     ; and the destination are the same.
              	
              	; -> common code from mult and above.
              	
1C04: D5      	L1C04:  PUSH    DE                      ; save start location.
              	
1C05: 010400  	        LD      BC,$0004                ; 4 bytes to consider.
1C08: EDB0    	        LDIR                            ; block move sets DE to one past dest.
              	
1C0A: E1      	        POP     HL                      ; restore start of source.
              	
1C0B: 1B      	        DEC     DE                      ; DE now addresses 4th byte.
              	
1C0C: 1A      	L1C0C:  LD      A,(DE)                  ; load the 4th byte to accumulator.
1C0D: A7      	        AND     A                       ; test for zero.
              	
1C0E: 2811    	        JR      Z,L1C21                 ; skip forward if so.
              	
1C10: FE10    	        CP      $10                     ; test if one or two nibbles populated
              	                                        ; setting carry for a single nibble.
              	
1C12: 9F      	        SBC     A,A                     ; $00 for two nibbles, $FF for one.
1C13: 3C      	        INC     A                       ; $01                  $00
1C14: 3C      	        INC     A                       ; $02 for two nibbles, $01 for one :-)
              	
1C15: 47      	        LD      B,A                     ; nibble count to B.
1C16: DD8600  	        ADD     A,(IX+$00)              ; add count to FP_WS_00 the result
1C19: 32003C  	        LD      ($3C00),A               ; exponent and place back in FP_WS_00.
              	
1C1C: CD221B  	        CALL    L1B22                   ; routine 'shift_addend' moves all the
              	                                        ; nibbles to the right.
              	
1C1F: 18EB    	        JR      L1C0C                   ; back to pick up byte and then to
              	                                        ; next routine.
              	
              	; ---
              	
              	; now test for a result that is too large or too small.
              	; Note. these results may have arisen from multiplication or addition.
              	
1C21: 3A003C  	L1C21:  LD      A,($3C00)               ; fetch result exponent from FP_WS_00
              	
1C24: 3D      	        DEC     A                       ; decrement?
1C25: FEBF    	        CP      $BF                     ; compare lower limit
1C27: 3C      	        INC     A                       ; increment?
              	
1C28: 3013    	        JR      NC,L1C3D                ; forward if less to ZERO_RSLT
              	
1C2A: FE80    	        CP      $80                     ; compare upper limit
1C2C: 300D    	        JR      NC,L1C3B                ; forward to Error 8 - Overflow
              	
1C2E: 47      	        LD      B,A                     ; save unsigned exponent in B.
              	
              	; now combine result sign and the exponent.
              	; for addition then FP_WS_02 contains either $80 or $00 and most of what
              	; follows does not apply.
              	; for multiplication then bit 7 is sign of (f1) bit 6 is sign of (f2).
              	
1C2F: 3A023C  	L1C2F   LD      A,($3C02)               ; FP_WS_02           see L1B13
              	
1C32: 4F      	        LD      C,A                     ; save a copy in C
1C33: 17      	        RLA                             ; rotate bit 6 to 7
1C34: A9      	        XOR     C                       ; XOR bit 7 - minus * minus = a plus.
1C35: E680    	        AND     $80                     ; only interested in bit 7.
1C37: A8      	        XOR     B                       ; combine with exponent.
1C38: 12      	        LD      (DE),A                  ; and place in sign/exp on Data Stack.
              	
1C39: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; ---
              	
1C3B: E7      	L1C3B:  RST     20H                     ; Error 8.
1C3C: 08      	        DEFB    $08                     ; Overflow in floating-point arithmetic.
              	
              	; ------------------------------------
              	; THE 'ZERO RESULT' TERMINATING BRANCH
              	; ------------------------------------
              	
1C3D: 010004  	L1C3D:  LD      BC,$0400                ; count 4 bytes, fill byte is zero.
              	
1C40: 71      	L1C40:  LD      (HL),C                  ; insert a zero.
1C41: 23      	        INC     HL                      ; next location.
1C42: 10FC    	        DJNZ    L1C40                   ; repeat for all 4 bytes.
              	
1C44: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	
              	
              	
              	; -------------
              	; THE 'F*' WORD
              	; -------------
              	; (f1, f2 -- f1*f2)
              	; Multiplies top two floating point numbers and leaves result on the stack.
              	
1C46: 46      	L1C46:  DEFB    'F'                     ; 'name field'
1C47: AA      	        DEFB    '*' + $80
              	
1C48: B01B    	        DEFW    L1BB0                   ; 'link field'
              	
1C4A: 02      	L1C4A:  DEFB    $02                     ; 'name length field'
              	
1C4B: 4D1C    	L1C4B:  DEFW    L1C4D                   ; 'code field'
              	
              	; ---
              	
1C4D: CDF41A  	L1C4D:  CALL    L1AF4                   ; routine PREP_FP prepares the two
              	                                        ; numbers on the Data Stack placing the
              	                                        ; exponents and signs in FP_WS.
              	
1C50: AF      	        XOR     A                       ; set accumulator to zero.
1C51: B8      	        CP      B                       ; compare to exponent of (f1).
1C52: 9F      	        SBC     A,A                     ; $00 if zero or $FF
1C53: A1      	        AND     C                       ; combine with exponent of (f2).
              	
1C54: 28E7    	        JR      Z,L1C3D                 ; back if zero to exit via ZERO_RSLT.
              	
1C56: E5      	        PUSH    HL                      ; save pointer to first number - result.
              	
1C57: 01023C  	        LD      BC,$3C02                ; set BC to location before free
              	                                        ; workspace set to zero by PREP_FP.
              	
1C5A: C5      	        PUSH    BC                      ; push onto machine stack.
              	
1C5B: 0603    	        LD      B,$03                   ; count three bytes - six nibbles.
              	
1C5D: 4E      	L1C5D:  LD      C,(HL)                  ; fetch BCD pair to C
1C5E: 23      	        INC     HL                      ; address more significant pair.
              	
1C5F: E3      	        EX      (SP),HL                 ; Data Stack pointer to machine stack,
              	                                        ; workspace pointer to HL.
1C60: 23      	        INC     HL                      ; increment workspace pointer.
              	
1C61: CD551B  	        CALL    L1B55                   ; routine BCD_OP multiplies C by each
              	                                        ; of the 4 bytes of (f2) laying the
              	                                        ; result down in workspace at HL
              	
1C64: E3      	        EX      (SP),HL                 ; swap in multiplier pointer to HL,
              	                                        ; workspace pointer to machine stack.
              	
1C65: 10F6    	        DJNZ    L1C5D                   ; repeat for all three bytes.
              	
1C67: ED4B003C	        LD      BC,($3C00)              ; fetch raw exponents from FP_WS_00/01
1C6B: 78      	        LD      A,B                     ; add the exponents
1C6C: 81      	        ADD     A,C                     ; together.
              	
1C6D: D642    	        SUB     $42                     ; adjust for sign
              	
1C6F: 32003C  	        LD      ($3C00),A               ; put the result back in FP_WS_00.
              	
1C72: E1      	        POP     HL                      ; pop workspace pointer to HL.
1C73: D1      	        POP     DE                      ; pop result pointer to DE.
              	
1C74: 188E    	        JR      L1C04                   ; back to common code to copy the 4
              	                                        ; bytes from the workspace to the
              	                                        ; Data Stack and then set exponent
              	                                        ; and sign.
              	
              	; -------------
              	; THE 'F/' WORD
              	; -------------
              	; ( f1, f2 -- f1/f2 )
              	; Divides two floating point numbers.
              	
1C76: 46      	L1C76:  DEFB    'F'                     ; 'name field'
1C77: AF      	        DEFB    '/' + $80
              	
1C78: 4A1C    	        DEFW    L1C4A                   ; 'link field'
              	
1C7A: 02      	L1C7A:  DEFB    $02                     ; 'name length field'
              	
1C7B: 7D1C    	L1C7B:  DEFW    L1C7D                   ; 'code field'
              	
              	;---
              	
1C7D: CDF41A  	L1C7D:  CALL    L1AF4                   ; routine PREP_FP prepares the two
              	                                        ; numbers (f1) and (f2) placing the
              	                                        ; raw exponents in the first two
              	                                        ; locations of workspace, the signs in
              	                                        ; the next location and clearing the
              	                                        ; sixteen remaining locations.
              	                                        ; This must be the one that uses them
              	                                        ; all.
              	
1C80: AF      	        XOR     A                       ; set accumulator to zero.
1C81: B8      	        CP      B                       ; compare to exponent of dividend (f1).
1C82: 28B9    	        JR      Z,L1C3D                 ; forward if zero to ZERO_RSLT.
              	
1C84: B9      	        CP      C                       ; compare to exponent of divisor (f2).
1C85: 28B4    	        JR      Z,L1C3B                 ; back if zero to Error 8 - Overflow.
              	                                        ; division by zero.
              	
              	; HL points to first number on stack, DE to second.
              	
1C87: 13      	        INC     DE                      ;
1C88: 13      	        INC     DE                      ;
1C89: 1A      	        LD      A,(DE)                  ; get first two digits to A
1C8A: 1B      	        DEC     DE                      ;
1C8B: 1B      	        DEC     DE                      ; back to first
              	
1C8C: C601    	        ADD     A,$01                   ; add one (e.g. 99 would give 9A)
1C8E: 27      	        DAA                             ; adjust  (e.g. $9A would be $00 carry)
1C8F: 08      	        EX      AF,AF'                  ; save the flags
1C90: EB      	        EX      DE,HL                   ; HL now points to divisor
              	
1C91: CD431B  	        CALL    L1B43                   ; routine BCD negate the divisor
              	
1C94: EB      	        EX      DE,HL                   ; point back again.
1C95: E5      	        PUSH    HL                      ; save pointer to first - the result.
              	
1C96: 11103C  	        LD      DE,$3C10                ; destination FP_WS_10
1C99: 010400  	        LD      BC,$0004                ; four bytes
              	
1C9C: EDB0    	        LDIR                            ; copy to end of FP_WS
              	                                        ; (+ one byte of list_ws)
              	
1C9E: EB      	        EX      DE,HL                   ; HL points to last cell plus one.
1C9F: 2B      	        DEC     HL                      ; Now points to last byte copied.
              	
1CA0: 0605    	        LD      B,$05                   ; count 5.
              	
              	; loop
              	
1CA2: D5      	L1CA2:  PUSH    DE                      ;
1CA3: 7E      	        LD      A,(HL)                  ;
1CA4: 2B      	        DEC     HL                      ;
1CA5: 5E      	        LD      E,(HL)                  ;
              	
1CA6: 08      	        EX      AF,AF'                  ;
1CA7: 4F      	        LD      C,A                     ;
1CA8: 08      	        EX      AF,AF'                  ;
              	
1CA9: 0C      	        INC     C                       ;
1CAA: 0D      	        DEC     C                       ;
1CAB: 2003    	        JR      NZ,L1CB0                ;
              	
1CAD: 5F      	        LD      E,A                     ;
1CAE: 181B    	        JR      L1CCB                   ;
              	
              	; ---
              	
1CB0: C5      	L1CB0:  PUSH    BC                      ;
1CB1: 0602    	        LD      B,$02                   ;
              	
1CB3: 1610    	L1CB3:  LD      D,$10                   ;
              	
1CB5: CB23    	L1CB5:  SLA     E                       ;
1CB7: 17      	        RLA                             ;
1CB8: CB12    	        RL      D                       ;
1CBA: 30F9    	        JR      NC,L1CB5                ;
              	
1CBC: 14      	        INC     D                       ;
              	
1CBD: 91      	L1CBD:  SUB     C                       ;
1CBE: 27      	        DAA                             ;
1CBF: 1C      	        INC     E                       ;
1CC0: 30FB    	        JR      NC,L1CBD                ;
              	
1CC2: 15      	        DEC     D                       ;
1CC3: 20F8    	        JR      NZ,L1CBD                ;
              	
1CC5: 81      	        ADD     A,C                     ;
1CC6: 27      	        DAA                             ;
1CC7: 1D      	        DEC     E                       ;
1CC8: 10E9    	        DJNZ    L1CB3                   ;
              	
1CCA: C1      	        POP     BC                      ;
              	
1CCB: 4B      	L1CCB:  LD      C,E                     ;
1CCC: D1      	        POP     DE                      ;
1CCD: 0C      	        INC     C                       ;
1CCE: 0D      	        DEC     C                       ;
1CCF: 2817    	        JR      Z,L1CE8                 ;
              	
1CD1: E5      	        PUSH    HL                      ;
1CD2: 2B      	        DEC     HL                      ;
1CD3: 2B      	        DEC     HL                      ;
              	
1CD4: CD551B  	        CALL    L1B55                   ; bcd_op mult
              	
1CD7: D5      	        PUSH    DE                      ;
              	
1CD8: 11FBFF  	        LD      DE,$FFFB                ; -4
1CDB: 19      	        ADD     HL,DE                   ;
              	
1CDC: 11033C  	        LD      DE,$3C03                ; FP_WS_03
1CDF: 79      	        LD      A,C                     ;
1CE0: 12      	        LD      (DE),A                  ;
              	
1CE1: CD531B  	        CALL    L1B53                   ; bcd_op add
              	
1CE4: D1      	        POP     DE                      ;
1CE5: E1      	        POP     HL                      ;
1CE6: 23      	        INC     HL                      ;
1CE7: 04      	        INC     B                       ;
              	
1CE8: 10B8    	L1CE8:  DJNZ    L1CA2                   ;
              	
1CEA: 2A003C  	        LD      HL,($3C00)              ; FP_WS
1CED: 7C      	        LD      A,H                     ;
1CEE: 95      	        SUB     L                       ;
1CEF: C640    	        ADD     A,$40                   ;
              	
1CF1: 21083C  	        LD      HL,$3C08                ; FP_WS
1CF4: 47      	        LD      B,A                     ;
1CF5: 3A0B3C  	        LD      A,($3C0B)               ;
1CF8: A7      	        AND     A                       ;
1CF9: 2003    	        JR      NZ,L1CFE                ;
              	
1CFB: 05      	        DEC     B                       ;
1CFC: 05      	        DEC     B                       ;
1CFD: 2B      	        DEC     HL                      ;
              	
1CFE: DD7000  	L1CFE:  LD      (IX+$00),B              ;
              	
1D01: D1      	        POP     DE                      ;
              	
1D02: C3041C  	        JP      L1C04                   ; back to common code to copy the 4
              	                                        ; bytes from the workspace to the
              	                                        ; Data Stack and then set exponent
              	                                        ; and sign.
              	
              	; ------------------
              	; THE 'FNEGATE' WORD
              	; ------------------
              	; ( f -- -f )
              	; Floating point negation.
              	; Toggle the sign bit unless the number is zero (four zero bytes).
              	
1D05: 464E4547	L1D05:  DEFM    "FNEGAT"                ; 'name field'
1D09: 4154    	
1D0B: C5      	        DEFB    'E' + $80
              	
1D0C: 7A1C    	        DEFW    L1C7A                   ; 'link field'
              	
1D0E: 07      	L1D0E:  DEFB    $07                     ; 'name length field'
              	
1D0F: 111D    	L1D0F:  DEFW    L1D11                   ; 'code field'
              	
              	; ---
              	
1D11: DF      	L1D11:  RST     18H                     ; pop word from data stack to DE.
              	
1D12: 7A      	        LD      A,D                     ; exponent byte to A.
1D13: A7      	        AND     A                       ; test for zero.
1D14: 2802    	        JR      Z,L1D18                 ; forward if so to leave undisturbed.
              	
1D16: EE80    	        XOR     $80                     ; else toggle the sign bit
              	
1D18: 57      	L1D18:  LD      D,A                     ; exponent byte to D.
1D19: D7      	        RST     10H                     ; push word DE on data stack.
              	
1D1A: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; --------------
              	; THE 'INT' WORD
              	; --------------
              	; (f -- n)
              	; Converts signed floating point number to signed single length integer.
              	; Truncates towards zero.
              	; Result in range -32768 to 32767
              	
1D1C: 494E    	L1D1C:  DEFM    "IN"                    ; 'name field'
1D1E: D4      	        DEFB    'T' + $80
              	
1D1F: 0E1D    	        DEFW    L1D0E                   ; 'link field'
              	
1D21: 03      	L1D21:  DEFB    $03                     ; 'name length field'
              	
1D22: 241D    	L1D22:  DEFW    L1D24                   ; 'code field'
              	
              	; ---
              	
1D24: 2A3B3C  	L1D24:  LD      HL,($3C3B)              ; fetch value from SPARE.
1D27: 2B      	        DEC     HL                      ; now points to end of data stack.
              	
1D28: 110000  	        LD      DE,$0000                ; initialize 16-bit result.
              	
1D2B: 7E      	L1D2B:  LD      A,(HL)                  ; fetch the exponent byte.
              	
1D2C: 07      	        RLCA                            ; double exponent moving sign bit to 0.
              	
1D2D: FE82    	        CP      $82                     ; compare exponent to plus 1.
1D2F: 3814    	        JR      C,L1D45                 ; forward if number is smaller than 1
              	                                        ; to return the result DE.
              	
              	; else the number is >= 1.0
              	
1D31: AF      	        XOR     A                       ; clear accumulator.
1D32: 2B      	        DEC     HL                      ; point to the first pair of BCD digits.
              	
1D33: CD3207  	        CALL    L0732                   ; call shift_fp
              	
1D36: 23      	        INC     HL                      ; point to exponent.
              	
1D37: EB      	        EX      DE,HL                   ; pointer to DE, integer to HL.
              	
              	; before adding in the nibble from the mantissa, multiply any previous result
              	; by ten.
              	
1D38: 44      	        LD      B,H                     ; make a copy of HL in BC.
1D39: 4D      	        LD      C,L                     ;
              	
1D3A: 29      	        ADD     HL,HL                   ; * 2
1D3B: 29      	        ADD     HL,HL                   ; * 4
1D3C: 09      	        ADD     HL,BC                   ; * 5
1D3D: 29      	        ADD     HL,HL                   ; * 10
              	
1D3E: 4F      	        LD      C,A                     ; leftmost nibble from mantissa to C.
1D3F: 0600    	        LD      B,$00                   ; prepare to add just the nibble.
1D41: 09      	        ADD     HL,BC                   ; add into the result.
1D42: EB      	        EX      DE,HL                   ; switch back to DE
              	
1D43: 18E6    	        JR      L1D2B                   ; back to loop.
              	
              	; ---
              	
1D45: 2B      	L1D45:  DEC     HL                      ; skip redundant components of Floating
1D46: 2B      	        DEC     HL                      ; Point number addressing the
              	                                        ; lower two bytes on the data stack.
1D47: 72      	        LD      (HL),D                  ; insert high-order byte first.
1D48: 2B      	        DEC     HL                      ; point to location beneath.
1D49: 73      	        LD      (HL),E                  ; insert low-order byte.
              	
1D4A: 11940D  	        LD      DE,L0D94                ; 'pos' addr.
              	
1D4D: C3BF04  	        JP      L04BF                   ; exit via 'pos' routine.
              	
              	; -----------------
              	; THE 'UFLOAT' WORD
              	; -----------------
              	; (un -- f)
              	; Converts unsigned single length integer to floating point.
              	; e.g. 65535 16 bit number converted to  32-bit float 8-bit sign/exponent
              	; 6-nibble BCD mantissa.    $45  6 5 5 3 5 0
              	
1D50: 55464C4F	L1D50:  DEFM    "UFLOA"                 ; 'name field'
1D54: 41      	
1D55: D4      	        DEFB    'T' +$80
              	
1D56: 211D    	        DEFW    L1D21                   ; 'link field'
              	
1D58: 06      	L1D58:  DEFB    $06                     ; 'name length field'
              	
1D59: 5B1D    	L1D59:  DEFW    L1D5B                   ; 'code field'
              	
              	; ---
              	
1D5B: DF      	L1D5B:  RST     18H                     ; pop word off stack to DE
1D5C: EB      	        EX      DE,HL                   ; now HL
              	
1D5D: 010010  	        LD      BC,$1000                ; count 16 bits, set C to zero.
1D60: 51      	        LD      D,C
1D61: 59      	        LD      E,C                     ; initialize DE to zero.
              	
1D62: 29      	L1D62:  ADD     HL,HL                   ; double
              	
1D63: 7B      	        LD      A,E                     ;
1D64: 8F      	        ADC     A,A                     ; add carry to low byte
1D65: 27      	        DAA                             ; adjust
1D66: 5F      	        LD      E,A                     ;
              	
1D67: 7A      	        LD      A,D                     ;
1D68: 8F      	        ADC     A,A                     ; add carry to high byte
1D69: 27      	        DAA                             ; adjust
1D6A: 57      	        LD      D,A                     ;
              	
1D6B: CB11    	        RL      C                       ; pick up overflow
1D6D: 10F3    	        DJNZ    L1D62                   ; loop  back for 16 bits
              	
1D6F: D7      	        RST     10H                     ; DE to Data stack.
              	
1D70: 1646    	        LD      D,$46                   ; exponent byte   +6
1D72: 59      	        LD      E,C                     ; low byte
              	
1D73: D7      	        RST     10H                     ; higher word of float to stack.
              	
1D74: 2B      	        DEC     HL                      ; point to
1D75: 2B      	        DEC     HL                      ; lower on stack
              	
1D76: CD4007  	        CALL    L0740                   ; normalize routine.
              	
1D79: FDE9    	        JP      (IY)                    ; to 'next'.
              	
              	; -------------------
              	; THE 'CHARACTER SET'
              	; -------------------
              	; The 96 ASCII character bitmaps are copied to RAM during initialization and
              	; the 8x8 characters can afterwards be redefined by the user.
              	; Some ROM space is saved by supplying the blank top line of most characters
              	; and in case of the middle range (capitals with no descenders) the bottom
              	; line as well. Only the final copyright symbol is held in ROM as an 8x8
              	; character.
              	
              	
              	; $20 - Character: ' '          CHR$(32)
              	
1D7B: 00      	L1D7B:  DEFB    %00000000
1D7C: 00      	        DEFB    %00000000
1D7D: 00      	        DEFB    %00000000
1D7E: 00      	        DEFB    %00000000
1D7F: 00      	        DEFB    %00000000
1D80: 00      	        DEFB    %00000000
1D81: 00      	        DEFB    %00000000
              	
              	; $21 - Character: '!'          CHR$(33)
              	
1D82: 10      	        DEFB    %00010000
1D83: 10      	        DEFB    %00010000
1D84: 10      	        DEFB    %00010000
1D85: 10      	        DEFB    %00010000
1D86: 00      	        DEFB    %00000000
1D87: 10      	        DEFB    %00010000
1D88: 00      	        DEFB    %00000000
              	
              	; $22 - Character: '"'          CHR$(34)
              	
1D89: 24      	        DEFB    %00100100
1D8A: 24      	        DEFB    %00100100
1D8B: 00      	        DEFB    %00000000
1D8C: 00      	        DEFB    %00000000
1D8D: 00      	        DEFB    %00000000
1D8E: 00      	        DEFB    %00000000
1D8F: 00      	        DEFB    %00000000
              	
              	; $23 - Character: '#'          CHR$(35)
              	
1D90: 24      	        DEFB    %00100100
1D91: 7E      	        DEFB    %01111110
1D92: 24      	        DEFB    %00100100
1D93: 24      	        DEFB    %00100100
1D94: 7E      	        DEFB    %01111110
1D95: 24      	        DEFB    %00100100
1D96: 00      	        DEFB    %00000000
              	
              	; $24 - Character: '$'          CHR$(36)
              	
1D97: 08      	        DEFB    %00001000
1D98: 3E      	        DEFB    %00111110
1D99: 28      	        DEFB    %00101000
1D9A: 3E      	        DEFB    %00111110
1D9B: 0A      	        DEFB    %00001010
1D9C: 3E      	        DEFB    %00111110
1D9D: 08      	        DEFB    %00001000
              	
              	; $25 - Character: '%'          CHR$(37)
              	
1D9E: 62      	        DEFB    %01100010
1D9F: 64      	        DEFB    %01100100
1DA0: 08      	        DEFB    %00001000
1DA1: 10      	        DEFB    %00010000
1DA2: 26      	        DEFB    %00100110
1DA3: 46      	        DEFB    %01000110
1DA4: 00      	        DEFB    %00000000
              	
              	; $26 - Character: '&'          CHR$(38)
              	
1DA5: 10      	        DEFB    %00010000
1DA6: 28      	        DEFB    %00101000
1DA7: 10      	        DEFB    %00010000
1DA8: 2A      	        DEFB    %00101010
1DA9: 44      	        DEFB    %01000100
1DAA: 3A      	        DEFB    %00111010
1DAB: 00      	        DEFB    %00000000
              	
              	; $27 - Character: '''          CHR$(39)
              	
1DAC: 08      	        DEFB    %00001000
1DAD: 10      	        DEFB    %00010000
1DAE: 00      	        DEFB    %00000000
1DAF: 00      	        DEFB    %00000000
1DB0: 00      	        DEFB    %00000000
1DB1: 00      	        DEFB    %00000000
1DB2: 00      	        DEFB    %00000000
              	
              	; $28 - Character: '('          CHR$(40)
              	
1DB3: 04      	        DEFB    %00000100
1DB4: 08      	        DEFB    %00001000
1DB5: 08      	        DEFB    %00001000
1DB6: 08      	        DEFB    %00001000
1DB7: 08      	        DEFB    %00001000
1DB8: 04      	        DEFB    %00000100
1DB9: 00      	        DEFB    %00000000
              	
              	; $29 - Character: ')'          CHR$(42)
              	
1DBA: 20      	        DEFB    %00100000
1DBB: 10      	        DEFB    %00010000
1DBC: 10      	        DEFB    %00010000
1DBD: 10      	        DEFB    %00010000
1DBE: 10      	        DEFB    %00010000
1DBF: 20      	        DEFB    %00100000
1DC0: 00      	        DEFB    %00000000
              	
              	; $2A - Character: '*'          CHR$(42)
              	
1DC1: 00      	        DEFB    %00000000
1DC2: 14      	        DEFB    %00010100
1DC3: 08      	        DEFB    %00001000
1DC4: 3E      	        DEFB    %00111110
1DC5: 08      	        DEFB    %00001000
1DC6: 14      	        DEFB    %00010100
1DC7: 00      	        DEFB    %00000000
              	
              	; $2B - Character: '+'          CHR$(43)
              	
1DC8: 00      	        DEFB    %00000000
1DC9: 08      	        DEFB    %00001000
1DCA: 08      	        DEFB    %00001000
1DCB: 3E      	        DEFB    %00111110
1DCC: 08      	        DEFB    %00001000
1DCD: 08      	        DEFB    %00001000
1DCE: 00      	        DEFB    %00000000
              	
              	; $2C - Character: ','          CHR$(44)
              	
1DCF: 00      	        DEFB    %00000000
1DD0: 00      	        DEFB    %00000000
1DD1: 00      	        DEFB    %00000000
1DD2: 00      	        DEFB    %00000000
1DD3: 08      	        DEFB    %00001000
1DD4: 08      	        DEFB    %00001000
1DD5: 10      	        DEFB    %00010000
              	
              	; $2D - Character: '-'          CHR$(45)
              	
1DD6: 00      	        DEFB    %00000000
1DD7: 00      	        DEFB    %00000000
1DD8: 00      	        DEFB    %00000000
1DD9: 3E      	        DEFB    %00111110
1DDA: 00      	        DEFB    %00000000
1DDB: 00      	        DEFB    %00000000
1DDC: 00      	        DEFB    %00000000
              	
              	; $2E - Character: '.'          CHR$(46)
              	
1DDD: 00      	        DEFB    %00000000
1DDE: 00      	        DEFB    %00000000
1DDF: 00      	        DEFB    %00000000
1DE0: 00      	        DEFB    %00000000
1DE1: 18      	        DEFB    %00011000
1DE2: 18      	        DEFB    %00011000
1DE3: 00      	        DEFB    %00000000
              	
              	; $2F - Character: '/'          CHR$(47)
              	
1DE4: 00      	        DEFB    %00000000
1DE5: 02      	        DEFB    %00000010
1DE6: 04      	        DEFB    %00000100
1DE7: 08      	        DEFB    %00001000
1DE8: 10      	        DEFB    %00010000
1DE9: 20      	        DEFB    %00100000
1DEA: 00      	        DEFB    %00000000
              	
              	; $30 - Character: '0'          CHR$(48)
              	
1DEB: 3C      	        DEFB    %00111100
1DEC: 46      	        DEFB    %01000110
1DED: 4A      	        DEFB    %01001010
1DEE: 52      	        DEFB    %01010010
1DEF: 62      	        DEFB    %01100010
1DF0: 3C      	        DEFB    %00111100
1DF1: 00      	        DEFB    %00000000
              	
              	; $31 - Character: '1'          CHR$(49)
              	
1DF2: 18      	        DEFB    %00011000
1DF3: 28      	        DEFB    %00101000
1DF4: 08      	        DEFB    %00001000
1DF5: 08      	        DEFB    %00001000
1DF6: 08      	        DEFB    %00001000
1DF7: 3E      	        DEFB    %00111110
1DF8: 00      	        DEFB    %00000000
              	
              	; $32 - Character: '2'          CHR$(50)
              	
1DF9: 3C      	        DEFB    %00111100
1DFA: 42      	        DEFB    %01000010
1DFB: 02      	        DEFB    %00000010
1DFC: 3C      	        DEFB    %00111100
1DFD: 40      	        DEFB    %01000000
1DFE: 7E      	        DEFB    %01111110
1DFF: 00      	        DEFB    %00000000
              	
              	; $33 - Character: '3'          CHR$(51)
              	
1E00: 3C      	        DEFB    %00111100
1E01: 42      	        DEFB    %01000010
1E02: 0C      	        DEFB    %00001100
1E03: 02      	        DEFB    %00000010
1E04: 42      	        DEFB    %01000010
1E05: 3C      	        DEFB    %00111100
1E06: 00      	        DEFB    %00000000
              	
              	; $34 - Character: '4'          CHR$(52)
              	
1E07: 08      	        DEFB    %00001000
1E08: 18      	        DEFB    %00011000
1E09: 28      	        DEFB    %00101000
1E0A: 48      	        DEFB    %01001000
1E0B: 7E      	        DEFB    %01111110
1E0C: 08      	        DEFB    %00001000
1E0D: 00      	        DEFB    %00000000
              	
              	; $35 - Character: '5'          CHR$(53)
              	
1E0E: 7E      	        DEFB    %01111110
1E0F: 40      	        DEFB    %01000000
1E10: 7C      	        DEFB    %01111100
1E11: 02      	        DEFB    %00000010
1E12: 42      	        DEFB    %01000010
1E13: 3C      	        DEFB    %00111100
1E14: 00      	        DEFB    %00000000
              	
              	; $36 - Character: '6'          CHR$(54)
              	
1E15: 3C      	        DEFB    %00111100
1E16: 40      	        DEFB    %01000000
1E17: 7C      	        DEFB    %01111100
1E18: 42      	        DEFB    %01000010
1E19: 42      	        DEFB    %01000010
1E1A: 3C      	        DEFB    %00111100
1E1B: 00      	        DEFB    %00000000
              	
              	; $37 - Character: '7'          CHR$(55)
              	
1E1C: 7E      	        DEFB    %01111110
1E1D: 02      	        DEFB    %00000010
1E1E: 04      	        DEFB    %00000100
1E1F: 08      	        DEFB    %00001000
1E20: 10      	        DEFB    %00010000
1E21: 10      	        DEFB    %00010000
1E22: 00      	        DEFB    %00000000
              	
              	; $38 - Character: '8'          CHR$(56)
              	
1E23: 3C      	        DEFB    %00111100
1E24: 42      	        DEFB    %01000010
1E25: 3C      	        DEFB    %00111100
1E26: 42      	        DEFB    %01000010
1E27: 42      	        DEFB    %01000010
1E28: 3C      	        DEFB    %00111100
1E29: 00      	        DEFB    %00000000
              	
              	; $39 - Character: '9'          CHR$(57)
              	
1E2A: 3C      	        DEFB    %00111100
1E2B: 42      	        DEFB    %01000010
1E2C: 42      	        DEFB    %01000010
1E2D: 3E      	        DEFB    %00111110
1E2E: 02      	        DEFB    %00000010
1E2F: 3C      	        DEFB    %00111100
1E30: 00      	        DEFB    %00000000
              	
              	; $3A - Character: ':'          CHR$(58)
              	
1E31: 00      	        DEFB    %00000000
1E32: 00      	        DEFB    %00000000
1E33: 10      	        DEFB    %00010000
1E34: 00      	        DEFB    %00000000
1E35: 00      	        DEFB    %00000000
1E36: 10      	        DEFB    %00010000
1E37: 00      	        DEFB    %00000000
              	
              	; $3B - Character: ';'          CHR$(59)
              	
1E38: 00      	        DEFB    %00000000
1E39: 10      	        DEFB    %00010000
1E3A: 00      	        DEFB    %00000000
1E3B: 00      	        DEFB    %00000000
1E3C: 10      	        DEFB    %00010000
1E3D: 10      	        DEFB    %00010000
1E3E: 20      	        DEFB    %00100000
              	
              	; $3C - Character: '<'          CHR$(60)
              	
1E3F: 00      	        DEFB    %00000000
1E40: 04      	        DEFB    %00000100
1E41: 08      	        DEFB    %00001000
1E42: 10      	        DEFB    %00010000
1E43: 08      	        DEFB    %00001000
1E44: 04      	        DEFB    %00000100
1E45: 00      	        DEFB    %00000000
              	
              	; $3D - Character: '='          CHR$(61)
              	
1E46: 00      	        DEFB    %00000000
1E47: 00      	        DEFB    %00000000
1E48: 3E      	        DEFB    %00111110
1E49: 00      	        DEFB    %00000000
1E4A: 3E      	        DEFB    %00111110
1E4B: 00      	        DEFB    %00000000
1E4C: 00      	        DEFB    %00000000
              	
              	; $3E - Character: '>'          CHR$(62)
              	
1E4D: 00      	        DEFB    %00000000
1E4E: 10      	        DEFB    %00010000
1E4F: 08      	        DEFB    %00001000
1E50: 04      	        DEFB    %00000100
1E51: 08      	        DEFB    %00001000
1E52: 10      	        DEFB    %00010000
1E53: 00      	        DEFB    %00000000
              	
              	; $3F - Character: '?'          CHR$(63)
              	
1E54: 3C      	        DEFB    %00111100
1E55: 42      	        DEFB    %01000010
1E56: 04      	        DEFB    %00000100
1E57: 08      	        DEFB    %00001000
1E58: 00      	        DEFB    %00000000
1E59: 08      	        DEFB    %00001000
              	
              	; $40 - Character: '@'          CHR$(64)
              	
1E5A: 3C      	        DEFB    %00111100
1E5B: 4A      	        DEFB    %01001010
1E5C: 56      	        DEFB    %01010110
1E5D: 5E      	        DEFB    %01011110
1E5E: 40      	        DEFB    %01000000
1E5F: 3C      	        DEFB    %00111100
              	
              	; $41 - Character: 'A'          CHR$(65)
              	
1E60: 3C      	        DEFB    %00111100
1E61: 42      	        DEFB    %01000010
1E62: 42      	        DEFB    %01000010
1E63: 7E      	        DEFB    %01111110
1E64: 42      	        DEFB    %01000010
1E65: 42      	        DEFB    %01000010
              	
              	; $42 - Character: 'B'          CHR$(66)
              	
1E66: 7C      	        DEFB    %01111100
1E67: 42      	        DEFB    %01000010
1E68: 7C      	        DEFB    %01111100
1E69: 42      	        DEFB    %01000010
1E6A: 42      	        DEFB    %01000010
1E6B: 7C      	        DEFB    %01111100
              	
              	; $43 - Character: 'C'          CHR$(67)
              	
1E6C: 3C      	        DEFB    %00111100
1E6D: 42      	        DEFB    %01000010
1E6E: 40      	        DEFB    %01000000
1E6F: 40      	        DEFB    %01000000
1E70: 42      	        DEFB    %01000010
1E71: 3C      	        DEFB    %00111100
              	
              	; $44 - Character: 'D'          CHR$(68)
              	
1E72: 78      	        DEFB    %01111000
1E73: 44      	        DEFB    %01000100
1E74: 42      	        DEFB    %01000010
1E75: 42      	        DEFB    %01000010
1E76: 44      	        DEFB    %01000100
1E77: 78      	        DEFB    %01111000
              	
              	; $45 - Character: 'E'          CHR$(69)
              	
1E78: 7E      	        DEFB    %01111110
1E79: 40      	        DEFB    %01000000
1E7A: 7C      	        DEFB    %01111100
1E7B: 40      	        DEFB    %01000000
1E7C: 40      	        DEFB    %01000000
1E7D: 7E      	        DEFB    %01111110
              	
              	; $46 - Character: 'F'          CHR$(70)
              	
1E7E: 7E      	        DEFB    %01111110
1E7F: 40      	        DEFB    %01000000
1E80: 7C      	        DEFB    %01111100
1E81: 40      	        DEFB    %01000000
1E82: 40      	        DEFB    %01000000
1E83: 40      	        DEFB    %01000000
              	
              	; $47 - Character: 'G'          CHR$(71)
              	
1E84: 3C      	        DEFB    %00111100
1E85: 42      	        DEFB    %01000010
1E86: 40      	        DEFB    %01000000
1E87: 4E      	        DEFB    %01001110
1E88: 42      	        DEFB    %01000010
1E89: 3C      	        DEFB    %00111100
              	
              	; $48 - Character: 'H'          CHR$(72)
              	
1E8A: 42      	        DEFB    %01000010
1E8B: 42      	        DEFB    %01000010
1E8C: 7E      	        DEFB    %01111110
1E8D: 42      	        DEFB    %01000010
1E8E: 42      	        DEFB    %01000010
1E8F: 42      	        DEFB    %01000010
              	
              	; $49 - Character: 'I'          CHR$(73)
              	
1E90: 3E      	        DEFB    %00111110
1E91: 08      	        DEFB    %00001000
1E92: 08      	        DEFB    %00001000
1E93: 08      	        DEFB    %00001000
1E94: 08      	        DEFB    %00001000
1E95: 3E      	        DEFB    %00111110
              	
              	; $4A - Character: 'J'          CHR$(74)
              	
1E96: 02      	        DEFB    %00000010
1E97: 02      	        DEFB    %00000010
1E98: 02      	        DEFB    %00000010
1E99: 42      	        DEFB    %01000010
1E9A: 42      	        DEFB    %01000010
1E9B: 3C      	        DEFB    %00111100
              	
              	; $4B - Character: 'K'          CHR$(75)
              	
1E9C: 44      	        DEFB    %01000100
1E9D: 48      	        DEFB    %01001000
1E9E: 70      	        DEFB    %01110000
1E9F: 48      	        DEFB    %01001000
1EA0: 44      	        DEFB    %01000100
1EA1: 42      	        DEFB    %01000010
              	
              	; $4C - Character: 'L'          CHR$(76)
              	
1EA2: 40      	        DEFB    %01000000
1EA3: 40      	        DEFB    %01000000
1EA4: 40      	        DEFB    %01000000
1EA5: 40      	        DEFB    %01000000
1EA6: 40      	        DEFB    %01000000
1EA7: 7E      	        DEFB    %01111110
              	
              	; $4D - Character: 'M'          CHR$(77)
              	
1EA8: 42      	        DEFB    %01000010
1EA9: 66      	        DEFB    %01100110
1EAA: 5A      	        DEFB    %01011010
1EAB: 42      	        DEFB    %01000010
1EAC: 42      	        DEFB    %01000010
1EAD: 42      	        DEFB    %01000010
              	
              	; $4E - Character: 'N'          CHR$(78)
              	
1EAE: 42      	        DEFB    %01000010
1EAF: 62      	        DEFB    %01100010
1EB0: 52      	        DEFB    %01010010
1EB1: 4A      	        DEFB    %01001010
1EB2: 46      	        DEFB    %01000110
1EB3: 42      	        DEFB    %01000010
              	
              	; $4F - Character: 'O'          CHR$(79)
              	
1EB4: 3C      	        DEFB    %00111100
1EB5: 42      	        DEFB    %01000010
1EB6: 42      	        DEFB    %01000010
1EB7: 42      	        DEFB    %01000010
1EB8: 42      	        DEFB    %01000010
1EB9: 3C      	        DEFB    %00111100
              	
              	; $50 - Character: 'P'          CHR$(80)
              	
1EBA: 7C      	        DEFB    %01111100
1EBB: 42      	        DEFB    %01000010
1EBC: 42      	        DEFB    %01000010
1EBD: 7C      	        DEFB    %01111100
1EBE: 40      	        DEFB    %01000000
1EBF: 40      	        DEFB    %01000000
              	
              	; $51 - Character: 'Q'          CHR$(81)
              	
1EC0: 3C      	        DEFB    %00111100
1EC1: 42      	        DEFB    %01000010
1EC2: 42      	        DEFB    %01000010
1EC3: 52      	        DEFB    %01010010
1EC4: 4A      	        DEFB    %01001010
1EC5: 3C      	        DEFB    %00111100
              	
              	; $52 - Character: 'R'          CHR$(82)
              	
1EC6: 7C      	        DEFB    %01111100
1EC7: 42      	        DEFB    %01000010
1EC8: 42      	        DEFB    %01000010
1EC9: 7C      	        DEFB    %01111100
1ECA: 44      	        DEFB    %01000100
1ECB: 42      	        DEFB    %01000010
              	
              	; $53 - Character: 'S'          CHR$(83)
              	
1ECC: 3C      	        DEFB    %00111100
1ECD: 40      	        DEFB    %01000000
1ECE: 3C      	        DEFB    %00111100
1ECF: 02      	        DEFB    %00000010
1ED0: 42      	        DEFB    %01000010
1ED1: 3C      	        DEFB    %00111100
              	
              	; $54 - Character: 'T'          CHR$(84)
              	
1ED2: FE      	        DEFB    %11111110
1ED3: 10      	        DEFB    %00010000
1ED4: 10      	        DEFB    %00010000
1ED5: 10      	        DEFB    %00010000
1ED6: 10      	        DEFB    %00010000
1ED7: 10      	        DEFB    %00010000
              	
              	; $55 - Character: 'U'          CHR$(85)
              	
1ED8: 42      	        DEFB    %01000010
1ED9: 42      	        DEFB    %01000010
1EDA: 42      	        DEFB    %01000010
1EDB: 42      	        DEFB    %01000010
1EDC: 42      	        DEFB    %01000010
1EDD: 3E      	        DEFB    %00111110
              	
              	; $56 - Character: 'V'          CHR$(86)
              	
1EDE: 42      	        DEFB    %01000010
1EDF: 42      	        DEFB    %01000010
1EE0: 42      	        DEFB    %01000010
1EE1: 42      	        DEFB    %01000010
1EE2: 24      	        DEFB    %00100100
1EE3: 18      	        DEFB    %00011000
              	
              	; $57 - Character: 'W'          CHR$(87)
              	
1EE4: 42      	        DEFB    %01000010
1EE5: 42      	        DEFB    %01000010
1EE6: 42      	        DEFB    %01000010
1EE7: 42      	        DEFB    %01000010
1EE8: 5A      	        DEFB    %01011010
1EE9: 24      	        DEFB    %00100100
              	
              	; $58 - Character: 'X'          CHR$(88)
              	
1EEA: 42      	        DEFB    %01000010
1EEB: 24      	        DEFB    %00100100
1EEC: 18      	        DEFB    %00011000
1EED: 18      	        DEFB    %00011000
1EEE: 24      	        DEFB    %00100100
1EEF: 42      	        DEFB    %01000010
              	
              	; $59 - Character: 'Y'          CHR$(89)
              	
1EF0: 82      	        DEFB    %10000010
1EF1: 44      	        DEFB    %01000100
1EF2: 28      	        DEFB    %00101000
1EF3: 10      	        DEFB    %00010000
1EF4: 10      	        DEFB    %00010000
1EF5: 10      	        DEFB    %00010000
              	
              	; $5A - Character: 'Z'          CHR$(90)
              	
1EF6: 7E      	        DEFB    %01111110
1EF7: 04      	        DEFB    %00000100
1EF8: 08      	        DEFB    %00001000
1EF9: 10      	        DEFB    %00010000
1EFA: 20      	        DEFB    %00100000
1EFB: 7E      	        DEFB    %01111110
              	
              	; $5B - Character: '['          CHR$(91)
              	
1EFC: 0E      	        DEFB    %00001110
1EFD: 08      	        DEFB    %00001000
1EFE: 08      	        DEFB    %00001000
1EFF: 08      	        DEFB    %00001000
1F00: 08      	        DEFB    %00001000
1F01: 0E      	        DEFB    %00001110
              	
              	; $5C - Character: '\'          CHR$(92)
              	
1F02: 00      	        DEFB    %00000000
1F03: 40      	        DEFB    %01000000
1F04: 20      	        DEFB    %00100000
1F05: 10      	        DEFB    %00010000
1F06: 08      	        DEFB    %00001000
1F07: 04      	        DEFB    %00000100
              	
              	; $5D - Character: ']'          CHR$(93)
              	
1F08: 70      	        DEFB    %01110000
1F09: 10      	        DEFB    %00010000
1F0A: 10      	        DEFB    %00010000
1F0B: 10      	        DEFB    %00010000
1F0C: 10      	        DEFB    %00010000
1F0D: 70      	        DEFB    %01110000
              	
              	; $5E - Character: '^'          CHR$(94)
              	
1F0E: 10      	        DEFB    %00010000
1F0F: 38      	        DEFB    %00111000
1F10: 54      	        DEFB    %01010100
1F11: 10      	        DEFB    %00010000
1F12: 10      	        DEFB    %00010000
1F13: 10      	        DEFB    %00010000
              	
              	; $5F - Character: '_'          CHR$(95)
              	
1F14: 00      	        DEFB    %00000000
1F15: 00      	        DEFB    %00000000
1F16: 00      	        DEFB    %00000000
1F17: 00      	        DEFB    %00000000
1F18: 00      	        DEFB    %00000000
1F19: 00      	        DEFB    %00000000
1F1A: FF      	        DEFB    %11111111
              	
              	; $60 - Character:  Â£           CHR$(96)
              	
1F1B: 1C      	        DEFB    %00011100
1F1C: 22      	        DEFB    %00100010
1F1D: 78      	        DEFB    %01111000
1F1E: 20      	        DEFB    %00100000
1F1F: 20      	        DEFB    %00100000
1F20: 7E      	        DEFB    %01111110
1F21: 00      	        DEFB    %00000000
              	
              	; $61 - Character: 'a'          CHR$(97)
              	
1F22: 00      	        DEFB    %00000000
1F23: 38      	        DEFB    %00111000
1F24: 04      	        DEFB    %00000100
1F25: 3C      	        DEFB    %00111100
1F26: 44      	        DEFB    %01000100
1F27: 3E      	        DEFB    %00111110
1F28: 00      	        DEFB    %00000000
              	
              	; $62 - Character: 'b'          CHR$(98)
              	
1F29: 20      	        DEFB    %00100000
1F2A: 20      	        DEFB    %00100000
1F2B: 3C      	        DEFB    %00111100
1F2C: 22      	        DEFB    %00100010
1F2D: 22      	        DEFB    %00100010
1F2E: 3C      	        DEFB    %00111100
1F2F: 00      	        DEFB    %00000000
              	
              	; $63 - Character: 'c'          CHR$(99)
              	
1F30: 00      	        DEFB    %00000000
1F31: 1C      	        DEFB    %00011100
1F32: 20      	        DEFB    %00100000
1F33: 20      	        DEFB    %00100000
1F34: 20      	        DEFB    %00100000
1F35: 1C      	        DEFB    %00011100
1F36: 00      	        DEFB    %00000000
              	
              	; $64 - Character: 'd'          CHR$(100)
              	
1F37: 04      	        DEFB    %00000100
1F38: 04      	        DEFB    %00000100
1F39: 3C      	        DEFB    %00111100
1F3A: 44      	        DEFB    %01000100
1F3B: 44      	        DEFB    %01000100
1F3C: 3E      	        DEFB    %00111110
1F3D: 00      	        DEFB    %00000000
              	
              	; $65 - Character: 'e'          CHR$(101)
              	
1F3E: 00      	        DEFB    %00000000
1F3F: 38      	        DEFB    %00111000
1F40: 44      	        DEFB    %01000100
1F41: 78      	        DEFB    %01111000
1F42: 40      	        DEFB    %01000000
1F43: 3C      	        DEFB    %00111100
1F44: 00      	        DEFB    %00000000
              	
              	; $66 - Character: 'f'          CHR$(102)
              	
1F45: 0C      	        DEFB    %00001100
1F46: 10      	        DEFB    %00010000
1F47: 18      	        DEFB    %00011000
1F48: 10      	        DEFB    %00010000
1F49: 10      	        DEFB    %00010000
1F4A: 10      	        DEFB    %00010000
1F4B: 00      	        DEFB    %00000000
              	
              	; $67 - Character: 'g'          CHR$(103)
              	
1F4C: 00      	        DEFB    %00000000
1F4D: 3C      	        DEFB    %00111100
1F4E: 44      	        DEFB    %01000100
1F4F: 44      	        DEFB    %01000100
1F50: 3C      	        DEFB    %00111100
1F51: 04      	        DEFB    %00000100
1F52: 38      	        DEFB    %00111000
              	
              	; $68 - Character: 'h'          CHR$(104)
              	
1F53: 40      	        DEFB    %01000000
1F54: 40      	        DEFB    %01000000
1F55: 78      	        DEFB    %01111000
1F56: 44      	        DEFB    %01000100
1F57: 44      	        DEFB    %01000100
1F58: 44      	        DEFB    %01000100
1F59: 00      	        DEFB    %00000000
              	
              	; $69 - Character: 'i'          CHR$(105)
              	
1F5A: 10      	        DEFB    %00010000
1F5B: 00      	        DEFB    %00000000
1F5C: 30      	        DEFB    %00110000
1F5D: 10      	        DEFB    %00010000
1F5E: 10      	        DEFB    %00010000
1F5F: 38      	        DEFB    %00111000
1F60: 00      	        DEFB    %00000000
              	
              	; $6A - Character: 'j'          CHR$(106)
              	
1F61: 04      	        DEFB    %00000100
1F62: 00      	        DEFB    %00000000
1F63: 04      	        DEFB    %00000100
1F64: 04      	        DEFB    %00000100
1F65: 04      	        DEFB    %00000100
1F66: 24      	        DEFB    %00100100
1F67: 18      	        DEFB    %00011000
              	
              	; $6B - Character: 'k'          CHR$(107)
              	
1F68: 20      	        DEFB    %00100000
1F69: 28      	        DEFB    %00101000
1F6A: 30      	        DEFB    %00110000
1F6B: 30      	        DEFB    %00110000
1F6C: 28      	        DEFB    %00101000
1F6D: 24      	        DEFB    %00100100
1F6E: 00      	        DEFB    %00000000
              	
              	; $6C - Character: 'l'          CHR$(108)
              	
1F6F: 10      	        DEFB    %00010000
1F70: 10      	        DEFB    %00010000
1F71: 10      	        DEFB    %00010000
1F72: 10      	        DEFB    %00010000
1F73: 10      	        DEFB    %00010000
1F74: 0C      	        DEFB    %00001100
1F75: 00      	        DEFB    %00000000
              	
              	; $6D - Character: 'm'          CHR$(109)
              	
1F76: 00      	        DEFB    %00000000
1F77: 68      	        DEFB    %01101000
1F78: 54      	        DEFB    %01010100
1F79: 54      	        DEFB    %01010100
1F7A: 54      	        DEFB    %01010100
1F7B: 54      	        DEFB    %01010100
1F7C: 00      	        DEFB    %00000000
              	
              	; $6E - Character: 'n'          CHR$(110)
              	
1F7D: 00      	        DEFB    %00000000
1F7E: 78      	        DEFB    %01111000
1F7F: 44      	        DEFB    %01000100
1F80: 44      	        DEFB    %01000100
1F81: 44      	        DEFB    %01000100
1F82: 44      	        DEFB    %01000100
1F83: 00      	        DEFB    %00000000
              	
              	; $6F - Character: 'o'          CHR$(111)
              	
1F84: 00      	        DEFB    %00000000
1F85: 38      	        DEFB    %00111000
1F86: 44      	        DEFB    %01000100
1F87: 44      	        DEFB    %01000100
1F88: 44      	        DEFB    %01000100
1F89: 38      	        DEFB    %00111000
1F8A: 00      	        DEFB    %00000000
              	
              	; $70 - Character: 'p'          CHR$(112)
              	
1F8B: 00      	        DEFB    %00000000
1F8C: 78      	        DEFB    %01111000
1F8D: 44      	        DEFB    %01000100
1F8E: 44      	        DEFB    %01000100
1F8F: 78      	        DEFB    %01111000
1F90: 40      	        DEFB    %01000000
1F91: 40      	        DEFB    %01000000
              	
              	; $71 - Character: 'q'          CHR$(113)
              	
1F92: 00      	        DEFB    %00000000
1F93: 3C      	        DEFB    %00111100
1F94: 44      	        DEFB    %01000100
1F95: 44      	        DEFB    %01000100
1F96: 3C      	        DEFB    %00111100
1F97: 04      	        DEFB    %00000100
1F98: 06      	        DEFB    %00000110
              	
              	; $72 - Character: 'r'          CHR$(114)
              	
1F99: 00      	        DEFB    %00000000
1F9A: 1C      	        DEFB    %00011100
1F9B: 20      	        DEFB    %00100000
1F9C: 20      	        DEFB    %00100000
1F9D: 20      	        DEFB    %00100000
1F9E: 20      	        DEFB    %00100000
1F9F: 00      	        DEFB    %00000000
              	
              	; $73 - Character: 's'          CHR$(115)
              	
1FA0: 00      	        DEFB    %00000000
1FA1: 38      	        DEFB    %00111000
1FA2: 40      	        DEFB    %01000000
1FA3: 38      	        DEFB    %00111000
1FA4: 04      	        DEFB    %00000100
1FA5: 78      	        DEFB    %01111000
1FA6: 00      	        DEFB    %00000000
              	
              	; $74 - Character: 't'          CHR$(116)
              	
1FA7: 10      	        DEFB    %00010000
1FA8: 38      	        DEFB    %00111000
1FA9: 10      	        DEFB    %00010000
1FAA: 10      	        DEFB    %00010000
1FAB: 10      	        DEFB    %00010000
1FAC: 0C      	        DEFB    %00001100
1FAD: 00      	        DEFB    %00000000
              	
              	; $75 - Character: 'u'          CHR$(117)
              	
1FAE: 00      	        DEFB    %00000000
1FAF: 44      	        DEFB    %01000100
1FB0: 44      	        DEFB    %01000100
1FB1: 44      	        DEFB    %01000100
1FB2: 44      	        DEFB    %01000100
1FB3: 3C      	        DEFB    %00111100
1FB4: 00      	        DEFB    %00000000
              	
              	; $76 - Character: 'v'          CHR$(118)
              	
1FB5: 00      	        DEFB    %00000000
1FB6: 44      	        DEFB    %01000100
1FB7: 44      	        DEFB    %01000100
1FB8: 28      	        DEFB    %00101000
1FB9: 28      	        DEFB    %00101000
1FBA: 10      	        DEFB    %00010000
1FBB: 00      	        DEFB    %00000000
              	
              	; $77 - Character: 'w'          CHR$(119)
              	
1FBC: 00      	        DEFB    %00000000
1FBD: 44      	        DEFB    %01000100
1FBE: 54      	        DEFB    %01010100
1FBF: 54      	        DEFB    %01010100
1FC0: 54      	        DEFB    %01010100
1FC1: 28      	        DEFB    %00101000
1FC2: 00      	        DEFB    %00000000
              	
              	; $78 - Character: 'x'          CHR$(120)
              	
1FC3: 00      	        DEFB    %00000000
1FC4: 44      	        DEFB    %01000100
1FC5: 28      	        DEFB    %00101000
1FC6: 10      	        DEFB    %00010000
1FC7: 28      	        DEFB    %00101000
1FC8: 44      	        DEFB    %01000100
1FC9: 00      	        DEFB    %00000000
              	
              	; $79 - Character: 'y'          CHR$(121)
              	
1FCA: 00      	        DEFB    %00000000
1FCB: 44      	        DEFB    %01000100
1FCC: 44      	        DEFB    %01000100
1FCD: 44      	        DEFB    %01000100
1FCE: 3C      	        DEFB    %00111100
1FCF: 04      	        DEFB    %00000100
1FD0: 38      	        DEFB    %00111000
              	
              	; $7A - Character: 'z'          CHR$(122)
              	
1FD1: 00      	        DEFB    %00000000
1FD2: 7C      	        DEFB    %01111100
1FD3: 08      	        DEFB    %00001000
1FD4: 10      	        DEFB    %00010000
1FD5: 20      	        DEFB    %00100000
1FD6: 7C      	        DEFB    %01111100
1FD7: 00      	        DEFB    %00000000
              	
              	; $7B - Character: '{'          CHR$(123)
              	
1FD8: 0E      	        DEFB    %00001110
1FD9: 08      	        DEFB    %00001000
1FDA: 30      	        DEFB    %00110000
1FDB: 30      	        DEFB    %00110000
1FDC: 08      	        DEFB    %00001000
1FDD: 0E      	        DEFB    %00001110
1FDE: 00      	        DEFB    %00000000
              	
              	; $7C - Character: '|'          CHR$(124)
              	
1FDF: 08      	        DEFB    %00001000
1FE0: 08      	        DEFB    %00001000
1FE1: 08      	        DEFB    %00001000
1FE2: 08      	        DEFB    %00001000
1FE3: 08      	        DEFB    %00001000
1FE4: 08      	        DEFB    %00001000
1FE5: 00      	        DEFB    %00000000
              	
              	; $7D - Character: '}'          CHR$(125)
              	
1FE6: 70      	        DEFB    %01110000
1FE7: 10      	        DEFB    %00010000
1FE8: 0C      	        DEFB    %00001100
1FE9: 0C      	        DEFB    %00001100
1FEA: 10      	        DEFB    %00010000
1FEB: 70      	        DEFB    %01110000
1FEC: 00      	        DEFB    %00000000
              	
              	; $7E - Character: '~'          CHR$(126)
              	
1FED: 32      	        DEFB    %00110010
1FEE: 4C      	        DEFB    %01001100
1FEF: 00      	        DEFB    %00000000
1FF0: 00      	        DEFB    %00000000
1FF1: 00      	        DEFB    %00000000
1FF2: 00      	        DEFB    %00000000
1FF3: 00      	        DEFB    %00000000
              	
              	; $7F - Character:  Â©           CHR$(127)
              	
1FF4: 3C      	        DEFB    %00111100
1FF5: 42      	        DEFB    %01000010
1FF6: 99      	        DEFB    %10011001
1FF7: A1      	        DEFB    %10100001
1FF8: A1      	        DEFB    %10100001
1FF9: 99      	        DEFB    %10011001
1FFA: 42      	        DEFB    %01000010
1FFB: 3C      	L1FFB:  DEFB    %00111100
              	
              	
              	; ---------------
              	; THE 'SPARE' ROM
              	; ---------------
              	
1FFC: FF      	L1FFC:  DEFB    $FF                     ; unused
              	
              	; ----------
              	; THE 'LINK'
              	; ----------
              	
              	; The FORTH word copied to RAM links back to L1FFF
              	
1FFD: 581D    	L1FFD:  DEFW    L1D58                   ; pointer to prev - UFLOAT
1FFF: 00      	L1FFF:  DEFB    $00                     ; length of dummy word zero
              	
              	
              	.END
              	
              	; -----------
              	;
              	; -----------
              	; ----------------------
              	; THE 'SYSTEM VARIABLES'
              	; ----------------------
              	; "Here is a list of system variables. We have given them all names, but that
              	; is just for ease of reference. The Ace will not recognize these names,
              	; except for a few, like 'BASE', that are FORTH words. I've written these
              	; FORTH words in bold type in the usual way."
              	;
              	;
              	; FP_WS         $3C00 (15360)   19 bytes used as work space for floating point
              	;                               arithmetic.
              	;
              	; LISTWS        $3C13 (15379)   5 bytes used as workspace by 'LIST' and 'EDIT'.
              	;
              	; RAMTOP        $3C18 (15384)   2 bytes - the first address past the last
              	;                               address in RAM.
              	;
              	; HLD           $3C1A (15386)   2 bytes. The address of the latest character
              	;                               held in the pad by formatted output.
              	;                               ('#', 'HOLD' and so on).
              	;
              	; SCRPOS        $3C1C (15388)   2 bytes. The address of the place in video RAM
              	;                               where the next character is to be printed
              	;                               (i.e. the 'print position').
              	;
              	; INSCRN        $3C1E (15390)   2 bytes. The address of the start of the
              	;                               current 'logical line' in the input buffer.
              	;
              	; CURSOR        $3C20 (15392)   2 bytes. The address of the cursor in the
              	;                               input buffer.
              	;
              	; ENDBUF        $3C22 (15394)   2 bytes. The address of the end of the current
              	;                               logical line in the input buffer.
              	;
              	; L_HALF        $3C24 (15396)   2 bytes. The address of the start of the the
              	;                               input buffer. The input buffer itself is stored
              	;                               in the video RAM, where you see it.
              	;
              	; KEYCOD        $3C26 (15398)   1 byte. The ASCII code of the last key pressed.
              	;
              	; KEYCNT        $3C27 (15399)   1 byte. Used by the routine that reads the
              	;                               keyboard.
              	;
              	; STATIN        $3C28 (15400)   1 byte. Used by the routine that reads the
              	;                               keyboard.
              	;
              	; EXWRCH        $3C29 (15401)   2 bytes. This is normally 0 but it can be
              	;                               changed to allow printing to be sent to some
              	;                               device other than the screen.
              	;
              	; FRAMES        $3C2B (15403)   4 bytes. These four bytes form a double length
              	;                               integer that counts the time since the Ace was
              	;                               switched on in 50ths of a second.
              	;
              	; XCOORD        $3C2F (15407)   1 byte. The x-coordinate last used by 'PLOT'.
              	;
              	; YCOORD        $3C30 (15408)   1 byte. The y-coordinate last used by 'PLOT'.
              	;
              	; CURRENT       $3C31 (15409)   2 bytes. The parameter field address for the
              	;                               vocabulary word of the current vocabulary.
              	;
              	; CONTEXT       $3C33 (15411)   2 bytes. The parameter field address for the
              	;                               vocabulary word of the context vocabulary.
              	;
              	; VOCLNK        $3C35 (15413)   2 bytes. The address of the fourth byte in the
              	;                               parameter field - the vocabulary linkage - of
              	;                               the vocabulary word of the most recently
              	;                               defined vocabulary.
              	;
              	; STKBOT        $3C37 (15415)   2 bytes. The address of the next byte into
              	;                               which anything will be enclosed in the
              	;                               dictionary, i.e. one byte past the present end
              	;                               of the dictionary.
              	;                               'HERE' is equivalent to 15415 @.
              	;
              	; DICT          $3C39 (15417)   2 bytes. The address of the length field in the
              	;                               newest word in the dictionary. If that length
              	;                               field is correctly filled in then DICT may
              	;                               be 0.
              	;
              	; SPARE         $3C3B (15419)   2 bytes. The address of the first byte past the
              	;                               top of the stack.
              	;
              	; ERR_NO        $3C3D (15421)   1 byte. This is usually 255, meaning "no error".
              	;                               If 'ABORT' is used, and ERR_NO is between 0 and
              	;                               127, then "ERROR" will be printed out, followed
              	;                               by the error number ERR_NO.
              	;
              	; FLAGS         $3C3E (15422)   1 byte. Shows the state of various parts of the
              	;                               system, each bit showing whether something
              	;                               particular is happening or not. Some of these
              	;                               may be useful.
              	;
              	;                               Bit 2, when 1, shows that there is an incomplete
              	;                               definition at the end of the dictionary.
              	;
              	;                               Bit 3, when 1, shows that output is to fed into
              	;                               the input buffer.
              	;
              	;                               Bit 4, when 1, shows that the Ace is in
              	;                               invisible mode.
              	;
              	;                               Bit 6, when 1, shows that the Ace is in compile
              	;                               mode.
              	;
              	; BASE          $3C3F (15423)   1 byte. The system number base.
              	;
              	;
              	;
              	; -----------------------------------------------------------------------------
              	;                                    ---------
              	;                                   -------------------------------------------
              	; ------------                     --------------------------------------------
              	; ACE KEYBOARD                    ---------
              	; ------------                   ---------
              	;
              	;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
              	;|   ! | |   @ | |   # | |   $ | |   % | |   & | |   ' | |   ( | |   ) | |   _ |
              	;| 1 []| | 2 []| | 3 []| | 4 []| | 5 []| | 6 []| | 7 []| | 8   | | 9   | | 0 []|
              	;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
              	; DELETE   CAPS            INV    <=        ^       v        =>  GRAPHIC  DELETE
              	;  LINE    LOCK           VIDEO
              	;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
              	;|     | |     | |     | |   < | |   > | |   [ | |   ] | |   Â© | |   ; | |   " |
              	;| Q   | | W   | | E   | | R   | | T   | | Y   | | U   | | I   | | O   | | P   |
              	;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
              	;
              	;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
              	;|   ~ | |   | | |   \ | |   { | |   } | |   ^ | |   - | |   + | |   = | |     |
              	;| A   | | S   | | D   | | F   | | G   | | H   | | J   | | K   | | L   | |ENTER|
              	;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
              	;
              	;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
              	;|     | |   : | |   Â£ | |   ? | |   / | |   * | |   , | |   . | | SYM | |     |
              	;|SHIFT| | Z   | | X   | | C   | | V   | | B   | | N   | | M   | |SHIFT| |SPACE|
              	;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
              	;
              	;
              	;                     [] mosaic graphic          Â£  currency symbol
              	;
              	; -----------------------------------------------------------------------------
              	


total time: 0.0498 sec.
no errors

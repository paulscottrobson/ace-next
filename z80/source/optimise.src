# *****************************************************************************
# *****************************************************************************
#
#		Name:		optimise.src
#		Author:		Paul Robson (paul@robsons.org.uk)
#		Date:		22nd October 2021
#		Reviewed: 	No
#		Purpose:	Optimised operations
#
# *****************************************************************************
# *****************************************************************************

#
#		RST 10 pushes DE on the stack
#
D7 		"RST $10" 78
		temp16 = READ16(0x3C3B);
		WRITE8(temp16,E);
		WRITE8(temp16+1,D);
		temp16 += 2;
		WRITE16(0x3C3B,temp16);
		SETHL(temp16);

#
# 		RST18 pops DE off the stack.
#
DF 		"RST $18" 78
		temp16 = READ16(0x3C3B)-2;
		E = READ8(temp16);
		D = READ8(temp16+1);
		WRITE16(0x3C3B,temp16);
		SETHL(temp16);

#
# 		$EDE0 pops BC off the stack
#
EDE0 	"POPA BC" 68
		temp16 = READ16(0x3C3B)-2;
		C = READ8(temp16);
		B = READ8(temp16+1);
		WRITE16(0x3C3B,temp16);
		SETHL(temp16);

#
# 		RST38 is coopted for $04B9 .. $04C5. 
#
# 		There is only one byte space because of the entry at $04BA.
#
FF 		"NEXT" 	85
		temp16 = POP();
		temp16a = READ16(temp16);
		temp16 += 2;
		PUSH(temp16);

		PC = READ16(temp16a);
		temp16a += 2;

		SETHL(PC);
		SETDE(temp16a);

#
# 		This replaces the DOCOL code at $04BA and is almost identical
# 		to FF/NEXT except HL is not popped from the stack.
#
EDE1 	"DOCOL" 	75
		temp16 = HL();
		temp16a = READ16(temp16);
		temp16 += 2;
		PUSH(temp16);

		PC = READ16(temp16a);
		temp16a += 2;

		SETHL(PC);
		SETDE(temp16a);
